[{"url":"%2F2019%2F11%2F03%2F%E5%A4%9C.resource%2Fcommit%2F","content":"{\"compress\":true,\"commitItems\":[[\"db42c0cc-eb27-4048-8740-284abd75e5da\",1572787676450,\"---\\ntitle: 夜\\ndate: 2019-11-03 21:26:47\\ntags:\\n---\\n\",[[1572787619679,[\"x@x.local\",[[1,45,\"\\n\"]],[44,44],[45,45]]],[1572787622852,[\"x@x.local\",[[1,45,\" - 日常\"]],[45,45],[50,50]]],[1572787624534,[\"x@x.local\",[[1,55,\"\\n\"]],[54,54],[55,55]]],[1572787624790,[\"x@x.local\",[[1,56,\"\\n\"]],[55,55],[56,56]]],[1572787628376,[\"x@x.local\",[[-1,56,\"\\n\"],[1,57,\"一直\"]],[56,56],[58,58]]],[1572787630243,[\"x@x.local\",[[1,58,\"反对\"]],[58,58],[60,60]]],[1572787632290,[\"x@x.local\",[[-1,58,\"反对\"]],[60,60],[58,58]]],[1572787656316,[\"x@x.local\",[[1,58,\"觉得靠酗酒来度日的人，是很丧的。这种丧是伴随\"]],[58,58],[80,80]]],[1572787657639,[\"x@x.local\",[[-1,74,\"这种丧是伴随\"]],[80,80],[74,74]]],[1572787663445,[\"x@x.local\",[[-1,63,\"来\"]],[64,64],[63,63]]],[1572787670705,[\"x@x.local\",[[1,73,\"\\n\\n\"]],[73,73],[74,74]]],[1572787672843,[\"x@x.local\",[[-1,74,\"\\n\"],[1,75,\"大体上\"]],[74,74],[77,77]]],[1572787673311,[\"x@x.local\",[[1,77,\"的\"]],[77,77],[78,78]]],[1572787674770,[\"x@x.local\",[[-1,75,\"体上的\"]],[78,78],[75,75]]],[1572787674921,[\"x@x.local\",[[-1,74,\"大\"],[1,75,\"\\n\"]],[75,75],[74,74]]],[1572787679207,[\"x@x.local\",[[-1,74,\"\\n\"],[1,75,\"几个凶狠地\"]],[74,74],[79,79]]],[1572787679870,[\"x@x.local\",[[-1,76,\"凶狠地\"]],[79,79],[76,76]]],[1572787710277,[\"x@x.local\",[[1,76,\"兄弟，同样的生活环境，各异的性格，看上去还蛮有趣。\"]],[76,76],[101,101]]],[1572787821035,[\"x@x.local\",[[-1,78,\"，\"]],[79,79],[78,78]]],[1572787854247,[\"x@x.local\",[[-1,85,\"，\"]],[86,86],[85,85]]],[1572787878976,[\"x@x.local\",[[1,99,\"这种趣味包括一些低级的东西，所以父亲家的亲戚我从来\"]],[99,99],[124,124]]],[1572787881637,[\"x@x.local\",[[-1,112,\"，所以父亲家的亲戚我从来\"]],[124,124],[112,112]]],[1572787882522,[\"x@x.local\",[[1,112,\"。\"]],[112,112],[113,113]]],[1572787886859,[\"x@x.local\",[[1,99,\"\\n\"]],[99,99],[100,100]]],[1572787891462,[\"x@x.local\",[[-1,108,\"低级的东西。\"]],[114,114],[108,108]]],[1572787897404,[\"x@x.local\",[[1,108,\"人性中的自私、\"]],[108,108],[115,115]]],[1572787913373,[\"x@x.local\",[[1,108,\"对\"]],[108,108],[109,109]]],[1572787922769,[\"x@x.local\",[[1,116,\"奸诈、\"]],[116,116],[119,119]]],[1572787924597,[\"x@x.local\",[[-1,118,\"、\"]],[119,119],[118,118]]],[1572787926532,[\"x@x.local\",[[1,118,\"和所谓\"]],[118,118],[121,121]]],[1572787929630,[\"x@x.local\",[[-1,101,\"种趣味包括一些对人性中的自私、奸诈和所谓\"]],[121,121],[101,101]]],[1572787929831,[\"x@x.local\",[[-1,100,\"这\"],[1,101,\"\\n\"]],[101,101],[100,100]]],[1572787946510,[\"x@x.local\",[[-1,100,\"\\n\"],[1,101,\"这种\"]],[100,100],[102,102]]],[1572787948264,[\"x@x.local\",[[1,102,\"趣味是\"]],[102,102],[105,105]]],[1572787951927,[\"x@x.local\",[[-1,101,\"种趣味是\"]],[105,105],[101,101]]],[1572787952602,[\"x@x.local\",[[-1,100,\"这\"],[1,101,\"\\n\"]],[101,101],[100,100]]],[1572787953543,[\"x@x.local\",[[-1,100,\"\\n\"],[1,101,\"这种\"]],[100,100],[102,102]]],[1572787955852,[\"x@x.local\",[[1,102,\"趣味需要\"]],[102,102],[106,106]]],[1572787957493,[\"x@x.local\",[[-1,101,\"种趣味需要\"]],[106,106],[101,101]]],[1572787957642,[\"x@x.local\",[[-1,100,\"这\"],[1,101,\"\\n\"]],[101,101],[100,100]]],[1572787960536,[\"x@x.local\",[[-1,100,\"\\n\"],[1,101,\"只不过\"]],[100,100],[103,103]]],[1572787964238,[\"x@x.local\",[[1,103,\"在有一些\"]],[103,103],[107,107]]],[1572787967334,[\"x@x.local\",[[-1,101,\"不过在有一些\"]],[107,107],[101,101]]],[1572787967603,[\"x@x.local\",[[-1,100,\"只\"],[1,101,\"\\n\"]],[101,101],[100,100]]],[1572787969895,[\"x@x.local\",[[-1,100,\"\\n\"],[1,101,\"有一些\"]],[100,100],[103,103]]],[1572787971647,[\"x@x.local\",[[1,103,\"年头的\"]],[103,103],[106,106]]],[1572787974487,[\"x@x.local\",[[-1,101,\"一些年头的\"]],[106,106],[101,101]]],[1572787974652,[\"x@x.local\",[[-1,100,\"有\"],[1,101,\"\\n\"]],[101,101],[100,100]]],[1572787977165,[\"x@x.local\",[[-1,100,\"\\n\"],[1,101,\"一年\"]],[100,100],[102,102]]],[1572787988208,[\"x@x.local\",[[1,102,\"之中，能见到那些亲戚的即为少数\"]],[102,102],[117,117]]],[1572787996980,[\"x@x.local\",[[-1,105,\"能见到那些亲戚的即为少数\"]],[117,117],[105,105]]],[1572788010175,[\"x@x.local\",[[1,105,\"偶尔能遇到一两次这些人。\"]],[105,105],[117,117]]],[1572788011958,[\"x@x.local\",[[1,117,\"\\n\\n\"]],[117,117],[118,118]]],[1572788016038,[\"x@x.local\",[[-1,118,\"\\n\"],[1,119,\"堂兄弟\"]],[118,118],[121,121]]],[1572788017865,[\"x@x.local\",[[1,121,\"几个也\"]],[121,121],[124,124]]],[1572788032328,[\"x@x.local\",[[-1,119,\"兄弟几个也\"]],[124,124],[119,119]]],[1572788035311,[\"x@x.local\",[[1,119,\"姐\"]],[119,119],[120,120]]],[1572788042646,[\"x@x.local\",[[1,120,\"堂哥\"]],[120,120],[122,122]]],[1572788044239,[\"x@x.local\",[[-1,119,\"姐堂哥\"]],[122,122],[119,119]]],[1572788044659,[\"x@x.local\",[[-1,118,\"堂\"],[1,119,\"\\n\"]],[119,119],[118,118]]],[1572788046980,[\"x@x.local\",[[-1,118,\"\\n\"],[1,119,\"同辈\"]],[118,118],[120,120]]],[1572788049379,[\"x@x.local\",[[1,120,\"的各个阶级\"]],[120,120],[125,125]]],[1572788050208,[\"x@x.local\",[[-1,121,\"各个阶级\"]],[125,125],[121,121]]],[1572788056503,[\"x@x.local\",[[1,121,\"哥哥姐姐弟弟妹妹，我\"]],[121,121],[131,131]]],[1572788058909,[\"x@x.local\",[[-1,130,\"我\"]],[131,131],[130,130]]],[1572788061184,[\"x@x.local\",[[1,130,\"两遍\"]],[130,130],[132,132]]],[1572788062704,[\"x@x.local\",[[-1,131,\"遍\"]],[132,132],[131,131]]],[1572788063868,[\"x@x.local\",[[1,131,\"边\"]],[131,131],[132,132]]],[1572788064698,[\"x@x.local\",[[-1,130,\"两边\"]],[132,132],[130,130]]],[1572788095827,[\"x@x.local\",[[1,130,\"加起来一共有13\"]],[130,130],[138,138]]],[1572788099870,[\"x@x.local\",[[1,138,\"个人，很抱歉\"]],[138,138],[144,144]]],[1572788101239,[\"x@x.local\",[[-1,140,\"，很抱歉\"]],[144,144],[140,140]]],[1572788101542,[\"x@x.local\",[[1,140,\"。\"]],[140,140],[141,141]]],[1572788102379,[\"x@x.local\",[[1,141,\"\\n\\n\"]],[141,141],[142,142]]],[1572788103879,[\"x@x.local\",[[-1,142,\"\\n\"],[1,143,\"很抱歉\"]],[142,142],[145,145]]],[1572788105754,[\"x@x.local\",[[-1,143,\"抱歉\"]],[145,145],[143,143]]],[1572788105904,[\"x@x.local\",[[-1,142,\"很\"],[1,143,\"\\n\"]],[143,143],[142,142]]],[1572788107100,[\"x@x.local\",[[-1,142,\"\\n\"],[1,143,\"除了\"]],[142,142],[144,144]]],[1572788112875,[\"x@x.local\",[[1,144,\"年龄差别大的，机会\"]],[144,144],[153,153]]],[1572788113449,[\"x@x.local\",[[-1,151,\"机会\"]],[153,153],[151,151]]],[1572788116145,[\"x@x.local\",[[1,151,\"近点的\"]],[151,151],[154,154]]],[1572788118826,[\"x@x.local\",[[-1,143,\"了年龄差别大的，近点的\"]],[154,154],[143,143]]],[1572788118927,[\"x@x.local\",[[-1,142,\"除\"],[1,143,\"\\n\"]],[143,143],[142,142]]],[1572788119029,[\"x@x.local\",[[-1,142,\"\\n\"]],[142,142],[141,141]]],[1572788122584,[\"x@x.local\",[[-1,118,\"同辈的哥哥姐姐弟弟妹妹，加起来一共有13个人。\"]],[141,141],[118,118]]],[1572788131644,[\"x@x.local\",[[-1,113,\"这些人\"]],[116,116],[113,113]]],[1572788135635,[\"x@x.local\",[[-1,115,\"\\n\"],[1,116,\"我\"]],[115,115],[116,116]]],[1572788146031,[\"x@x.local\",[[1,116,\"能理解的事情是，有时候他们想靠近，\"]],[116,116],[133,133]]],[1572788147064,[\"x@x.local\",[[-1,132,\"，\"]],[133,133],[132,132]]],[1572788148581,[\"x@x.local\",[[1,132,\"，\"]],[132,132],[133,133]]],[1572788150755,[\"x@x.local\",[[-1,129,\"想靠近，\"]],[133,133],[129,129]]],[1572788152415,[\"x@x.local\",[[1,129,\"在纠结\"]],[129,129],[132,132]]],[1572788152959,[\"x@x.local\",[[-1,130,\"纠结\"]],[132,132],[130,130]]],[1572788177421,[\"x@x.local\",[[1,130,\"酒精的作用下表现得好像很亲。实际上一旦过了\"]],[130,130],[151,151]]],[1572788178384,[\"x@x.local\",[[-1,147,\"一旦过了\"]],[151,151],[147,147]]],[1572788181412,[\"x@x.local\",[[1,147,\"为了酒精\"]],[147,147],[151,151]]],[1572788182374,[\"x@x.local\",[[-1,150,\"精\"]],[151,151],[150,150]]],[1572788198408,[\"x@x.local\",[[1,150,\"，有那么一两次还吵过架，翻过桌子\"]],[150,150],[166,166]]],[1572788200000,[\"x@x.local\",[[-1,162,\"翻\"]],[163,163],[162,162]]],[1572788206599,[\"x@x.local\",[[1,162,\"掀\"]],[162,162],[163,163]]],[1572788208913,[\"x@x.local\",[[1,166,\"、\"]],[166,166],[167,167]]],[1572788209600,[\"x@x.local\",[[-1,166,\"、\"]],[167,167],[166,166]]],[1572788209917,[\"x@x.local\",[[1,166,\"。\"]],[166,166],[167,167]]],[1572788216425,[\"x@x.local\",[[-1,117,\"理解\"]],[119,119],[117,117]]],[1572788218115,[\"x@x.local\",[[1,117,\"看到\"]],[117,117],[119,119]]],[1572788221614,[\"x@x.local\",[[-1,126,\"候\"]],[127,127],[126,126]]],[1572788230371,[\"x@x.local\",[[1,146,\"因为\"]],[146,146],[148,148]]],[1572788231755,[\"x@x.local\",[[-1,148,\"为了\"]],[150,150],[148,148]]],[1572788235625,[\"x@x.local\",[[-1,156,\"还\"]],[157,157],[156,156]]],[1572788237035,[\"x@x.local\",[[-1,159,\"，\"]],[160,160],[159,159]]],[1572788239015,[\"x@x.local\",[[1,164,\"\\n\\n\"]],[164,164],[165,165]]],[1572788242012,[\"x@x.local\",[[-1,165,\"\\n\"],[1,166,\"所以\"]],[165,165],[167,167]]],[1572788244035,[\"x@x.local\",[[1,167,\"，我\"]],[167,167],[169,169]]],[1572788246155,[\"x@x.local\",[[-1,166,\"以，我\"]],[169,169],[166,166]]],[1572788246395,[\"x@x.local\",[[-1,165,\"所\"],[1,166,\"\\n\"]],[166,166],[165,165]]],[1572788249330,[\"x@x.local\",[[-1,165,\"\\n\"],[1,166,\"在\"]],[165,165],[166,166]]],[1572788249919,[\"x@x.local\",[[-1,165,\"在\"],[1,166,\"\\n\"]],[166,166],[165,165]]],[1572788250757,[\"x@x.local\",[[-1,165,\"\\n\"],[1,166,\"在\"]],[165,165],[166,166]]],[1572788254639,[\"x@x.local\",[[1,166,\"加上从小\"]],[166,166],[170,170]]],[1572788256025,[\"x@x.local\",[[-1,166,\"加上从小\"]],[170,170],[166,166]]],[1572788256205,[\"x@x.local\",[[-1,165,\"在\"],[1,166,\"\\n\"]],[166,166],[165,165]]],[1572788264440,[\"x@x.local\",[[-1,68,\"是\"]],[69,69],[68,68]]],[1572788265685,[\"x@x.local\",[[-1,70,\"的\"]],[71,71],[70,70]]],[1572788276096,[\"x@x.local\",[[-1,161,\"。\"]],[162,162],[161,161]]],[1572788278602,[\"x@x.local\",[[-1,141,\"实际上因为酒，有那么一两次吵过架掀过桌子\"]],[161,161],[141,141]]],[1572788282740,[\"x@x.local\",[[-1,142,\"\\n\"]],[142,142],[141,141]]],[1572788286410,[\"x@x.local\",[[-1,113,\"我能看到的事情是，有时他们在酒精的作用下表现得好像很亲。\"]],[141,141],[113,113]]],[1572788286510,[\"x@x.local\",[[-1,113,\"\\n\"]],[113,113],[112,112]]],[1572788287930,[\"x@x.local\",[[-1,98,\"一年之中，偶尔能遇到一两次。\"]],[112,112],[98,98]]],[1572788288030,[\"x@x.local\",[[-1,98,\"\\n\"]],[98,98],[97,97]]],[1572788290564,[\"x@x.local\",[[-1,72,\"几个兄弟同样的生活环境各异的性格，看上去还蛮有趣。\"]],[97,97],[72,72]]],[1572788290664,[\"x@x.local\",[[-1,72,\"\\n\"]],[72,72],[71,71]]],[1572788292956,[\"x@x.local\",[[-1,56,\"一直觉得靠酗酒度日的人，很丧。\"]],[71,71],[56,56]]],[1572788295035,[\"x@x.local\",[[-1,56,\"\\n\"],[1,57,\"一年\"]],[56,56],[58,58]]],[1572788299228,[\"x@x.local\",[[1,58,\"之中，大概\"]],[58,58],[63,63]]],[1572788299795,[\"x@x.local\",[[-1,61,\"大概\"]],[63,63],[61,61]]],[1572788303184,[\"x@x.local\",[[1,61,\"有两个\"]],[61,61],[64,64]]],[1572788306305,[\"x@x.local\",[[-1,57,\"年之中，有两个\"]],[64,64],[57,57]]],[1572788306470,[\"x@x.local\",[[-1,56,\"一\"],[1,57,\"\\n\"]],[57,57],[56,56]]],[1572788308655,[\"x@x.local\",[[-1,56,\"\\n\"],[1,57,\"这儿\"]],[56,56],[58,58]]],[1572788309168,[\"x@x.local\",[[1,58,\"的\"]],[58,58],[59,59]]],[1572788310446,[\"x@x.local\",[[-1,57,\"儿的\"]],[59,59],[57,57]]],[1572788311795,[\"x@x.local\",[[-1,56,\"这\"],[1,57,\"\\n\"]],[57,57],[56,56]]],[1572788312932,[\"x@x.local\",[[-1,56,\"\\n\"],[1,57,\"这\"]],[56,56],[57,57]]],[1572788315544,[\"x@x.local\",[[1,57,\"的季节。，\"]],[57,57],[62,62]]],[1572788316145,[\"x@x.local\",[[-1,61,\"，\"]],[62,62],[61,61]]],[1572788317794,[\"x@x.local\",[[1,61,\"往往\"]],[61,61],[63,63]]],[1572788318770,[\"x@x.local\",[[-1,60,\"。往往\"]],[63,63],[60,60]]],[1572788326662,[\"x@x.local\",[[1,60,\"，往往几乎每年都不一样。\"]],[60,60],[72,72]]],[1572788329016,[\"x@x.local\",[[-1,63,\"几乎每年都不一样。\"]],[72,72],[63,63]]],[1572788336203,[\"x@x.local\",[[1,63,\"有些年很反常。\"]],[63,63],[70,70]]],[1572788337354,[\"x@x.local\",[[1,70,\"\\n\\n\"]],[70,70],[71,71]]],[1572788338636,[\"x@x.local\",[[-1,71,\"\\n\"],[1,72,\"比如\"]],[71,71],[73,73]]],[1572788345915,[\"x@x.local\",[[1,73,\"今年秋天就燥热\"]],[73,73],[80,80]]],[1572788347361,[\"x@x.local\",[[-1,78,\"燥热\"]],[80,80],[78,78]]],[1572788350694,[\"x@x.local\",[[1,78,\"很燥热。\"]],[78,78],[82,82]]],[1572788360815,[\"x@x.local\",[[-1,70,\"\\n\"]],[71,71],[70,70]]],[1572788362226,[\"x@x.local\",[[1,81,\"\\n\\n\"]],[81,81],[82,82]]],[1572788365910,[\"x@x.local\",[[-1,82,\"\\n\"],[1,83,\"往常\"]],[82,82],[84,84]]],[1572788367973,[\"x@x.local\",[[1,84,\"的往常，\"]],[84,84],[88,88]]],[1572788368436,[\"x@x.local\",[[-1,87,\"，\"]],[88,88],[87,87]]],[1572788373475,[\"x@x.local\",[[1,87,\"，即便不嫩\"]],[87,87],[92,92]]],[1572788375126,[\"x@x.local\",[[-1,84,\"的往常，即便不嫩\"]],[92,92],[84,84]]],[1572788384256,[\"x@x.local\",[[1,84,\"，夜里除了跑几步\"]],[84,84],[92,92]]],[1572788385011,[\"x@x.local\",[[-1,90,\"几步\"]],[92,92],[90,90]]],[1572788386490,[\"x@x.local\",[[1,90,\"上\"]],[90,90],[91,91]]],[1572788386797,[\"x@x.local\",[[-1,90,\"上\"]],[91,91],[90,90]]],[1572788387545,[\"x@x.local\",[[1,90,\"不\"]],[90,90],[91,91]]],[1572788389166,[\"x@x.local\",[[-1,83,\"常，夜里除了跑不\"]],[91,91],[83,83]]],[1572788389556,[\"x@x.local\",[[-1,82,\"往\"],[1,83,\"\\n\"]],[83,83],[82,82]]],[1572788390855,[\"x@x.local\",[[-1,82,\"\\n\"],[1,83,\"除了\"]],[82,82],[84,84]]],[1572788395329,[\"x@x.local\",[[1,84,\"跑步，一般\"]],[84,84],[89,89]]],[1572788407956,[\"x@x.local\",[[1,89,\"夜里很少出去，这段时间学着\"]],[89,89],[102,102]]],[1572788411365,[\"x@x.local\",[[-1,95,\"，这段时间学着\"]],[102,102],[95,95]]],[1572788412148,[\"x@x.local\",[[1,95,\"。\"]],[95,95],[96,96]]],[1572788417472,[\"x@x.local\",[[1,96,\"\\n\\n\"]],[96,96],[97,97]]],[1572788421148,[\"x@x.local\",[[-1,97,\"\\n\"],[1,98,\"更为\"]],[97,97],[99,99]]],[1572788422387,[\"x@x.local\",[[1,99,\"南得\"]],[99,99],[101,101]]],[1572788423681,[\"x@x.local\",[[-1,98,\"为南得\"]],[101,101],[98,98]]],[1572788424011,[\"x@x.local\",[[-1,97,\"更\"],[1,98,\"\\n\"]],[98,98],[97,97]]],[1572788427519,[\"x@x.local\",[[-1,97,\"\\n\"],[1,98,\"因\"]],[97,97],[98,98]]],[1572788427881,[\"x@x.local\",[[-1,97,\"因\"],[1,98,\"\\n\"]],[98,98],[97,97]]],[1572788428091,[\"x@x.local\",[[-1,97,\"\\n\"]],[97,97],[96,96]]],[1572788429350,[\"x@x.local\",[[1,96,\"但\"]],[96,96],[97,97]]],[1572788429667,[\"x@x.local\",[[-1,96,\"但\"]],[97,97],[96,96]]],[1572788430102,[\"x@x.local\",[[1,97,\"\\n\"]],[96,96],[97,97]]],[1572788430997,[\"x@x.local\",[[-1,97,\"\\n\"],[1,98,\"但\"]],[97,97],[98,98]]],[1572788432411,[\"x@x.local\",[[-1,97,\"但\"],[1,98,\"\\n\"]],[98,98],[97,97]]],[1572788433322,[\"x@x.local\",[[-1,97,\"\\n\"],[1,98,\"附近\"]],[97,97],[99,99]]],[1572788442489,[\"x@x.local\",[[1,99,\"公园是这片地方\"]],[99,99],[106,106]]],[1572788443167,[\"x@x.local\",[[-1,104,\"地方\"]],[106,106],[104,104]]],[1572788444617,[\"x@x.local\",[[1,104,\"小区\"]],[104,104],[106,106]]],[1572788445207,[\"x@x.local\",[[-1,104,\"小区\"]],[106,106],[104,104]]],[1572788455838,[\"x@x.local\",[[1,104,\"住宅区仅有的一点绿色\"]],[104,104],[114,114]]],[1572788456367,[\"x@x.local\",[[-1,113,\"色\"]],[114,114],[113,113]]],[1572788458015,[\"x@x.local\",[[-1,107,\"仅有的一点绿\"]],[113,113],[107,107]]],[1572788468866,[\"x@x.local\",[[1,107,\"仅有的一点绿色盎然的地瓜粉\"]],[107,107],[120,120]]],[1572788469747,[\"x@x.local\",[[-1,117,\"地瓜粉\"]],[120,120],[117,117]]],[1572788484128,[\"x@x.local\",[[1,117,\"地方。每天早上路过都看见\"]],[117,117],[129,129]]],[1572788484822,[\"x@x.local\",[[-1,128,\"见\"]],[129,129],[128,128]]],[1572788486168,[\"x@x.local\",[[1,128,\"到\"]],[128,128],[129,129]]],[1572788487402,[\"x@x.local\",[[-1,126,\"都看到\"]],[129,129],[126,126]]],[1572788506568,[\"x@x.local\",[[1,126,\"都能看到除了那些锻炼的人，还有为公园\"]],[126,126],[144,144]]],[1572788512002,[\"x@x.local\",[[-1,139,\"还有为公园\"]],[144,144],[139,139]]],[1572788514804,[\"x@x.local\",[[1,139,\"还有那些\"]],[139,139],[143,143]]],[1572788522004,[\"x@x.local\",[[1,143,\"负责照看那些\"]],[143,143],[149,149]]],[1572788523268,[\"x@x.local\",[[-1,147,\"那些\"]],[149,149],[147,147]]],[1572788532976,[\"x@x.local\",[[1,147,\"花花草草的老人家。\"]],[147,147],[156,156]]],[1572788542078,[\"x@x.local\",[[-1,152,\"老人家\"]],[155,155],[152,152]]],[1572788556430,[\"x@x.local\",[[1,152,\"上了年纪的人\"]],[152,152],[158,158]]],[1572788563873,[\"x@x.local\",[[-1,69,\"。\"]],[70,70],[69,69]]],[1572788564174,[\"x@x.local\",[[1,69,\"，\"]],[69,69],[70,70]]],[1572788567443,[\"x@x.local\",[[-1,79,\"热\"]],[80,80],[79,79]]],[1572788576843,[\"x@x.local\",[[1,95,\"偶尔\"]],[95,95],[97,97]]],[1572788577553,[\"x@x.local\",[[-1,95,\"偶尔\"]],[97,97],[95,95]]],[1572788579338,[\"x@x.local\",[[1,96,\"\\n\"]],[95,95],[96,96]]],[1572788583435,[\"x@x.local\",[[1,96,\"如今多了个乐趣，\"]],[96,96],[104,104]]],[1572788584123,[\"x@x.local\",[[-1,101,\"乐趣，\"]],[104,104],[101,101]]],[1572788587826,[\"x@x.local\",[[1,101,\"习惯，因为\"]],[101,101],[106,106]]],[1572788590168,[\"x@x.local\",[[-1,104,\"因为\"]],[106,106],[104,104]]],[1572788595970,[\"x@x.local\",[[1,104,\"因为少了点\"]],[104,104],[109,109]]],[1572788598554,[\"x@x.local\",[[-1,104,\"因为少了点\"]],[109,109],[104,104]]],[1572788601136,[\"x@x.local\",[[1,104,\"散步。\"]],[104,104],[107,107]]],[1572788628673,[\"x@x.local\",[[-1,143,\"那些\"]],[145,145],[143,143]]],[1572788630294,[\"x@x.local\",[[-1,146,\"人\"]],[147,147],[146,146]]],[1572788639908,[\"x@x.local\",[[-1,137,\"都\"]],[138,138],[137,137]]],[1572788643929,[\"x@x.local\",[[-1,140,\"除了\"]],[142,142],[140,140]]],[1572788662632,[\"x@x.local\",[[1,164,\"\\n\\n\"]],[164,164],[165,165]]],[1572788664308,[\"x@x.local\",[[-1,165,\"\\n\"],[1,166,\"偶尔\"]],[165,165],[167,167]]],[1572788665907,[\"x@x.local\",[[1,167,\"又一次，\"]],[167,167],[171,171]]],[1572788667599,[\"x@x.local\",[[-1,167,\"又一次，\"]],[171,171],[167,167]]],[1572788687906,[\"x@x.local\",[[1,167,\"一次，走个捷径，踩到了刚种下的菜皮\"]],[167,167],[184,184]]],[1572788688598,[\"x@x.local\",[[-1,182,\"菜皮\"]],[184,184],[182,182]]],[1572788690612,[\"x@x.local\",[[1,182,\"草皮，\"]],[182,182],[185,185]]],[1572788698769,[\"x@x.local\",[[-1,170,\"走个捷径，\"]],[175,175],[170,170]]],[1572788706490,[\"x@x.local\",[[1,180,\"被大妈隔着老远来\"]],[180,180],[188,188]]],[1572788706854,[\"x@x.local\",[[-1,187,\"来\"]],[188,188],[187,187]]],[1572788710397,[\"x@x.local\",[[1,187,\"说不能走，\"]],[187,187],[192,192]]],[1572788711427,[\"x@x.local\",[[-1,191,\"，\"]],[192,192],[191,191]]],[1572788714514,[\"x@x.local\",[[1,191,\"这边。其实\"]],[191,191],[196,196]]],[1572788715059,[\"x@x.local\",[[-1,194,\"其实\"]],[196,196],[194,194]]],[1572788723523,[\"x@x.local\",[[1,194,\"老脸一红的我，\"]],[194,194],[201,201]]],[1572788730524,[\"x@x.local\",[[-1,192,\"边。老脸一红的我，\"]],[201,201],[192,192]]],[1572788733316,[\"x@x.local\",[[1,192,\"边。\"]],[192,192],[194,194]]],[1572788746605,[\"x@x.local\",[[-1,95,\"\\n\"]],[96,96],[95,95]]],[1572788750174,[\"x@x.local\",[[-1,102,\"，\"]],[103,103],[102,102]]],[1572788752038,[\"x@x.local\",[[1,102,\"-- \"]],[102,102],[105,105]]],[1572788753218,[\"x@x.local\",[[-1,104,\" \"]],[105,105],[104,104]]],[1572788763779,[\"x@x.local\",[[-1,125,\"盎然\"]],[127,127],[125,125]]],[1572788765534,[\"x@x.local\",[[-1,125,\"的地方\"]],[128,128],[125,125]]],[1572788767650,[\"x@x.local\",[[-1,121,\"一点\"]],[123,123],[121,121]]],[1572788769672,[\"x@x.local\",[[1,121,\"一大片\"]],[121,121],[124,124]]],[1572788773524,[\"x@x.local\",[[1,110,\"的\"]],[110,110],[111,111]]],[1572788788811,[\"x@x.local\",[[1,134,\"都\"]],[134,134],[135,135]]],[1572788816040,[\"x@x.local\",[[-1,169,\"到了\"]],[171,171],[169,169]]],[1572788817373,[\"x@x.local\",[[1,169,\"上\"]],[169,169],[170,170]]],[1572788830165,[\"x@x.local\",[[1,177,\"没走几步\"]],[177,177],[181,181]]],[1572788835975,[\"x@x.local\",[[1,195,\"\\n\\n\"]],[195,195],[196,196]]],[1572788843695,[\"x@x.local\",[[-1,196,\"\\n\"],[1,197,\"先天\"]],[196,196],[198,198]]],[1572788844600,[\"x@x.local\",[[-1,197,\"天\"]],[198,198],[197,197]]],[1572788844750,[\"x@x.local\",[[-1,196,\"先\"],[1,197,\"\\n\"]],[197,197],[196,196]]],[1572788846275,[\"x@x.local\",[[-1,196,\"\\n\"],[1,197,\"去年\"]],[196,196],[198,198]]],[1572788847797,[\"x@x.local\",[[1,198,\"的时候，\"]],[198,198],[202,202]]],[1572788850075,[\"x@x.local\",[[-1,197,\"年的时候，\"]],[202,202],[197,197]]],[1572788850255,[\"x@x.local\",[[-1,196,\"去\"],[1,197,\"\\n\"]],[197,197],[196,196]]],[1572788851170,[\"x@x.local\",[[-1,196,\"\\n\"],[1,197,\"大概\"]],[196,196],[198,198]]],[1572788868434,[\"x@x.local\",[[1,198,\"从去年10月开始的规律锻炼，一开始也是\"]],[198,198],[217,217]]],[1572788870655,[\"x@x.local\",[[-1,211,\"，一开始也是\"]],[217,217],[211,211]]],[1572788871122,[\"x@x.local\",[[1,211,\"。\"]],[211,211],[212,212]]],[1572788872351,[\"x@x.local\",[[1,212,\"\\n\\n\"]],[212,212],[213,213]]],[1572788874267,[\"x@x.local\",[[-1,213,\"\\n\"],[1,214,\"唯一\"]],[213,213],[215,215]]],[1572788875065,[\"x@x.local\",[[-1,214,\"一\"]],[215,215],[214,214]]],[1572788875275,[\"x@x.local\",[[-1,213,\"唯\"],[1,214,\"\\n\"]],[214,214],[213,213]]],[1572788900367,[\"x@x.local\",[[-1,213,\"\\n\"],[1,214,\"总有一种\"]],[213,213],[217,217]]],[1572788902607,[\"x@x.local\",[[-1,214,\"有一种\"]],[217,217],[214,214]]],[1572788902754,[\"x@x.local\",[[-1,213,\"总\"],[1,214,\"\\n\"]],[214,214],[213,213]]],[1572788905818,[\"x@x.local\",[[-1,213,\"\\n\"],[1,214,\"「\"]],[213,213],[214,214]]],[1572788906389,[\"x@x.local\",[[1,214,\"」\"]],[214,214],[215,215]]],[1572788916723,[\"x@x.local\",[[1,214,\"身体和思想，总有一个要在路上。\"]],[214,214],[229,229]]],[1572788959532,[\"x@x.local\",[[-1,213,\"「身体和思想，总有一个要在路上。」\"],[1,230,\"\\n\"]],[213,230],[213,213]]],[1572788969938,[\"x@x.local\",[[-1,213,\"\\n\"],[1,214,\"去年\"]],[213,213],[215,215]]],[1572788993176,[\"x@x.local\",[[1,215,\"7月整整一个月，晚上就靠游戏度日。手游\"]],[215,215],[234,234]]],[1572788994272,[\"x@x.local\",[[-1,231,\"。手游\"]],[234,234],[231,231]]],[1572788997583,[\"x@x.local\",[[1,231,\"，唯一靠\"]],[231,231],[235,235]]],[1572788999206,[\"x@x.local\",[[-1,232,\"唯一靠\"]],[235,235],[232,232]]],[1572789002547,[\"x@x.local\",[[1,232,\"唯一\"]],[232,232],[234,234]]],[1572789003151,[\"x@x.local\",[[-1,232,\"唯一\"]],[234,234],[232,232]]],[1572789009886,[\"x@x.local\",[[1,232,\"当然\"]],[232,232],[234,234]]],[1572789011057,[\"x@x.local\",[[-1,232,\"当然\"]],[234,234],[232,232]]],[1572789019139,[\"x@x.local\",[[1,232,\"当然是一款\"]],[232,232],[237,237]]],[1572789022683,[\"x@x.local\",[[-1,232,\"当然是一款\"]],[237,237],[232,232]]],[1572789025605,[\"x@x.local\",[[1,232,\"我\"]],[232,232],[233,233]]],[1572789025983,[\"x@x.local\",[[-1,232,\"我\"]],[233,233],[232,232]]],[1572789032892,[\"x@x.local\",[[1,232,\"ARPG的少女\"]],[232,232],[239,239]]],[1572789035344,[\"x@x.local\",[[-1,236,\"的少女\"]],[239,239],[236,236]]],[1572789038503,[\"x@x.local\",[[1,236,\"游戏第一次\"]],[236,236],[241,241]]],[1572789039274,[\"x@x.local\",[[-1,238,\"第一次\"]],[241,241],[238,238]]],[1572789040026,[\"x@x.local\",[[1,238,\"。\"]],[238,238],[239,239]]],[1572789104042,[\"x@x.local\",[[1,238,\"--尼尔机械纪元\"]],[238,238],[246,246]]],[1572789111891,[\"x@x.local\",[[1,247,\"\\n\\n\"]],[247,247],[248,248]]],[1572789131673,[\"x@x.local\",[[-1,248,\"\\n\"],[1,249,\"大概\"]],[248,248],[250,250]]],[1572789132375,[\"x@x.local\",[[1,250,\"从\"]],[250,250],[251,251]]],[1572789134690,[\"x@x.local\",[[-1,249,\"概从\"]],[251,251],[249,249]]],[1572789134855,[\"x@x.local\",[[-1,248,\"大\"],[1,249,\"\\n\"]],[249,249],[248,248]]],[1572789137497,[\"x@x.local\",[[-1,248,\"\\n\"],[1,249,\"8\"]],[248,248],[249,249]]],[1572789147123,[\"x@x.local\",[[1,249,\"月9月晚上根本不值得\"]],[249,249],[259,259]]],[1572789148730,[\"x@x.local\",[[-1,252,\"晚上根本不值得\"]],[259,259],[252,252]]],[1572789159531,[\"x@x.local\",[[-1,225,\"就\"]],[226,226],[225,225]]],[1572789167513,[\"x@x.local\",[[1,251,\"已经毫无记忆。\"]],[251,251],[258,258]]],[1572789168831,[\"x@x.local\",[[-1,257,\"。\"]],[258,258],[257,257]]],[1572789170881,[\"x@x.local\",[[1,257,\"--验证\"]],[257,257],[261,261]]],[1572789171515,[\"x@x.local\",[[-1,259,\"验证\"]],[261,261],[259,259]]],[1572789175313,[\"x@x.local\",[[1,259,\"严重睡眠不足。\"]],[259,259],[266,266]]],[1572789176016,[\"x@x.local\",[[1,266,\"\\n\\n\"]],[266,266],[267,267]]],[1572789178582,[\"x@x.local\",[[-1,267,\"\\n\"],[1,268,\"1\"]],[267,267],[268,268]]],[1572789178718,[\"x@x.local\",[[1,268,\"0\"]],[268,268],[269,269]]],[1572789183562,[\"x@x.local\",[[1,269,\"月15号开始，\"]],[269,269],[276,276]]],[1572789186830,[\"x@x.local\",[[-1,271,\"5号开始，\"]],[276,276],[271,271]]],[1572789194326,[\"x@x.local\",[[1,271,\"4号开始，恢复之前的锻炼\"]],[271,271],[283,283]]],[1572789195350,[\"x@x.local\",[[-1,281,\"锻炼\"]],[283,283],[281,281]]],[1572789197902,[\"x@x.local\",[[1,281,\"锻炼，\"]],[281,281],[284,284]]],[1572789202611,[\"x@x.local\",[[-1,268,\"0月14号开始，恢复之前的锻炼，\"]],[284,284],[268,268]]],[1572789203211,[\"x@x.local\",[[-1,267,\"1\"],[1,268,\"\\n\"]],[268,268],[267,267]]],[1572789203797,[\"x@x.local\",[[-1,267,\"\\n\"],[1,268,\"1\"]],[267,267],[268,268]]],[1572789207789,[\"x@x.local\",[[1,268,\"0月以后到现在，\"]],[268,268],[276,276]]],[1572789214746,[\"x@x.local\",[[-1,268,\"0月以后到现在，\"]],[276,276],[268,268]]],[1572789215285,[\"x@x.local\",[[-1,267,\"1\"],[1,268,\"\\n\"]],[268,268],[267,267]]],[1572789215810,[\"x@x.local\",[[-1,267,\"\\n\"],[1,268,\"1\"]],[267,267],[268,268]]],[1572789219278,[\"x@x.local\",[[1,268,\"0月以后到现在，\"]],[268,268],[276,276]]],[1572789222531,[\"x@x.local\",[[-1,268,\"0月以后到现在，\"]],[276,276],[268,268]]],[1572789223086,[\"x@x.local\",[[-1,267,\"1\"],[1,268,\"\\n\"]],[268,268],[267,267]]],[1572789234706,[\"x@x.local\",[[-1,267,\"\\n\"],[1,268,\"中间\"]],[267,267],[269,269]]],[1572789237772,[\"x@x.local\",[[1,269,\"穿插一些\"]],[269,269],[273,273]]],[1572789242237,[\"x@x.local\",[[1,273,\"零碎的争吵\"]],[273,273],[278,278]]],[1572789244176,[\"x@x.local\",[[-1,276,\"争吵\"]],[278,278],[276,276]]],[1572789256802,[\"x@x.local\",[[1,276,\"责骂，因为让人伤心让人觉得\"]],[276,276],[289,289]]],[1572789258711,[\"x@x.local\",[[-1,281,\"让人伤心让人觉得\"]],[289,289],[281,281]]],[1572789269852,[\"x@x.local\",[[1,281,\"某些状态在父母看来十足的不\"]],[281,281],[294,294]]],[1572789272767,[\"x@x.local\",[[-1,290,\"十足的不\"]],[294,294],[290,290]]],[1572789275898,[\"x@x.local\",[[1,290,\"是很通信\"]],[290,290],[294,294]]],[1572789276621,[\"x@x.local\",[[-1,292,\"通信\"]],[294,294],[292,292]]],[1572789278705,[\"x@x.local\",[[1,292,\"童心\"]],[292,292],[294,294]]],[1572789279232,[\"x@x.local\",[[-1,292,\"童心\"]],[294,294],[292,292]]],[1572789283120,[\"x@x.local\",[[1,292,\"痛心的。\"]],[292,292],[296,296]]],[1572789288501,[\"x@x.local\",[[1,296,\"\\n\\n\"]],[296,296],[297,297]]],[1572789296027,[\"x@x.local\",[[-1,297,\"\\n\"],[1,298,\"我第一次\"]],[297,297],[301,301]]],[1572789296721,[\"x@x.local\",[[-1,298,\"第一次\"]],[301,301],[298,298]]],[1572789296872,[\"x@x.local\",[[-1,297,\"我\"],[1,298,\"\\n\"]],[298,298],[297,297]]],[1572789306486,[\"x@x.local\",[[-1,297,\"\\n\"],[1,298,\"因为\"]],[297,297],[299,299]]],[1572789306860,[\"x@x.local\",[[1,299,\"我\"]],[299,299],[300,300]]],[1572789307657,[\"x@x.local\",[[-1,299,\"我\"]],[300,300],[299,299]]],[1572789317942,[\"x@x.local\",[[1,299,\"我拒绝帮助拒绝讨论拒绝\"]],[299,299],[310,310]]],[1572789321652,[\"x@x.local\",[[-1,306,\"讨论拒绝\"]],[310,310],[306,306]]],[1572789323994,[\"x@x.local\",[[1,306,\"交流。\"]],[306,306],[309,309]]],[1572789335227,[\"x@x.local\",[[1,309,\"\\n\\n\"]],[309,309],[310,310]]],[1572789338030,[\"x@x.local\",[[-1,310,\"\\n\"],[1,311,\"很多\"]],[310,310],[312,312]]],[1572789346716,[\"x@x.local\",[[1,312,\"负面情绪一直需要一些人\"]],[312,312],[323,323]]],[1572789347586,[\"x@x.local\",[[-1,320,\"一些人\"]],[323,323],[320,320]]],[1572789361177,[\"x@x.local\",[[-1,77,\"很\"]],[78,78],[77,77]]],[1572789364788,[\"x@x.local\",[[1,78,\"得很\"]],[78,78],[80,80]]],[1572789374167,[\"x@x.local\",[[-1,98,\"多了个习惯--\"]],[105,105],[98,98]]],[1572789375603,[\"x@x.local\",[[1,98,\"却\"]],[98,98],[99,99]]],[1572789375877,[\"x@x.local\",[[-1,98,\"却\"]],[99,99],[98,98]]],[1572789383451,[\"x@x.local\",[[1,98,\"喜欢去\"]],[98,98],[101,101]]],[1572789394102,[\"x@x.local\",[[-1,108,\"公\"]],[109,109],[108,108]]],[1572789396605,[\"x@x.local\",[[1,109,\"子\"]],[109,109],[110,110]]],[1572789422283,[\"x@x.local\",[[1,179,\"个\"]],[179,179],[180,180]]],[1572789422888,[\"x@x.local\",[[-1,179,\"个\"]],[180,180],[179,179]]],[1572789430283,[\"x@x.local\",[[1,193,\"\\n\"]],[192,192],[193,193]]],[1572789441485,[\"x@x.local\",[[1,193,\"如今，也是落叶纷飞\"]],[193,193],[202,202]]],[1572789442058,[\"x@x.local\",[[-1,200,\"纷飞\"]],[202,202],[200,200]]],[1572789443108,[\"x@x.local\",[[1,200,\"、\"]],[200,200],[201,201]]],[1572789448508,[\"x@x.local\",[[-1,198,\"落叶、\"]],[201,201],[198,198]]],[1572789456371,[\"x@x.local\",[[1,198,\"叶落满地，金黄色，\"]],[198,198],[207,207]]],[1572789457373,[\"x@x.local\",[[-1,206,\"，\"]],[207,207],[206,206]]],[1572789459280,[\"x@x.local\",[[1,206,\"，\"]],[206,206],[207,207]]],[1572789459953,[\"x@x.local\",[[-1,206,\"，\"]],[207,207],[206,206]]],[1572789478582,[\"x@x.local\",[[1,206,\"扎在还算绿的草地上，风一吹\"]],[206,206],[219,219]]],[1572789481886,[\"x@x.local\",[[1,219,\"很好看。\"]],[219,219],[223,223]]],[1572789493778,[\"x@x.local\",[[-1,193,\"如今，也\"]],[197,197],[193,193]]],[1572789502700,[\"x@x.local\",[[1,193,\"这时节\"]],[193,193],[196,196]]],[1572789505209,[\"x@x.local\",[[-1,196,\"是\"]],[197,197],[196,196]]],[1572789505537,[\"x@x.local\",[[1,196,\"，。\"]],[196,196],[198,198]]],[1572789506244,[\"x@x.local\",[[-1,196,\"，。\"]],[198,198],[196,196]]],[1572789507324,[\"x@x.local\",[[1,196,\"，\"]],[196,196],[197,197]]],[1572789513609,[\"x@x.local\",[[-1,205,\"扎在\"]],[207,207],[205,205]]],[1572789521167,[\"x@x.local\",[[1,205,\"埋在\"]],[205,205],[207,207]]],[1572789538870,[\"x@x.local\",[[1,223,\"\\n\"]],[222,222],[223,223]]],[1572789548275,[\"x@x.local\",[[1,223,\"8\"]],[223,223],[224,224]]],[1572789549129,[\"x@x.local\",[[-1,223,\"8\"]],[224,224],[223,223]]],[1572789565311,[\"x@x.local\",[[1,223,\"10月下的雨不多，原子\"]],[223,223],[234,234]]],[1572789565809,[\"x@x.local\",[[-1,232,\"原子\"]],[234,234],[232,232]]],[1572789576065,[\"x@x.local\",[[1,232,\"园子里的人工湖也开始\"]],[232,232],[242,242]]],[1572789577014,[\"x@x.local\",[[-1,239,\"也开始\"]],[242,242],[239,239]]],[1572789591566,[\"x@x.local\",[[1,239,\"为了周围的那片绿，也被抽干了一些地方，\"]],[239,239],[258,258]]],[1572789597084,[\"x@x.local\",[[-1,257,\"，\"]],[258,258],[257,257]]],[1572789598377,[\"x@x.local\",[[1,257,\"。\"]],[257,257],[258,258]]],[1572789609353,[\"x@x.local\",[[-1,239,\"为了周围的那片绿\"]],[247,247],[239,239]]],[1572789618672,[\"x@x.local\",[[1,239,\"被拿来灌溉周围 \"]],[239,239],[247,247]]],[1572789619359,[\"x@x.local\",[[-1,246,\" \"]],[247,247],[246,246]]],[1572789619988,[\"x@x.local\",[[1,246,\"的\"]],[246,246],[247,247]]],[1572789620649,[\"x@x.local\",[[-1,246,\"的\"]],[247,247],[246,246]]],[1572789624578,[\"x@x.local\",[[1,246,\"的植被了\"]],[246,246],[250,250]]],[1572789627189,[\"x@x.local\",[[-1,251,\"也\"]],[252,252],[251,251]]],[1572789648895,[\"x@x.local\",[[-1,96,\"如今喜欢去散步。\"]],[103,103],[95,95]]],[1572789654005,[\"x@x.local\",[[1,96,\"如今加个\"]],[96,96],[100,100]]],[1572789656080,[\"x@x.local\",[[-1,98,\"加个\"]],[100,100],[98,98]]],[1572789659002,[\"x@x.local\",[[1,98,\"加了个\"]],[98,98],[101,101]]],[1572789662577,[\"x@x.local\",[[1,101,\"习惯=\"]],[101,101],[104,104]]],[1572789663234,[\"x@x.local\",[[-1,103,\"=\"]],[104,104],[103,103]]],[1572789666178,[\"x@x.local\",[[1,103,\"，散步。\"]],[103,103],[107,107]]],[1572789714716,[\"x@x.local\",[[-1,91,\"很\"]],[92,92],[91,91]]],[1572789717651,[\"x@x.local\",[[1,91,\"极少\"]],[91,91],[93,93]]],[1572789717970,[\"x@x.local\",[[-1,93,\"少\"]],[93,93],[92,92]]],[1572789728456,[\"x@x.local\",[[-1,96,\"如今加了个习惯，散步。\"]],[107,107],[96,96]]],[1572789732921,[\"x@x.local\",[[1,96,\"因为实在找不到\"]],[96,96],[103,103]]],[1572789734680,[\"x@x.local\",[[-1,96,\"因为实在找不到\"]],[103,103],[96,96]]],[1572789753298,[\"x@x.local\",[[1,96,\"偶尔觉得这样太烦，会散散步 。\"]],[96,96],[111,111]]],[1572789754016,[\"x@x.local\",[[-1,109,\" 。\"]],[111,111],[109,109]]],[1572789754903,[\"x@x.local\",[[1,109,\"。\"]],[109,109],[110,110]]],[1572789765686,[\"x@x.local\",[[-1,129,\"色\"]],[130,130],[129,129]]],[1572789769016,[\"x@x.local\",[[1,130,\"\\n\"]],[130,130],[131,131]]],[1572789791887,[\"x@x.local\",[[1,199,\"现在\"]],[199,199],[201,201]]],[1572789810728,[\"x@x.local\",[[1,210,\"数量极多的\"]],[210,210],[215,215]]],[1572789817238,[\"x@x.local\",[[1,218,\"银杏叶\"]],[218,218],[221,221]]],[1572789823346,[\"x@x.local\",[[-1,209,\"，\"]],[210,210],[209,209]]],[1572789823708,[\"x@x.local\",[[1,209,\"。\"]],[209,209],[210,210]]],[1572789823991,[\"x@x.local\",[[1,210,\"\\n\"]],[210,210],[211,211]]],[1572789826091,[\"x@x.local\",[[1,240,\"\\n\"]],[239,239],[240,240]]],[1572789837475,[\"x@x.local\",[[1,240,\"微微泛红的梧桐\"]],[240,240],[247,247]]],[1572789852997,[\"x@x.local\",[[1,247,\"叶也掉落的周围\"]],[247,247],[254,254]]],[1572789853901,[\"x@x.local\",[[-1,252,\"周围\"]],[254,254],[252,252]]],[1572789869486,[\"x@x.local\",[[-1,240,\"微微泛红\"]],[244,244],[240,240]]],[1572789871888,[\"x@x.local\",[[1,240,\"就\"]],[240,240],[241,241]]],[1572789872607,[\"x@x.local\",[[-1,240,\"就\"]],[241,241],[240,240]]],[1572789875948,[\"x@x.local\",[[1,240,\"那么即可\"]],[240,240],[244,244]]],[1572789876852,[\"x@x.local\",[[-1,242,\"即可\"]],[244,244],[242,242]]],[1572789878996,[\"x@x.local\",[[1,242,\"几颗\"]],[242,242],[244,244]]],[1572789880107,[\"x@x.local\",[[-1,244,\"的\"]],[245,245],[244,244]]],[1572789885027,[\"x@x.local\",[[-1,246,\"叶也\"]],[247,247],[246,246]]],[1572789889707,[\"x@x.local\",[[-1,240,\"那么\"]],[242,242],[240,240]]],[1572789890888,[\"x@x.local\",[[1,240,\"有\"]],[240,240],[241,241]]],[1572789897803,[\"x@x.local\",[[1,248,\"了\"]],[248,248],[249,249]]],[1572789900946,[\"x@x.local\",[[1,249,\"叶后，\"]],[249,249],[252,252]]],[1572789901709,[\"x@x.local\",[[-1,251,\"，\"]],[252,252],[251,251]]],[1572789902580,[\"x@x.local\",[[1,251,\"，\"]],[251,251],[252,252]]],[1572789906239,[\"x@x.local\",[[-1,245,\"掉落的了叶后，\"]],[252,252],[245,245]]],[1572789907493,[\"x@x.local\",[[1,245,\"也\"]],[245,245],[246,246]]],[1572789908143,[\"x@x.local\",[[-1,245,\"也\"]],[246,246],[245,245]]],[1572789909707,[\"x@x.local\",[[1,245,\"也边\"]],[245,245],[247,247]]],[1572789910062,[\"x@x.local\",[[-1,246,\"边\"]],[247,247],[246,246]]],[1572789913043,[\"x@x.local\",[[1,246,\"变的光如如\"]],[246,246],[251,251]]],[1572789913692,[\"x@x.local\",[[-1,249,\"如如\"]],[251,251],[249,249]]],[1572789920876,[\"x@x.local\",[[1,249,\"突突的，。\"]],[249,249],[254,254]]],[1572789921762,[\"x@x.local\",[[-1,252,\"，。\"]],[254,254],[252,252]]],[1572789922021,[\"x@x.local\",[[1,252,\"。\"]],[252,252],[253,253]]],[1572789928299,[\"x@x.local\",[[1,245,\"树\"]],[245,245],[246,246]]],[1572789947925,[\"x@x.local\",[[-1,105,\"会\"]],[106,106],[105,105]]],[1572789949137,[\"x@x.local\",[[1,105,\"就去\"]],[105,105],[107,107]]],[1572789959395,[\"x@x.local\",[[1,110,\"，逛到附近商场\"]],[110,110],[117,117]]],[1572789963297,[\"x@x.local\",[[1,117,\"买点\"]],[117,117],[119,119]]],[1572789965668,[\"x@x.local\",[[-1,118,\"点\"]],[119,119],[118,118]]],[1572789972038,[\"x@x.local\",[[1,118,\"罐啤酒就\"]],[118,118],[122,122]]],[1572789975448,[\"x@x.local\",[[-1,121,\"就\"]],[122,122],[121,121]]],[1572789978789,[\"x@x.local\",[[1,121,\"边走边喝\"]],[121,121],[125,125]]],[1572789982063,[\"x@x.local\",[[1,96,\"\\n\"]],[96,96],[97,97]]],[1572790019068,[\"x@x.local\",[[-1,189,\"上\"]],[190,190],[189,189]]],[1572790020552,[\"x@x.local\",[[1,189,\"到\"]],[189,189],[190,190]]],[1572790046969,[\"x@x.local\",[[-1,228,\"数量极多的\"]],[233,233],[228,228]]],[1572790058713,[\"x@x.local\",[[-1,252,\"有\"]],[253,253],[252,252]]],[1572790062404,[\"x@x.local\",[[-1,256,\"树\"]],[257,257],[256,256]]],[1572790076863,[\"x@x.local\",[[1,264,\"周围的碎叶是被扫把\"]],[264,264],[273,273]]],[1572790081286,[\"x@x.local\",[[1,273,\"骚起来\"]],[273,273],[276,276]]],[1572790085534,[\"x@x.local\",[[-1,269,\"是被扫把骚起来\"]],[276,276],[269,269]]],[1572790089460,[\"x@x.local\",[[1,269,\"被扫把\"]],[269,269],[272,272]]],[1572790090259,[\"x@x.local\",[[-1,270,\"扫把\"]],[272,272],[270,270]]],[1572790098256,[\"x@x.local\",[[1,270,\"大扫把扫了起来。\"]],[270,270],[278,278]]],[1572790100924,[\"x@x.local\",[[-1,274,\"了起来。\"]],[278,278],[274,274]]],[1572790105471,[\"x@x.local\",[[1,274,\"起堆在了一起。\"]],[274,274],[281,281]]],[1572790114258,[\"x@x.local\",[[1,282,\"\\n\"]],[281,281],[282,282]]],[1572790131618,[\"x@x.local\",[[1,282,\"就怕哪个人随手丢个烟头，这就烧起来了。\"]],[282,282],[301,301]]],[1572790134075,[\"x@x.local\",[[-1,293,\"，这就烧起来了。\"]],[301,301],[293,293]]],[1572790134437,[\"x@x.local\",[[1,293,\"。\"]],[293,293],[294,294]]],[1572790143644,[\"x@x.local\",[[1,333,\"\\n\"]],[332,332],[333,333]]],[1572790154096,[\"x@x.local\",[[1,298,\"印象里\"]],[298,298],[301,301]]],[1572790158060,[\"x@x.local\",[[-1,309,\"里\"]],[310,310],[309,309]]],[1572790166894,[\"x@x.local\",[[-1,324,\"，被抽干了一些地方。\"]],[334,334],[324,324]]],[1572790168291,[\"x@x.local\",[[1,324,\"。\"]],[324,324],[325,325]]],[1572790174620,[\"x@x.local\",[[-1,323,\"了\"]],[324,324],[323,323]]],[1572790193891,[\"x@x.local\",[[1,325,\"偶见湖底的烂泥地\"]],[325,325],[333,333]]],[1572790194330,[\"x@x.local\",[[-1,332,\"地\"]],[333,333],[332,332]]],[1572790198827,[\"x@x.local\",[[1,332,\"里不少小时候\"]],[332,332],[338,338]]],[1572790200926,[\"x@x.local\",[[1,338,\"见\"]],[338,338],[339,339]]],[1572790201275,[\"x@x.local\",[[-1,338,\"见\"]],[339,339],[338,338]]],[1572790212014,[\"x@x.local\",[[1,338,\"的贝类和\"]],[338,338],[342,342]]],[1572790214775,[\"x@x.local\",[[-1,341,\"和\"]],[342,342],[341,341]]],[1572790215677,[\"x@x.local\",[[1,341,\"、\"]],[341,341],[342,342]]],[1572790217400,[\"x@x.local\",[[-1,341,\"、\"]],[342,342],[341,341]]],[1572790218963,[\"x@x.local\",[[1,341,\"。\"]],[341,341],[342,342]]],[1572790219605,[\"x@x.local\",[[-1,341,\"。\"]],[342,342],[341,341]]],[1572790220312,[\"x@x.local\",[[1,341,\"，\"]],[341,341],[342,342]]],[1572790223115,[\"x@x.local\",[[-1,341,\"，\"]],[342,342],[341,341]]],[1572790223448,[\"x@x.local\",[[1,341,\"。\"]],[341,341],[342,342]]],[1572790224210,[\"x@x.local\",[[-1,341,\"。\"]],[342,342],[341,341]]],[1572790227718,[\"x@x.local\",[[1,341,\"，似乎还有\"]],[341,341],[346,346]]],[1572790228740,[\"x@x.local\",[[-1,342,\"似乎还有\"]],[346,346],[342,342]]],[1572790241427,[\"x@x.local\",[[1,342,\"有人会围着这下降了水位的糊\"]],[342,342],[355,355]]],[1572790241865,[\"x@x.local\",[[-1,354,\"糊\"]],[355,355],[354,354]]],[1572790258691,[\"x@x.local\",[[1,354,\"湖周围下几个套，或者拿着杆子\"]],[354,354],[368,368]]],[1572790263177,[\"x@x.local\",[[1,368,\"吊\"]],[368,368],[369,369]]],[1572790265071,[\"x@x.local\",[[-1,368,\"吊\"]],[369,369],[368,368]]],[1572790266568,[\"x@x.local\",[[1,368,\"钓鱼\"]],[368,368],[370,370]]],[1572790266841,[\"x@x.local\",[[-1,369,\"鱼\"]],[370,370],[369,369]]],[1572790270893,[\"x@x.local\",[[1,369,\"点什么上来。\"]],[369,369],[375,375]]],[1572790284582,[\"x@x.local\",[[1,342,\"也\"]],[342,342],[343,343]]],[1572790308450,[\"x@x.local\",[[-1,164,\"那些\"]],[166,166],[164,164]]],[1572790329751,[\"x@x.local\",[[-1,226,\"金黄色\"]],[229,229],[226,226]]],[1572790340115,[\"x@x.local\",[[-1,245,\"。\"]],[246,246],[245,245]]],[1572790345796,[\"x@x.local\",[[1,245,\"，包括随风\"]],[245,245],[250,250]]],[1572790347722,[\"x@x.local\",[[-1,245,\"，包括随风\"]],[250,250],[245,245]]],[1572790348037,[\"x@x.local\",[[1,245,\"。\"]],[245,245],[246,246]]],[1572790362162,[\"x@x.local\",[[1,254,\"略微\"]],[254,254],[256,256]]],[1572790368602,[\"x@x.local\",[[-1,270,\"扫起\"]],[272,272],[270,270]]],[1572790376937,[\"x@x.local\",[[1,266,\"则\"]],[266,266],[267,267]]],[1572790403659,[\"x@x.local\",[[1,320,\"抽干了一些地方。\"]],[320,320],[328,328]]],[1572790420547,[\"x@x.local\",[[-1,352,\"这下降了\"]],[356,356],[352,352]]],[1572790423470,[\"x@x.local\",[[1,354,\"低\"]],[354,354],[355,355]]],[1572790424070,[\"x@x.local\",[[1,356,\"的\"]],[355,355],[356,356]]],[1572790424492,[\"x@x.local\",[[-1,356,\"的\"]],[356,356],[355,355]]],[1572790426905,[\"x@x.local\",[[1,356,\"地方\"]],[356,356],[358,358]]],[1572790428527,[\"x@x.local\",[[-1,358,\"湖\"]],[359,359],[358,358]]],[1572790429937,[\"x@x.local\",[[-1,358,\"周围\"]],[360,360],[358,358]]],[1572790445942,[\"x@x.local\",[[1,377,\"\\n\"]],[377,377],[378,378]]],[1572790449092,[\"x@x.local\",[[1,378,\"\\n\"]],[376,376],[377,377]]],[1572790453890,[\"x@x.local\",[[1,377,\"总之除了\"]],[377,377],[381,381]]],[1572790456907,[\"x@x.local\",[[-1,379,\"除了\"]],[381,381],[379,379]]],[1572790458944,[\"x@x.local\",[[1,379,\"这部大\"]],[379,379],[382,382]]],[1572790459457,[\"x@x.local\",[[-1,380,\"部大\"]],[382,382],[380,380]]],[1572790465141,[\"x@x.local\",[[1,380,\"不大的地方，总有\"]],[380,380],[388,388]]],[1572790465848,[\"x@x.local\",[[-1,386,\"总有\"]],[388,388],[386,386]]],[1572790471005,[\"x@x.local\",[[1,386,\"一些现实的\"]],[386,386],[391,391]]],[1572790474473,[\"x@x.local\",[[-1,377,\"总之这不大的地方，一些现实的\"]],[391,391],[377,377]]],[1572790487564,[\"x@x.local\",[[1,377,\"夜里这里也热闹，广超无\"]],[377,377],[388,388]]],[1572790488302,[\"x@x.local\",[[-1,385,\"广超无\"]],[388,388],[385,385]]],[1572790496248,[\"x@x.local\",[[1,385,\"广场舞共有四个地方官\"]],[385,385],[395,395]]],[1572790496598,[\"x@x.local\",[[-1,394,\"官\"]],[395,395],[394,394]]],[1572790497200,[\"x@x.local\",[[1,394,\"，\"]],[394,394],[395,395]]],[1572790507379,[\"x@x.local\",[[1,395,\"按上路灯后的\"]],[395,395],[401,401]]],[1572790508058,[\"x@x.local\",[[-1,400,\"的\"]],[401,401],[400,400]]],[1572790514837,[\"x@x.local\",[[1,400,\"，晚上出来的人更多了\"]],[400,400],[410,410]]],[1572790516428,[\"x@x.local\",[[-1,407,\"更多了\"]],[410,410],[407,407]]],[1572790518771,[\"x@x.local\",[[1,407,\"多了起来。\"]],[407,407],[412,412]]],[1572790526403,[\"x@x.local\",[[-1,381,\"也\"]],[382,382],[381,381]]],[1572790532043,[\"x@x.local\",[[-1,394,\"按\"]],[395,395],[394,394]]],[1572790533179,[\"x@x.local\",[[1,394,\"安\"]],[394,394],[395,395]]],[1572790536840,[\"x@x.local\",[[1,394,\"路边\"]],[394,394],[396,396]]],[1572790539273,[\"x@x.local\",[[-1,396,\"安上\"]],[398,398],[396,396]]],[1572790543874,[\"x@x.local\",[[1,396,\"立起\"]],[396,396],[398,398]]],[1572790547570,[\"x@x.local\",[[1,415,\"\\n\"]],[413,413],[414,414]]],[1572790579262,[\"x@x.local\",[[1,414,\"夜跑的额人\"]],[414,414],[419,419]]],[1572790579683,[\"x@x.local\",[[-1,417,\"额人\"]],[419,419],[417,417]]],[1572790591743,[\"x@x.local\",[[1,417,\"人，就喜欢从人多的地方钻，大概是因为你看\"]],[417,417],[437,437]]],[1572790592208,[\"x@x.local\",[[-1,435,\"你看\"]],[437,437],[435,435]]],[1572790593262,[\"x@x.local\",[[1,435,\"「」\"]],[435,435],[437,437]]],[1572790599090,[\"x@x.local\",[[1,436,\"你快看快看我\"]],[436,436],[442,442]]],[1572790599454,[\"x@x.local\",[[-1,441,\"我\"]],[442,442],[441,441]]],[1572790613370,[\"x@x.local\",[[1,441,\"，我从你身边跑过去了耶\"]],[441,441],[452,452]]],[1572790617059,[\"x@x.local\",[[1,453,\"的\"]],[453,453],[454,454]]],[1572790624656,[\"x@x.local\",[[1,454,\"天真想法在作祟。\"]],[454,454],[462,462]]],[1572790625449,[\"x@x.local\",[[-1,461,\"。\"]],[462,462],[461,461]]],[1572790625722,[\"x@x.local\",[[1,461,\"，\"]],[461,461],[462,462]]],[1572790637940,[\"x@x.local\",[[1,439,\"你\"]],[439,439],[440,440]]],[1572790645875,[\"x@x.local\",[[1,463,\"原因\"]],[463,463],[465,465]]],[1572790646389,[\"x@x.local\",[[-1,463,\"原因\"]],[465,465],[463,463]]],[1572790654643,[\"x@x.local\",[[1,463,\"为什么我知道，因为我也夜跑。\"]],[463,463],[477,477]]],[1572790660475,[\"x@x.local\",[[1,479,\"\\n\"]],[477,477],[478,478]]],[1572790667399,[\"x@x.local\",[[1,478,\"这么晚了也看不清脸\"]],[478,478],[487,487]]],[1572790667944,[\"x@x.local\",[[-1,486,\"脸\"]],[487,487],[486,486]]],[1572790674382,[\"x@x.local\",[[1,486,\"对面人的脸，\"]],[486,486],[492,492]]],[1572790696294,[\"x@x.local\",[[1,492,\"这么个轮廓，你以为是好看的人，其实支部书记\"]],[492,492],[513,513]]],[1572790697194,[\"x@x.local\",[[-1,509,\"支部书记\"]],[513,513],[509,509]]],[1572790717948,[\"x@x.local\",[[1,509,\"只不过是降了很多曝光的剪影，天真。\"]],[509,509],[526,526]]],[1572790726257,[\"x@x.local\",[[-1,381,\"热闹\"]],[383,383],[381,381]]],[1572790745683,[\"x@x.local\",[[-1,242,\"很\"]],[243,243],[242,242]]],[1572790749853,[\"x@x.local\",[[1,242,\"挺\"]],[242,242],[243,243]]],[1572790787368,[\"x@x.local\",[[-1,380,\"里\"]],[381,381],[380,380]]],[1572790789390,[\"x@x.local\",[[1,380,\"尔\"]],[380,380],[381,381]]],[1572790790339,[\"x@x.local\",[[-1,380,\"尔\"]],[381,381],[380,380]]],[1572790792435,[\"x@x.local\",[[1,380,\"尔\"]],[380,380],[381,381]]],[1572790792873,[\"x@x.local\",[[-1,380,\"尔\"]],[381,381],[380,380]]],[1572790794850,[\"x@x.local\",[[1,380,\"儿\"]],[380,380],[381,381]]],[1572790798409,[\"x@x.local\",[[-1,386,\"有\"]],[387,387],[386,386]]],[1572790801785,[\"x@x.local\",[[-1,390,\"，\"]],[391,391],[390,390]]],[1572790802134,[\"x@x.local\",[[1,390,\"。\"]],[390,390],[391,391]]],[1572790839569,[\"x@x.local\",[[-1,510,\"降了\"]],[512,512],[510,510]]],[1572790842777,[\"x@x.local\",[[1,510,\"减了\"]],[510,510],[512,512]]],[1572790845720,[\"x@x.local\",[[-1,522,\"。\"]],[523,523],[522,522]]],[1572790846129,[\"x@x.local\",[[1,522,\"！\"]],[522,522],[523,523]]],[1572790847970,[\"x@x.local\",[[1,525,\"\\n\"]],[524,524],[525,525]]],[1572790888199,[\"x@x.local\",[[1,524,\"湖中间有个\"]],[524,524],[529,529]]],[1572790890076,[\"x@x.local\",[[-1,527,\"有个\"]],[529,529],[527,527]]],[1572790919284,[\"x@x.local\",[[1,527,\"是个卖书的图书馆，好像这几年光卖书也不行，\"]],[527,527],[548,548]]],[1572790934269,[\"x@x.local\",[[1,548,\"半卖半提供借阅的 。\"]],[548,548],[558,558]]],[1572790935091,[\"x@x.local\",[[-1,556,\" 。\"]],[558,558],[556,556]]],[1572790947882,[\"x@x.local\",[[1,556,\"。有\"]],[556,556],[558,558]]],[1572790948187,[\"x@x.local\",[[-1,557,\"有\"]],[558,558],[557,557]]],[1572790972157,[\"x@x.local\",[[1,557,\"隔了一大隔间，放了几张桌子和\"]],[557,557],[571,571]]],[1572790975832,[\"x@x.local\",[[-1,564,\"放了几张桌子和\"]],[571,571],[564,564]]],[1572790979488,[\"x@x.local\",[[1,564,\"提供了不少地方\"]],[564,564],[571,571]]],[1572790988670,[\"x@x.local\",[[1,571,\"可以随意的驻足\"]],[571,571],[578,578]]],[1572790993517,[\"x@x.local\",[[-1,571,\"可以随意的驻足\"]],[578,578],[571,571]]],[1572791005697,[\"x@x.local\",[[-1,535,\"，\"]],[536,536],[535,535]]],[1572791006074,[\"x@x.local\",[[1,535,\"。\"]],[535,535],[536,536]]],[1572791014547,[\"x@x.local\",[[-1,555,\"的\"]],[556,556],[555,555]]],[1572791017112,[\"x@x.local\",[[1,556,\"\\n\"]],[556,556],[557,557]]],[1572791020817,[\"x@x.local\",[[1,536,\"\\n\"]],[536,536],[537,537]]],[1572791032303,[\"x@x.local\",[[1,572,\"可以借阅\"]],[572,572],[576,576]]],[1572791033102,[\"x@x.local\",[[-1,574,\"借阅\"]],[576,576],[574,574]]],[1572791038603,[\"x@x.local\",[[1,574,\"就地读书读得\"]],[574,574],[580,580]]],[1572791042297,[\"x@x.local\",[[-1,576,\"读书读得\"]],[580,580],[576,576]]],[1572791043463,[\"x@x.local\",[[1,576,\"看\"]],[576,576],[577,577]]],[1572791048148,[\"x@x.local\",[[-1,565,\"提供了不少地方可以就地看\"]],[577,577],[565,565]]],[1572791056011,[\"x@x.local\",[[1,565,\"放了不少桌子椅子 \"]],[565,565],[574,574]]],[1572791056848,[\"x@x.local\",[[-1,573,\" \"]],[574,574],[573,573]]],[1572791057225,[\"x@x.local\",[[1,573,\"。\"]],[573,573],[574,574]]],[1572791063388,[\"x@x.local\",[[1,576,\"\\n\"]],[574,574],[575,575]]],[1572791074174,[\"x@x.local\",[[1,575,\"外面还有个平台。\"]],[575,575],[583,583]]],[1572791077039,[\"x@x.local\",[[-1,557,\"\\n\"]],[558,558],[557,557]]],[1572791080098,[\"x@x.local\",[[-1,573,\"\\n\"]],[574,574],[573,573]]],[1572791094947,[\"x@x.local\",[[1,581,\"作为常客，通常提着笔记本就\"]],[581,581],[594,594]]],[1572791095338,[\"x@x.local\",[[-1,593,\"就\"]],[594,594],[593,593]]],[1572791099264,[\"x@x.local\",[[1,593,\"电脑找个\"]],[593,593],[597,597]]],[1572791115898,[\"x@x.local\",[[1,597,\"地儿，随便站着或坐着就开始捣鼓某些\"]],[597,597],[614,614]]],[1572791119143,[\"x@x.local\",[[-1,610,\"捣鼓某些\"]],[614,614],[610,610]]],[1572791124306,[\"x@x.local\",[[1,610,\"看点资料了。\"]],[610,610],[616,616]]],[1572791128219,[\"x@x.local\",[[-1,615,\"。\"]],[616,616],[615,615]]],[1572791136935,[\"x@x.local\",[[1,615,\"。看完或者饿了，就回家。\"]],[615,615],[627,627]]],[1572791151108,[\"x@x.local\",[[-1,385,\"共\"]],[386,386],[385,385]]],[1572791152729,[\"x@x.local\",[[-1,387,\"地方\"]],[389,389],[387,387]]],[1572791154284,[\"x@x.local\",[[1,387,\"场\"]],[387,387],[388,388]]],[1572791156014,[\"x@x.local\",[[-1,386,\"个\"]],[387,387],[386,386]]],[1572791163139,[\"x@x.local\",[[-1,403,\"了\"]],[404,404],[403,403]]],[1572791237718,[\"x@x.local\",[[1,576,\"，还有自动卖\"]],[576,576],[582,582]]],[1572791238829,[\"x@x.local\",[[-1,581,\"卖\"]],[582,582],[581,581]]],[1572791253588,[\"x@x.local\",[[1,581,\"贩卖咖啡的机器和一些零售\"]],[581,581],[593,593]]],[1572791254790,[\"x@x.local\",[[-1,591,\"零售\"]],[593,593],[591,591]]],[1572791263985,[\"x@x.local\",[[1,591,\"零碎的零食\"]],[591,591],[596,596]]],[1572791279105,[\"x@x.local\",[[-1,570,\"面\"]],[571,571],[570,570]]],[1572791279690,[\"x@x.local\",[[-1,569,\"外\"]],[570,570],[569,569]]],[1572791288259,[\"x@x.local\",[[1,569,\"靠近湖心的\"]],[569,569],[574,574]]],[1572791288826,[\"x@x.local\",[[-1,573,\"的\"]],[574,574],[573,573]]],[1572791293114,[\"x@x.local\",[[1,573,\"的地方\"]],[573,573],[576,576]]],[1572791295651,[\"x@x.local\",[[-1,576,\"还有个\"]],[579,579],[576,576]]],[1572791296759,[\"x@x.local\",[[1,576,\"是个\"]],[576,576],[578,578]]],[1572791297646,[\"x@x.local\",[[-1,577,\"个\"]],[578,578],[577,577]]],[1572791300794,[\"x@x.local\",[[1,577,\"露天\"]],[577,577],[579,579]]],[1572791305296,[\"x@x.local\",[[-1,581,\"，\"]],[582,582],[581,581]]],[1572791306422,[\"x@x.local\",[[1,581,\"。\"]],[581,581],[582,582]]],[1572791323385,[\"x@x.local\",[[-1,599,\"零食\"]],[601,601],[599,599]]],[1572791326097,[\"x@x.local\",[[1,599,\"食品\"]],[599,599],[601,601]]],[1572791337591,[\"x@x.local\",[[-1,635,\"了\"]],[636,636],[635,635]]],[1572791339708,[\"x@x.local\",[[-1,632,\"点\"]],[633,633],[632,632]]],[1572791343036,[\"x@x.local\",[[-1,641,\"，\"]],[642,642],[641,641]]],[1572791380312,[\"x@x.local\",[[-1,767,\"一直需要\"]],[771,771],[767,767]]],[1572791381378,[\"x@x.local\",[[1,767,\"。\"]],[767,767],[768,768]]],[1572791385981,[\"x@x.local\",[[1,768,\"\\n\\n\"]],[768,768],[769,769]]],[1572791388283,[\"x@x.local\",[[-1,769,\"\\n\"]],[769,769],[0,0]]],[1572791388508,[\"x@x.local\",[[1,768,\"d\"]],[0,0],[768,769]]],[1572791389026,[\"x@x.local\",[[-1,768,\"d\"],[1,769,\"但\"]],[768,768],[769,769]]],[1572791392570,[\"x@x.local\",[[1,769,\"都过来了。\"]],[769,769],[774,774]]],[1572791393287,[\"x@x.local\",[[-1,773,\"。\"]],[774,774],[773,773]]],[1572791399300,[\"x@x.local\",[[1,773,\"，原因无非是重新读\"]],[773,773],[782,782]]],[1572791408300,[\"x@x.local\",[[1,782,\"了从前看的书，重新\"]],[782,782],[791,791]]],[1572791411301,[\"x@x.local\",[[-1,789,\"重新\"]],[791,791],[789,789]]],[1572791415065,[\"x@x.local\",[[1,789,\"重新\"]],[789,789],[791,791]]],[1572791415637,[\"x@x.local\",[[-1,789,\"重新\"]],[791,791],[789,789]]],[1572791417973,[\"x@x.local\",[[1,789,\"最关键是\"]],[789,789],[793,793]]],[1572791420812,[\"x@x.local\",[[-1,789,\"最关键是\"]],[793,793],[789,789]]],[1572791427859,[\"x@x.local\",[[1,789,\"当开始\"]],[789,789],[792,792]]],[1572791431794,[\"x@x.local\",[[-1,790,\"开始\"]],[792,792],[790,790]]],[1572791451520,[\"x@x.local\",[[1,790,\"感觉心情不好的时候，就去跑步啊去锻炼啊，何必这么\"]],[790,790],[814,814]]],[1572791452777,[\"x@x.local\",[[-1,810,\"何必这么\"]],[814,814],[810,810]]],[1572791458466,[\"x@x.local\",[[1,810,\"什么乱七八糟的思想，\"]],[810,810],[820,820]]],[1572791479301,[\"x@x.local\",[[1,820,\"一通下来，累的够呛哪有时间去想那些事情啊。\"]],[820,820],[841,841]]],[1572791501482,[\"x@x.local\",[[-1,703,\"经\"]],[704,704],[703,703]]],[1572791512373,[\"x@x.local\",[[-1,749,\"我\"]],[750,750],[749,749]]],[1572791526083,[\"x@x.local\",[[-1,786,\"，\"]],[787,787],[786,786]]],[1572791526522,[\"x@x.local\",[[1,786,\"。\"]],[786,786],[787,787]]],[1572791528108,[\"x@x.local\",[[-1,786,\"。\"]],[787,787],[786,786]]],[1572791529784,[\"x@x.local\",[[1,786,\"，或者\"]],[786,786],[789,789]]],[1572791533418,[\"x@x.local\",[[-1,796,\"的时候\"]],[799,799],[796,796]]],[1572791536641,[\"x@x.local\",[[1,792,\"到\"]],[792,792],[793,793]]],[1572791540078,[\"x@x.local\",[[-1,802,\"啊\"]],[803,803],[802,802]]],[1572791543589,[\"x@x.local\",[[-1,814,\"思想\"]],[816,816],[814,814]]],[1572791544982,[\"x@x.local\",[[1,814,\"西方\"]],[814,814],[816,816]]],[1572791545824,[\"x@x.local\",[[-1,814,\"西方\"]],[816,816],[814,814]]],[1572791547669,[\"x@x.local\",[[1,814,\"想法\"]],[814,814],[816,816]]],[1572791551988,[\"x@x.local\",[[-1,837,\"。\"]],[838,838],[837,837]]],[1572791561378,[\"x@x.local\",[[1,837,\"，睡眠够了，精神状态即便不\"]],[837,837],[850,850]]],[1572791563628,[\"x@x.local\",[[-1,849,\"不\"]],[850,850],[849,849]]],[1572791565440,[\"x@x.local\",[[1,849,\"没打\"]],[849,849],[851,851]]],[1572791566088,[\"x@x.local\",[[-1,850,\"打\"]],[851,851],[850,850]]],[1572791567438,[\"x@x.local\",[[1,850,\"大的\"]],[850,850],[852,852]]],[1572791573710,[\"x@x.local\",[[-1,849,\"没大的\"]],[852,852],[849,849]]],[1572791576238,[\"x@x.local\",[[1,849,\"没太多\"]],[849,849],[852,852]]],[1572791577534,[\"x@x.local\",[[-1,850,\"太多\"]],[852,852],[850,850]]],[1572791578746,[\"x@x.local\",[[1,850,\"大的\"]],[850,850],[852,852]]],[1572791580261,[\"x@x.local\",[[1,852,\"成长\"]],[852,852],[854,854]]],[1572791580984,[\"x@x.local\",[[-1,852,\"成长\"]],[854,854],[852,852]]],[1572791601923,[\"x@x.local\",[[1,797,\"时\"]],[797,797],[798,798]]],[1572791611284,[\"x@x.local\",[[-1,848,\"即便没大的\"]],[853,853],[848,848]]],[1572791614468,[\"x@x.local\",[[1,848,\"自然会好。\"]],[848,848],[853,853]]],[1572791615170,[\"x@x.local\",[[1,854,\"\\n\"]],[853,853],[854,854]]],[1572791616447,[\"x@x.local\",[[-1,854,\"\\n\"],[1,855,\"「\"]],[854,854],[855,855]]],[1572791616776,[\"x@x.local\",[[1,855,\"」\"]],[855,855],[856,856]]],[1572791627277,[\"x@x.local\",[[1,855,\"情绪和身体是相互影响的。\"]],[855,855],[867,867]]],[1572791677941,[\"x@x.local\",[[1,868,\"哪个不好，就用\"]],[868,868],[875,875]]],[1572791678290,[\"x@x.local\",[[-1,874,\"用\"]],[875,875],[874,874]]],[1572791682277,[\"x@x.local\",[[1,874,\"去另一头\"]],[874,874],[878,878]]],[1572791685205,[\"x@x.local\",[[-1,868,\"哪个不好，就去另一头\"]],[878,878],[868,868]]],[1572791685806,[\"x@x.local\",[[1,868,\"\\n\\n\"]],[868,868],[869,869]]],[1572791692570,[\"x@x.local\",[[-1,869,\"\\n\"],[1,870,\"哪个\"]],[869,869],[871,871]]],[1572791697786,[\"x@x.local\",[[1,871,\"不好，就去另一边\"]],[871,871],[879,879]]],[1572791700505,[\"x@x.local\",[[-1,879,\"做作\"]],[881,881],[879,879]]],[1572791702092,[\"x@x.local\",[[1,879,\"做点\"]],[879,879],[881,881]]],[1572791704781,[\"x@x.local\",[[-1,870,\"个不好，就去另一边做点\"]],[881,881],[870,870]]],[1572791704961,[\"x@x.local\",[[-1,869,\"哪\"],[1,870,\"\\n\"]],[870,870],[869,869]]],[1572791725451,[\"x@x.local\",[[-1,833,\"那些事情啊\"]],[838,838],[833,833]]],[1572791738632,[\"x@x.local\",[[-1,864,\"\\n\"],[1,865,\"我\"]],[864,864],[865,865]]],[1572791739891,[\"x@x.local\",[[1,865,\"害怕的\"]],[865,865],[868,868]]],[1572791740526,[\"x@x.local\",[[-1,865,\"害怕的\"]],[868,868],[865,865]]],[1572791740646,[\"x@x.local\",[[-1,864,\"我\"],[1,865,\"\\n\"]],[865,865],[864,864]]],[1572791829387,[\"x@x.local\",[[-1,777,\"重新读了从前看的书\"]],[786,786],[777,777]]],[1572791839303,[\"x@x.local\",[[1,777,\"重新一点一点拾起以前的东西\"]],[777,777],[790,790]]],[1572791852277,[\"x@x.local\",[[1,826,\"跑\"]],[826,826],[827,827]]],[1572791853792,[\"x@x.local\",[[-1,826,\"跑，\"]],[827,827],[826,826]]],[1572791862402,[\"x@x.local\",[[1,868,\"\\n\"]],[866,866],[867,867]]],[1572791863273,[\"x@x.local\",[[1,869,\"\\n\"]],[867,867],[868,868]]],[1572791889418,[\"x@x.local\",[[-1,541,\"也\"]],[542,542],[541,541]]],[1572791909038,[\"x@x.local\",[[1,552,\"第一层\"]],[552,552],[555,555]]],[1572791919553,[\"x@x.local\",[[-1,559,\"隔\"]],[560,560],[559,559]]],[1572792111463,[\"x@x.local\",[[1,869,\"作为一个普通人，有一些拾起\"]],[869,869],[882,882]]],[1572792112140,[\"x@x.local\",[[-1,880,\"拾起\"]],[882,882],[880,880]]],[1572792114734,[\"x@x.local\",[[1,880,\"事情，是\"]],[880,880],[884,884]]],[1572792115246,[\"x@x.local\",[[-1,882,\"，是\"]],[884,884],[882,882]]],[1572792119022,[\"x@x.local\",[[1,882,\"是从根本上\"]],[882,882],[887,887]]],[1572792130080,[\"x@x.local\",[[1,887,\"没法做出太大的改变的，比如家庭\"]],[887,887],[902,902]]],[1572792132211,[\"x@x.local\",[[-1,900,\"家庭\"]],[902,902],[900,900]]],[1572792137101,[\"x@x.local\",[[1,900,\"家庭背景。\"]],[900,900],[905,905]]],[1572792138481,[\"x@x.local\",[[1,907,\"\\n\"]],[905,905],[906,906]]],[1572792148472,[\"x@x.local\",[[-1,883,\"从根本上\"]],[886,886],[883,883]]],[1572792163713,[\"x@x.local\",[[1,902,\"普通人并不代表无能。。\"]],[902,902],[913,913]]],[1572792164176,[\"x@x.local\",[[-1,912,\"。\"]],[913,913],[912,912]]],[1572792167491,[\"x@x.local\",[[1,914,\"\\n\"]],[912,912],[913,913]]],[1572792170996,[\"x@x.local\",[[1,913,\"可以由\"]],[913,913],[916,916]]],[1572792172456,[\"x@x.local\",[[-1,915,\"由\"]],[916,916],[915,915]]],[1572792176503,[\"x@x.local\",[[1,915,\"有梦想，可以由\"]],[915,915],[922,922]]],[1572792198167,[\"x@x.local\",[[-1,919,\"可以由\"]],[922,922],[919,919]]],[1572792202512,[\"x@x.local\",[[1,919,\"但\"]],[919,919],[920,920]]],[1572792204060,[\"x@x.local\",[[-1,913,\"可以有梦想，但\"]],[920,920],[913,913]]],[1572792209368,[\"x@x.local\",[[1,913,\"并不一定\"]],[913,913],[917,917]]],[1572792209822,[\"x@x.local\",[[-1,915,\"一定\"]],[917,917],[915,915]]],[1572792215699,[\"x@x.local\",[[1,915,\"是说唯一\"]],[915,915],[919,919]]],[1572792216182,[\"x@x.local\",[[-1,917,\"唯一\"]],[919,919],[917,917]]],[1572792221922,[\"x@x.local\",[[1,917,\"定义幸福只有\"]],[917,917],[923,923]]],[1572792227477,[\"x@x.local\",[[-1,917,\"定义幸福只有\"]],[923,923],[917,917]]],[1572792237269,[\"x@x.local\",[[1,917,\"一些通用的价值观就一定是完全\"]],[917,917],[931,931]]],[1572792240242,[\"x@x.local\",[[-1,929,\"完全\"]],[931,931],[929,929]]],[1572792248045,[\"x@x.local\",[[1,929,\"任何场合下就是正确的。\"]],[929,929],[940,940]]],[1572792253802,[\"x@x.local\",[[-1,934,\"就\"]],[935,935],[934,934]]],[1572792255165,[\"x@x.local\",[[1,934,\"都\"]],[934,934],[935,935]]],[1572792273167,[\"x@x.local\",[[-1,935,\"是\"]],[936,936],[935,935]]],[1572792274563,[\"x@x.local\",[[-1,937,\"的\"]],[938,938],[937,937]]],[1572792281630,[\"x@x.local\",[[1,922,\"「\"]],[922,922],[923,923]]],[1572792283297,[\"x@x.local\",[[1,926,\"」\"]],[926,926],[927,927]]],[1572792287822,[\"x@x.local\",[[1,942,\"\\n\"]],[940,940],[941,941]]],[1572792297637,[\"x@x.local\",[[1,941,\"那样会使人变得俗气，\"]],[941,941],[951,951]]],[1572792301740,[\"x@x.local\",[[1,951,\"因为要\"]],[951,951],[954,954]]],[1572792302118,[\"x@x.local\",[[-1,953,\"要\"]],[954,954],[953,953]]],[1572792307040,[\"x@x.local\",[[1,953,\"为了迎合。\"]],[953,953],[958,958]]],[1572792309618,[\"x@x.local\",[[1,960,\"\\n\"]],[958,958],[959,959]]],[1572792313997,[\"x@x.local\",[[1,959,\"不太了解\"]],[959,959],[963,963]]],[1572792330679,[\"x@x.local\",[[-1,964,\"\\n\"]],[964,964],[963,963]]],[1572792331968,[\"x@x.local\",[[-1,959,\"不太了解\"]],[963,963],[959,959]]],[1572792334519,[\"x@x.local\",[[-1,959,\"\\n\"],[1,960,\"独立思考\"]],[959,959],[963,963]]],[1572792344617,[\"x@x.local\",[[1,963,\"，一直是一个很有意思的话题，\"]],[963,963],[977,977]]],[1572792348438,[\"x@x.local\",[[-1,964,\"一直是一个很有意思的话题，\"]],[977,977],[964,964]]],[1572792358713,[\"x@x.local\",[[1,964,\"一直是一件不太容易的事情。往往\"]],[964,964],[979,979]]],[1572792360614,[\"x@x.local\",[[1,979,\"需要的\"]],[979,979],[982,982]]],[1572792367489,[\"x@x.local\",[[-1,981,\"的\"]],[982,982],[981,981]]],[1572792374551,[\"x@x.local\",[[1,981,\"不少底层的\"]],[981,981],[986,986]]],[1572792384499,[\"x@x.local\",[[-1,977,\"往往需要不少底层的\"]],[986,986],[977,977]]],[1572792392253,[\"x@x.local\",[[1,977,\"需要比较高的认知，也包括对\"]],[977,977],[990,990]]],[1572792395344,[\"x@x.local\",[[-1,989,\"对\"]],[990,990],[989,989]]],[1572792400726,[\"x@x.local\",[[1,989,\"因这些\"]],[989,989],[992,992]]],[1572792405589,[\"x@x.local\",[[-1,985,\"，也包括因这些\"]],[992,992],[985,985]]],[1572792405952,[\"x@x.local\",[[1,985,\"。\"]],[985,985],[986,986]]],[1572792413344,[\"x@x.local\",[[-1,964,\"一直\"]],[966,966],[964,964]]],[1572792414575,[\"x@x.local\",[[1,984,\"\\n\\n\"]],[984,984],[985,985]]],[1572792416404,[\"x@x.local\",[[-1,985,\"\\n\"],[1,986,\"下意识\"]],[985,985],[988,988]]],[1572792418593,[\"x@x.local\",[[1,988,\"的跟着\"]],[988,988],[991,991]]],[1572792424789,[\"x@x.local\",[[-1,986,\"意识的跟着\"]],[991,991],[986,986]]],[1572792425180,[\"x@x.local\",[[-1,985,\"下\"],[1,986,\"\\n\"]],[986,986],[985,985]]],[1572792434494,[\"x@x.local\",[[-1,889,\"的\"]],[890,890],[889,889]]],[1572792455645,[\"x@x.local\",[[-1,962,\"，\"]],[963,963],[962,962]]],[1572792460940,[\"x@x.local\",[[-1,972,\"。需要比较高的认知。\"]],[982,982],[972,972]]],[1572792461948,[\"x@x.local\",[[1,972,\"。\"]],[972,972],[973,973]]],[1572792462200,[\"x@x.local\",[[1,975,\"\\n\"]],[973,973],[974,974]]],[1572792472563,[\"x@x.local\",[[1,974,\"往往其实我知道这件事我\"]],[974,974],[985,985]]],[1572792473133,[\"x@x.local\",[[-1,984,\"我\"]],[985,985],[984,984]]],[1572792478788,[\"x@x.local\",[[1,984,\"应该怎么去理解，但\"]],[984,984],[993,993]]],[1572792490613,[\"x@x.local\",[[1,993,\"往往也并不能完全的做到。\"]],[993,993],[1005,1005]]],[1572792498305,[\"x@x.local\",[[-1,974,\"往往其实我知道这件事应该怎么去理解，但往往也并不能完全的做到。\"]],[1005,1005],[974,974]]],[1572792530644,[\"x@x.local\",[[1,974,\"但是，比较\"]],[974,974],[979,979]]],[1572792532207,[\"x@x.local\",[[-1,977,\"比较\"]],[979,979],[977,977]]],[1572792539221,[\"x@x.local\",[[1,977,\"相互比较或者认为\"]],[977,977],[985,985]]],[1572792541611,[\"x@x.local\",[[-1,977,\"相互比较或者认为\"]],[985,985],[977,977]]],[1572792552513,[\"x@x.local\",[[1,977,\"既然选择了一件事，就\"]],[977,977],[987,987]]],[1572792552921,[\"x@x.local\",[[-1,986,\"就\"]],[987,987],[986,986]]],[1572792553746,[\"x@x.local\",[[1,986,\"在\"]],[986,986],[987,987]]],[1572792558336,[\"x@x.local\",[[-1,982,\"一件事，在\"]],[987,987],[982,982]]],[1572792565279,[\"x@x.local\",[[1,982,\"做什么，就不\"]],[982,982],[988,988]]],[1572792565880,[\"x@x.local\",[[-1,987,\"不\"]],[988,988],[987,987]]],[1572792569151,[\"x@x.local\",[[-1,974,\"但是，\"]],[977,977],[974,974]]],[1572792575410,[\"x@x.local\",[[1,984,\"抓紧时间。\"]],[984,984],[989,989]]],[1572792577927,[\"x@x.local\",[[1,991,\"\\n\"]],[989,989],[990,990]]],[1572792595732,[\"x@x.local\",[[1,990,\"这不是考试，前一周抓一抓重点，\"]],[990,990],[1005,1005]]],[1572792604537,[\"x@x.local\",[[1,1005,\"找一找科目\"]],[1005,1005],[1010,1010]]],[1572792605033,[\"x@x.local\",[[-1,1008,\"科目\"]],[1010,1010],[1008,1008]]],[1572792606529,[\"x@x.local\",[[1,1008,\"科目的\"]],[1008,1008],[1011,1011]]],[1572792608454,[\"x@x.local\",[[-1,1008,\"科目的\"]],[1011,1011],[1008,1008]]],[1572792614166,[\"x@x.local\",[[1,1008,\"老师画画重点\"]],[1008,1008],[1014,1014]]],[1572792617633,[\"x@x.local\",[[-1,999,\"抓一抓重点，\"]],[1005,1005],[999,999]]],[1572792620407,[\"x@x.local\",[[1,1008,\"，屏幕\"]],[1008,1008],[1011,1011]]],[1572792621429,[\"x@x.local\",[[-1,1009,\"屏幕\"]],[1011,1011],[1009,1009]]],[1572792630248,[\"x@x.local\",[[1,1009,\"通宵达旦盘上\"]],[1009,1009],[1015,1015]]],[1572792630908,[\"x@x.local\",[[-1,1013,\"盘上\"]],[1015,1015],[1013,1013]]],[1572792648373,[\"x@x.local\",[[1,1013,\"攀上知识顶峰，考完立马回到历史最低水平。\"]],[1013,1013],[1033,1033]]],[1572792649329,[\"x@x.local\",[[1,1035,\"\\n\"]],[1033,1033],[1034,1034]]],[1572792651697,[\"x@x.local\",[[1,1034,\"社会\"]],[1034,1034],[1036,1036]]],[1572792652254,[\"x@x.local\",[[-1,1034,\"社会\"]],[1036,1036],[1034,1034]]],[1572792653587,[\"x@x.local\",[[1,1034,\"换\"]],[1034,1034],[1035,1035]]],[1572792653904,[\"x@x.local\",[[-1,1034,\"换\"]],[1035,1035],[1034,1034]]],[1572792675623,[\"x@x.local\",[[1,1034,\"今天开始比明天开始会比实现目标\"]],[1034,1034],[1049,1049]]],[1572792676178,[\"x@x.local\",[[-1,1047,\"目标\"]],[1049,1049],[1047,1047]]],[1572792677703,[\"x@x.local\",[[1,1047,\"目标\"]],[1047,1047],[1049,1049]]],[1572792681174,[\"x@x.local\",[[-1,1044,\"比实现目标\"]],[1049,1049],[1044,1044]]],[1572792685888,[\"x@x.local\",[[1,1044,\"离目标更近。\"]],[1044,1044],[1050,1050]]],[1572792693430,[\"x@x.local\",[[1,1052,\"\\n\"]],[1050,1050],[1051,1051]]],[1572792696729,[\"x@x.local\",[[1,1051,\"无线的\"]],[1051,1051],[1054,1054]]],[1572792697374,[\"x@x.local\",[[-1,1051,\"无线的\"]],[1054,1054],[1051,1051]]],[1572792717517,[\"x@x.local\",[[1,1051,\"无限的拖延，带来的伤害，不是由于你不够聪明，不够\"]],[1051,1051],[1075,1075]]],[1572792722683,[\"x@x.local\",[[1,1075,\"勤奋，\"]],[1075,1075],[1078,1078]]],[1572792725485,[\"x@x.local\",[[-1,1072,\"，\"]],[1073,1073],[1072,1072]]],[1572792733558,[\"x@x.local\",[[1,1077,\"而是因为时间不够。\"]],[1077,1077],[1086,1086]]],[1572792735144,[\"x@x.local\",[[1,1088,\"\\n\"]],[1086,1086],[1087,1087]]],[1572792741730,[\"x@x.local\",[[-1,1056,\"，\"]],[1057,1057],[1056,1056]]],[1572792743185,[\"x@x.local\",[[-1,1053,\"的\"]],[1054,1054],[1053,1053]]],[1572792750819,[\"x@x.local\",[[1,1085,\"认知的\"]],[1085,1085],[1088,1088]]],[1572792751300,[\"x@x.local\",[[-1,1087,\"的\"]],[1088,1088],[1087,1087]]],[1572792757522,[\"x@x.local\",[[1,1087,\"的提升也不足以要\"]],[1087,1087],[1095,1095]]],[1572792761725,[\"x@x.local\",[[-1,1092,\"足以要\"]],[1095,1095],[1092,1092]]],[1572792769033,[\"x@x.local\",[[1,1092,\"是局限在一个方面。\"]],[1092,1092],[1101,1101]]],[1572792769825,[\"x@x.local\",[[-1,1100,\"。\"]],[1101,1101],[1100,1100]]],[1572792773063,[\"x@x.local\",[[1,1100,\"，有些东西啊\"]],[1100,1100],[1106,1106]]],[1572792773575,[\"x@x.local\",[[-1,1105,\"啊\"]],[1106,1106],[1105,1105]]],[1572792779558,[\"x@x.local\",[[1,1105,\"速成了就只是\"]],[1105,1105],[1111,1111]]],[1572792785998,[\"x@x.local\",[[1,1111,\"个目录，真正的东西，\"]],[1111,1111],[1121,1121]]],[1572792787435,[\"x@x.local\",[[-1,1120,\"，\"]],[1121,1121],[1120,1120]]],[1572792809579,[\"x@x.local\",[[1,1120,\"需要时间去填补上对它认识上的不足。\"]],[1120,1120],[1137,1137]]],[1572792826120,[\"x@x.local\",[[1,1139,\"\\n\"]],[1137,1137],[1138,1138]]],[1572792828412,[\"x@x.local\",[[1,1138,\"我\"]],[1138,1138],[1139,1139]]],[1572792828806,[\"x@x.local\",[[-1,1138,\"我\"]],[1139,1139],[1138,1138]]],[1572792837193,[\"x@x.local\",[[1,1138,\"永远没有准备好的时候。\"]],[1138,1138],[1149,1149]]],[1572792839066,[\"x@x.local\",[[1,1151,\"\\n\"]],[1149,1149],[1150,1150]]],[1572792841121,[\"x@x.local\",[[1,1152,\"\\n\"]],[1150,1150],[1151,1151]]],[1572792859302,[\"x@x.local\",[[-1,56,\"这的季节，往往\"]],[56,63],[56,56]]],[1572792914292,[\"x@x.local\",[[-1,209,\"这时节\"]],[212,212],[209,209]]],[1572792931752,[\"x@x.local\",[[-1,248,\"突的\"]],[250,250],[248,248]]],[1572792935847,[\"x@x.local\",[[-1,256,\"大扫把\"]],[259,259],[256,256]]],[1572792940647,[\"x@x.local\",[[-1,262,\"\\n\"]],[263,263],[262,262]]],[1572792941922,[\"x@x.local\",[[1,262,\"\\n\"]],[262,262],[263,263]]],[1572792959638,[\"x@x.local\",[[-1,324,\"小时候的\"]],[328,328],[324,324]]],[1572792998698,[\"x@x.local\",[[-1,440,\"我\"]],[441,441],[440,440]]],[1572793001488,[\"x@x.local\",[[-1,442,\"，\"]],[443,443],[442,442]]],[1572793002137,[\"x@x.local\",[[1,442,\"？\"]],[442,442],[443,443]]],[1572793005733,[\"x@x.local\",[[-1,446,\"也\"]],[447,447],[446,446]]],[1572793015858,[\"x@x.local\",[[-1,477,\"人\"]],[478,478],[477,477]]],[1572793064624,[\"x@x.local\",[[-1,588,\"提着\"]],[590,590],[588,588]]],[1572793072571,[\"x@x.local\",[[1,588,\"揣着个\"]],[588,588],[591,591]]],[1572793074449,[\"x@x.local\",[[-1,594,\"电脑\"]],[596,596],[594,594]]],[1572793121504,[\"x@x.local\",[[-1,759,\"一\"]],[760,760],[759,759]]],[1572793153740,[\"x@x.local\",[[-1,905,\"是\"]],[906,906],[905,905]]],[1572793164780,[\"x@x.local\",[[-1,938,\"一\"]],[939,939],[938,938]]],[1572793167584,[\"x@x.local\",[[-1,945,\"情\"]],[946,946],[945,945]]],[1572793182465,[\"x@x.local\",[[-1,973,\"一找\"]],[974,974],[973,973]]],[1572793194256,[\"x@x.local\",[[-1,1014,\"会\"]],[1015,1015],[1014,1014]]],[1572793200421,[\"x@x.local\",[[-1,1017,\"更\"]],[1018,1018],[1017,1017]]],[1572793202368,[\"x@x.local\",[[1,1018,\"点\"]],[1018,1018],[1019,1019]]],[1572793218361,[\"x@x.local\",[[-1,1067,\"个\"]],[1068,1068],[1067,1067]]],[1572793241075,[\"x@x.local\",[[1,1119,\"所以加油啊~你。\"]],[1119,1119],[1127,1127]]],[1572793252785,[\"x@x.local\",[[-1,1129,\"\\n\"],[1,1130,\"作为\"]],[1129,1129],[1131,1131]]],[1572793259639,[\"x@x.local\",[[1,1131,\"祖上三代喝酒成\"]],[1131,1131],[1138,1138]]],[1572793293184,[\"x@x.local\",[[1,1138,\"性，很抱歉从小看太多酒后的傻事。\"]],[1138,1138],[1154,1154]]],[1572793294097,[\"x@x.local\",[[1,1154,\"\\n\\n\"]],[1154,1154],[1155,1155]]],[1572793295536,[\"x@x.local\",[[-1,1155,\"\\n\"],[1,1156,\"我\"]],[1155,1155],[1156,1156]]],[1572793307866,[\"x@x.local\",[[1,1156,\"这辈子对酒精都不怎么有好的太多\"]],[1156,1156],[1171,1171]]],[1572793308481,[\"x@x.local\",[[-1,1169,\"太多\"]],[1171,1171],[1169,1169]]],[1572793310342,[\"x@x.local\",[[1,1169,\"太多\"]],[1169,1169],[1171,1171]]],[1572793310926,[\"x@x.local\",[[-1,1169,\"太多\"]],[1171,1171],[1169,1169]]],[1572793318485,[\"x@x.local\",[[1,1169,\"态度。即便是\"]],[1169,1169],[1175,1175]]],[1572793321625,[\"x@x.local\",[[1,1175,\"社交场合。\"]],[1175,1175],[1180,1180]]],[1572793322806,[\"x@x.local\",[[1,1180,\"\\n\\n\"]],[1180,1180],[1181,1181]]],[1572793324049,[\"x@x.local\",[[-1,1181,\"\\n\"],[1,1182,\"上面\"]],[1181,1181],[1183,1183]]],[1572793328519,[\"x@x.local\",[[1,1183,\"散步喝酒是为了\"]],[1183,1183],[1190,1190]]],[1572793329452,[\"x@x.local\",[[-1,1186,\"酒是为了\"]],[1190,1190],[1186,1186]]],[1572793340647,[\"x@x.local\",[[1,1186,\"啤酒，啤酒算酒吗？\"]],[1186,1186],[1195,1195]]],[1572793344783,[\"x@x.local\",[[1,1195,\"\\n\\n\"]],[1195,1195],[1196,1196]]],[1572793382805,[\"x@x.local\",[[-1,1196,\"\\n\"],[1,1197,\"所以\"]],[1196,1196],[1198,1198]]],[1572793386857,[\"x@x.local\",[[1,1198,\"酒精在\"]],[1198,1198],[1201,1201]]],[1572793387624,[\"x@x.local\",[[-1,1200,\"在\"]],[1201,1201],[1200,1200]]],[1572793393320,[\"x@x.local\",[[1,1200,\"这种无良\"]],[1200,1200],[1204,1204]]],[1572793394088,[\"x@x.local\",[[-1,1202,\"无良\"]],[1204,1204],[1202,1202]]],[1572793402801,[\"x@x.local\",[[1,1202,\"无聊的东西，微醺\"]],[1202,1202],[1210,1210]]],[1572793406283,[\"x@x.local\",[[-1,1209,\"醺\"]],[1210,1210],[1209,1209]]],[1572793413891,[\"x@x.local\",[[1,1209,\"微喝醉的状态就很好了。\"]],[1209,1209],[1220,1220]]],[1572793414969,[\"x@x.local\",[[1,1220,\"\\n\\n\"]],[1220,1220],[1221,1221]]],[1572793416301,[\"x@x.local\",[[-1,1221,\"\\n\"],[1,1222,\"即\"]],[1221,1221],[1222,1222]]],[1572793419708,[\"x@x.local\",[[-1,1221,\"即\"],[1,1222,\"\\n\"]],[1222,1222],[1221,1221]]],[1572793438037,[\"x@x.local\",[[-1,1221,\"\\n\"],[1,1222,\"既壮了怂人胆\"]],[1221,1221],[1227,1227]]],[1572793443045,[\"x@x.local\",[[1,1227,\"，又足够\"]],[1227,1227],[1231,1231]]],[1572793444414,[\"x@x.local\",[[-1,1229,\"足够\"]],[1231,1231],[1229,1229]]],[1572793448913,[\"x@x.local\",[[1,1229,\"不至于喝醉\"]],[1229,1229],[1234,1234]]],[1572793449259,[\"x@x.local\",[[-1,1233,\"醉\"]],[1234,1234],[1233,1233]]],[1572793454993,[\"x@x.local\",[[1,1233,\"太醉犯傻。\"]],[1233,1233],[1238,1238]]],[1572793457119,[\"x@x.local\",[[1,1238,\"\\n\\n\"]],[1238,1238],[1239,1239]]],[1572793459223,[\"x@x.local\",[[-1,1239,\"\\n\"],[1,1240,\"所以\"]],[1239,1239],[1241,1241]]],[1572793461481,[\"x@x.local\",[[1,1241,\"我也讨厌\"]],[1241,1241],[1245,1245]]],[1572793461948,[\"x@x.local\",[[-1,1243,\"讨厌\"]],[1245,1245],[1243,1243]]],[1572793472331,[\"x@x.local\",[[1,1243,\"不喜欢喝多了的人，跟我说掏心掏肺的话，\"]],[1243,1243],[1262,1262]]],[1572793472884,[\"x@x.local\",[[1,1262,\"\\n\\n\"]],[1262,1262],[1263,1263]]],[1572793475115,[\"x@x.local\",[[-1,1263,\"\\n\"],[1,1264,\"平时\"]],[1263,1263],[1265,1265]]],[1572793477702,[\"x@x.local\",[[1,1265,\"怎么不说，\"]],[1265,1265],[1270,1270]]],[1572793482738,[\"x@x.local\",[[-1,1269,\"，\"]],[1270,1270],[1269,1269]]],[1572793496130,[\"x@x.local\",[[1,1269,\"？喝多了说的我当真了，你却说我要找个人\"]],[1269,1269],[1288,1288]]],[1572793499660,[\"x@x.local\",[[-1,1283,\"我要找个人\"]],[1288,1288],[1283,1283]]],[1572793499809,[\"x@x.local\",[[-1,1282,\"说\"]],[1283,1283],[1282,1282]]],[1572793502656,[\"x@x.local\",[[1,1282,\"返回\"]],[1282,1282],[1284,1284]]],[1572793503439,[\"x@x.local\",[[-1,1282,\"返回\"]],[1284,1284],[1282,1282]]],[1572793506572,[\"x@x.local\",[[1,1282,\"反悔了，你\"]],[1282,1282],[1287,1287]]],[1572793507084,[\"x@x.local\",[[-1,1285,\"，你\"]],[1287,1287],[1285,1285]]],[1572793512143,[\"x@x.local\",[[1,1285,\"，你当我什么？\"]],[1285,1285],[1292,1292]]],[1572793522265,[\"x@x.local\",[[-1,1281,\"却\"]],[1282,1282],[1281,1281]]],[1572793523960,[\"x@x.local\",[[-1,1285,\"你\"]],[1286,1286],[1285,1285]]],[1572793530107,[\"x@x.local\",[[1,1139,\"的\"]],[1139,1139],[1140,1140]]],[1572793531790,[\"x@x.local\",[[-1,1139,\"的\"]],[1140,1140],[1139,1139]]],[1572793535766,[\"x@x.local\",[[1,1139,\"的\"]],[1139,1139],[1140,1140]]],[1572793548094,[\"x@x.local\",[[-1,1175,\"是\"]],[1176,1176],[1175,1175]]],[1572793549429,[\"x@x.local\",[[1,1175,\"在\"]],[1175,1175],[1176,1176]]],[1572793561550,[\"x@x.local\",[[-1,1219,\"了\"]],[1220,1220],[1219,1219]]],[1572793570803,[\"x@x.local\",[[-1,1239,\"所以\"]],[1241,1241],[1239,1239]]],[1572793574885,[\"x@x.local\",[[1,1250,\"然后\"]],[1250,1250],[1252,1252]]],[1572793578430,[\"x@x.local\",[[1,1255,\"「\"]],[1255,1255],[1256,1256]]],[1572793580362,[\"x@x.local\",[[1,1260,\"」\"]],[1260,1260],[1261,1261]]],[1572793590742,[\"x@x.local\",[[-1,1281,\"，\"]],[1282,1282],[1281,1281]]],[1572793593635,[\"x@x.local\",[[1,1291,\"\\n\\n\"]],[1291,1291],[1292,1292]]],[1572793603248,[\"x@x.local\",[[-1,1292,\"\\n\"],[1,1293,\"最主要\"]],[1292,1292],[1295,1295]]],[1572793612104,[\"x@x.local\",[[1,1295,\"每次被我爸骂，\"]],[1295,1295],[1302,1302]]],[1572793615190,[\"x@x.local\",[[-1,1297,\"被我爸骂，\"]],[1302,1302],[1297,1297]]],[1572793618434,[\"x@x.local\",[[1,1297,\"都被骂，\"]],[1297,1297],[1301,1301]]],[1572793620834,[\"x@x.local\",[[1,1301,\"卧槽，\"]],[1301,1301],[1304,1304]]],[1572793621266,[\"x@x.local\",[[-1,1303,\"，\"]],[1304,1304],[1303,1303]]],[1572793639178,[\"x@x.local\",[[1,1303,\"我这么招人恨？有啥大不了的，不能当我面说，\"]],[1303,1303],[1324,1324]]],[1572793642821,[\"x@x.local\",[[1,1310,\"\\n\"]],[1310,1310],[1311,1311]]],[1572793644306,[\"x@x.local\",[[1,1325,\"\\n\\n\"]],[1325,1325],[1326,1326]]],[1572793647455,[\"x@x.local\",[[-1,1326,\"\\n\"]],[1326,1326],[1325,1325]]],[1572793651385,[\"x@x.local\",[[1,1325,\"骂我\"]],[1325,1325],[1327,1327]]],[1572793652781,[\"x@x.local\",[[-1,1325,\"骂我\"]],[1327,1327],[1325,1325]]],[1572793653561,[\"x@x.local\",[[1,1325,\"我\"]],[1325,1325],[1326,1326]]],[1572793653876,[\"x@x.local\",[[-1,1325,\"我\"]],[1326,1326],[1325,1325]]],[1572793656636,[\"x@x.local\",[[1,1325,\"我在乎的\"]],[1325,1325],[1329,1329]]],[1572793657476,[\"x@x.local\",[[-1,1326,\"在乎的\"]],[1329,1329],[1326,1326]]],[1572793660005,[\"x@x.local\",[[1,1326,\"喜欢的人，\"]],[1326,1326],[1331,1331]]],[1572793663745,[\"x@x.local\",[[-1,1325,\"我喜欢的人，\"]],[1331,1331],[1325,1325]]],[1572793665921,[\"x@x.local\",[[1,1326,\"\\n\"]],[1325,1325],[1326,1326]]],[1572793666699,[\"x@x.local\",[[-1,1326,\"\\n\"],[1,1327,\"我\"]],[1326,1326],[1327,1327]]],[1572793672237,[\"x@x.local\",[[1,1327,\"喜欢的人，想骂揍我\"]],[1327,1327],[1336,1336]]],[1572793673046,[\"x@x.local\",[[-1,1334,\"揍我\"]],[1336,1336],[1334,1334]]],[1572793676350,[\"x@x.local\",[[1,1334,\"走我，不可能。\"]],[1334,1334],[1341,1341]]],[1572793682872,[\"x@x.local\",[[-1,1326,\"我\"]],[1327,1327],[1326,1326]]],[1572793684942,[\"x@x.local\",[[-1,1330,\"，\"]],[1331,1331],[1330,1330]]],[1572793686667,[\"x@x.local\",[[-1,1334,\"，\"]],[1335,1335],[1334,1334]]],[1572793690716,[\"x@x.local\",[[1,1338,\"所幸\"]],[1338,1338],[1340,1340]]],[1572793693087,[\"x@x.local\",[[-1,1338,\"所幸\"]],[1340,1340],[1338,1338]]],[1572793696252,[\"x@x.local\",[[1,1338,\"\\n\\n\"]],[1338,1338],[1339,1339]]],[1572793698157,[\"x@x.local\",[[-1,1339,\"\\n\"],[1,1340,\"人\"]],[1339,1339],[1340,1340]]],[1572793702376,[\"x@x.local\",[[1,1340,\"这辈子为了什么啊？\"]],[1340,1340],[1349,1349]]],[1572793703227,[\"x@x.local\",[[1,1349,\"\\n\\n\"]],[1349,1349],[1350,1350]]],[1572793704066,[\"x@x.local\",[[-1,1350,\"\\n\"],[1,1351,\"我\"]],[1350,1350],[1351,1351]]],[1572793709946,[\"x@x.local\",[[1,1351,\"这辈子只希望有个完全\"]],[1351,1351],[1361,1361]]],[1572793712752,[\"x@x.local\",[[-1,1359,\"完全\"]],[1361,1361],[1359,1359]]],[1572793724767,[\"x@x.local\",[[1,1359,\"完全可以把心底托福\"]],[1359,1359],[1368,1368]]],[1572793725457,[\"x@x.local\",[[-1,1366,\"托福\"]],[1368,1368],[1366,1366]]],[1572793729048,[\"x@x.local\",[[1,1366,\"所有的\"]],[1366,1366],[1369,1369]]],[1572793730032,[\"x@x.local\",[[-1,1368,\"的\"]],[1369,1369],[1368,1368]]],[1572793733032,[\"x@x.local\",[[1,1368,\"事情托福\"]],[1368,1368],[1372,1372]]],[1572793733557,[\"x@x.local\",[[-1,1370,\"托福\"]],[1372,1372],[1370,1370]]],[1572793736336,[\"x@x.local\",[[1,1370,\"说出来，\"]],[1370,1370],[1374,1374]]],[1572793736797,[\"x@x.local\",[[-1,1373,\"，\"]],[1374,1374],[1373,1373]]],[1572793738703,[\"x@x.local\",[[1,1373,\"，然后\"]],[1373,1373],[1376,1376]]],[1572793746759,[\"x@x.local\",[[1,1376,\"那个人就说，没事，\"]],[1376,1376],[1385,1385]]],[1572793753762,[\"x@x.local\",[[-1,1359,\"完全\"]],[1361,1361],[1359,1359]]],[1572793757903,[\"x@x.local\",[[1,1372,\"\\n\"]],[1372,1372],[1373,1373]]],[1572793764305,[\"x@x.local\",[[1,1384,\"你再差\"]],[1384,1384],[1387,1387]]],[1572793764788,[\"x@x.local\",[[-1,1386,\"差\"]],[1387,1387],[1386,1386]]],[1572793766244,[\"x@x.local\",[[1,1386,\"不好，\"]],[1386,1386],[1389,1389]]],[1572793771411,[\"x@x.local\",[[-1,1374,\"后那个人就说，没事，你再不好，\"]],[1389,1389],[1374,1374]]],[1572793771513,[\"x@x.local\",[[-1,1373,\"然\"],[1,1374,\"\\n\"]],[1374,1374],[1373,1373]]],[1572793771615,[\"x@x.local\",[[-1,1373,\"\\n\"]],[1373,1373],[1372,1372]]],[1572793773842,[\"x@x.local\",[[-1,1350,\"我这辈子只希望有个可以把心底所有事情说出来，\"]],[1372,1372],[1350,1350]]],[1572793774192,[\"x@x.local\",[[-1,1350,\"\\n\"]],[1350,1350],[1349,1349]]],[1572793778050,[\"x@x.local\",[[1,1349,\"喝这么多。\"]],[1349,1349],[1354,1354]]],[1572793796543,[\"x@x.local\",[[1,1147,\"了\"]],[1147,1147],[1148,1148]]],[1572793849208,[\"x@x.local\",[[-1,1327,\"喜欢的人想骂走我不可能\"]],[1327,1338],[1327,1327]]],[1572793849582,[\"x@x.local\",[[-1,1326,\"\\n\"]],[1327,1327],[1326,1326]]],[1572793850213,[\"x@x.local\",[[-1,1325,\"，\"]],[1326,1326],[1325,1325]]],[1572793853319,[\"x@x.local\",[[1,1327,\"\\n\"]],[1326,1326],[1327,1327]]],[1572793859183,[\"x@x.local\",[[1,1327,\"这样不敢那也不\"]],[1327,1327],[1334,1334]]],[1572793878503,[\"x@x.local\",[[1,1335,\"，我不太清楚为什么长大了顾虑多了，少了这份平常的\"]],[1335,1335],[1359,1359]]],[1572793879703,[\"x@x.local\",[[-1,1356,\"平常的\"]],[1359,1359],[1356,1356]]],[1572793884838,[\"x@x.local\",[[1,1356,\"本来就有的勇气。\"]],[1356,1356],[1364,1364]]],[1572793885764,[\"x@x.local\",[[-1,1363,\"。\"]],[1364,1364],[1363,1363]]],[1572793887609,[\"x@x.local\",[[1,1363,\"呵呵\"]],[1363,1363],[1365,1365]]],[1572793887909,[\"x@x.local\",[[-1,1364,\"呵\"]],[1365,1365],[1364,1364]]],[1572793888182,[\"x@x.local\",[[1,1364,\"。\"]],[1364,1364],[1365,1365]]],[1572793891794,[\"x@x.local\",[[1,1336,\"\\n\"]],[1336,1336],[1337,1337]]],[1572793895575,[\"x@x.local\",[[1,1353,\"\\n\"]],[1353,1353],[1354,1354]]],[1572793901619,[\"x@x.local\",[[-1,1378,\"喝这么多。\"]],[1383,1383],[1378,1378]]],[1572793902024,[\"x@x.local\",[[1,1379,\"\\n\"]],[1378,1378],[1379,1379]]],[1572793908129,[\"x@x.local\",[[-1,1379,\"\\n\"],[1,1380,\"反正\"]],[1379,1379],[1381,1381]]],[1572793908969,[\"x@x.local\",[[1,1381,\"没人\"]],[1381,1381],[1383,1383]]],[1572793909598,[\"x@x.local\",[[-1,1380,\"正没人\"]],[1383,1383],[1380,1380]]],[1572793910109,[\"x@x.local\",[[-1,1379,\"反\"],[1,1380,\"\\n\"]],[1380,1380],[1379,1379]]],[1572793910634,[\"x@x.local\",[[-1,1379,\"\\n\"],[1,1380,\"我\"]],[1379,1379],[1380,1380]]],[1572793918766,[\"x@x.local\",[[1,1380,\"这辈子就希望有个人能理解我，\"]],[1380,1380],[1394,1394]]],[1572793979779,[null,[[-1,1334,\"\\n\"],[1,1335,\"敢\"],[1,1367,\"\\n\"],[-1,1377,\"喝\"]],[1334,1334],[1377,1377]]],[1572793979779,[null,[[1,1334,\"\\n\"],[-1,1334,\"敢\"],[-1,1367,\"\\n\"],[1,1378,\"喝\"]],[1377,1377],[1334,1334]]],[1572793924555,[\"x@x.local\",[[1,1394,\"\\n\\n\"]],[1394,1394],[1395,1395]]],[1572793925469,[\"x@x.local\",[[-1,1395,\"\\n\"],[1,1396,\"这种\"]],[1395,1395],[1397,1397]]],[1572793925782,[\"x@x.local\",[[1,1397,\"了；\"]],[1397,1397],[1399,1399]]],[1572793926504,[\"x@x.local\",[[-1,1397,\"了；\"]],[1399,1399],[1397,1397]]],[1572793935956,[\"x@x.local\",[[1,1397,\"理解是我愿意吐露内心，\"]],[1397,1397],[1408,1408]]],[1572793937245,[\"x@x.local\",[[-1,1407,\"，\"]],[1408,1408],[1407,1407]]],[1572793941433,[\"x@x.local\",[[1,1407,\"里的世界。\"]],[1407,1407],[1412,1412]]],[1572793943093,[\"x@x.local\",[[-1,1411,\"。\"]],[1412,1412],[1411,1411]]],[1572793943758,[\"x@x.local\",[[1,1411,\"，\"]],[1411,1411],[1412,1412]]],[1572793944459,[\"x@x.local\",[[1,1412,\"\\n\\n\"]],[1412,1412],[1413,1413]]],[1572793946064,[\"x@x.local\",[[-1,1413,\"\\n\"],[1,1414,\"庞杂\"]],[1413,1413],[1415,1415]]],[1572793948133,[\"x@x.local\",[[1,1415,\"混乱\"]],[1415,1415],[1417,1417]]],[1572793953100,[\"x@x.local\",[[-1,1414,\"杂混乱\"]],[1417,1417],[1414,1414]]],[1572793953309,[\"x@x.local\",[[-1,1413,\"庞\"],[1,1414,\"\\n\"]],[1414,1414],[1413,1413]]],[1572793958827,[\"x@x.local\",[[-1,1413,\"\\n\"],[1,1414,\"是\"]],[1413,1413],[1414,1414]]],[1572793960722,[\"x@x.local\",[[1,1414,\"被理解。\"]],[1414,1414],[1418,1418]]],[1572793971850,[\"x@x.local\",[[-1,1407,\"里的\"]],[1409,1409],[1407,1407]]],[1572794039782,[null,[[-1,1334,\"\\n\"],[1,1335,\"敢\"],[1,1367,\"\\n\"],[-1,1377,\"喝\"]],[1334,1334],[1377,1377]]],[1572794039782,[null,[[1,1334,\"\\n\"],[-1,1334,\"敢\"],[-1,1367,\"\\n\"],[1,1378,\"喝\"]],[1377,1377],[1334,1334]]],[1572793980340,[\"x@x.local\",[[-1,1412,\"被理解。\"]],[1416,1416],[1412,1412]]],[1572793980490,[\"x@x.local\",[[-1,1411,\"是\"],[1,1412,\"\\n\"]],[1412,1412],[1411,1411]]],[1572793994486,[\"x@x.local\",[[-1,1411,\"\\n\"],[1,1412,\"而不必\"]],[1411,1411],[1414,1414]]],[1572793997603,[\"x@x.local\",[[1,1414,\"担心被笑\"]],[1414,1414],[1418,1418]]],[1572793998129,[\"x@x.local\",[[-1,1417,\"笑\"]],[1418,1418],[1417,1417]]],[1572794005274,[\"x@x.local\",[[1,1417,\"下任何判断。\"]],[1417,1417],[1423,1423]]],[1572794006923,[\"x@x.local\",[[-1,1418,\"任何判断。\"]],[1423,1423],[1418,1418]]],[1572794011514,[\"x@x.local\",[[1,1418,\"任何断定。\"]],[1418,1418],[1423,1423]]],[1572794012306,[\"x@x.local\",[[1,1423,\"\\n\\n\"]],[1423,1423],[1424,1424]]],[1572794013115,[\"x@x.local\",[[-1,1424,\"\\n\"],[1,1425,\"那也\"]],[1424,1424],[1426,1426]]],[1572794013640,[\"x@x.local\",[[-1,1425,\"也\"]],[1426,1426],[1425,1425]]],[1572794014302,[\"x@x.local\",[[-1,1424,\"那\"],[1,1425,\"\\n\"]],[1425,1425],[1424,1424]]],[1572794017074,[\"x@x.local\",[[-1,1424,\"\\n\"],[1,1425,\"那样\"]],[1424,1424],[1426,1426]]],[1572794017451,[\"x@x.local\",[[-1,1425,\"样\"]],[1426,1426],[1425,1425]]],[1572794017660,[\"x@x.local\",[[-1,1424,\"那\"],[1,1425,\"\\n\"]],[1425,1425],[1424,1424]]],[1572794018681,[\"x@x.local\",[[-1,1424,\"\\n\"],[1,1425,\"被人\"]],[1424,1424],[1426,1426]]],[1572794024968,[\"x@x.local\",[[1,1426,\"下断定虽然我\"]],[1426,1426],[1432,1432]]],[1572794026705,[\"x@x.local\",[[-1,1429,\"虽然我\"]],[1432,1432],[1429,1429]]],[1572794031851,[\"x@x.local\",[[1,1429,\"虽已经完全不\"]],[1429,1429],[1435,1435]]],[1572794032630,[\"x@x.local\",[[-1,1432,\"完全不\"]],[1435,1435],[1432,1432]]],[1572794035244,[\"x@x.local\",[[1,1432,\"不在意了，\"]],[1432,1432],[1437,1437]]],[1572794039679,[\"x@x.local\",[[-1,1427,\"断定虽已经不在意了，\"]],[1437,1437],[1427,1427]]],[1572794099785,[null,[[-1,1334,\"\\n\"],[1,1335,\"敢\"],[1,1367,\"\\n\"],[-1,1377,\"喝\"]],[1334,1334],[1377,1377]]],[1572794099785,[null,[[1,1334,\"\\n\"],[-1,1334,\"敢\"],[-1,1367,\"\\n\"],[1,1378,\"喝\"]],[1377,1377],[1334,1334]]],[1572794039881,[\"x@x.local\",[[-1,1425,\"人\"]],[1426,1426],[1425,1425]]],[1572794040115,[\"x@x.local\",[[-1,1424,\"被\"],[1,1425,\"\\n\"]],[1425,1425],[1424,1424]]],[1572794046941,[\"x@x.local\",[[-1,1413,\"必担心\"]],[1416,1416],[1413,1413]]],[1572794053677,[\"x@x.local\",[[1,1422,\"\\n\"]],[1420,1420],[1421,1421]]],[1572794063040,[\"x@x.local\",[[1,1421,\"「」\"]],[1421,1421],[1423,1423]]],[1572794079744,[\"x@x.local\",[[1,1422,\"你的存在本身就是\"]],[1422,1422],[1430,1430]]],[1572794081202,[\"x@x.local\",[[-1,1429,\"是\"]],[1430,1430],[1429,1429]]],[1572794095440,[\"x@x.local\",[[1,1429,\"能给人带来喜悦和感谢。\"]],[1429,1429],[1440,1440]]],[1572794096816,[\"x@x.local\",[[1,1443,\"\\n\"]],[1441,1441],[1442,1442]]],[1572794098882,[\"x@x.local\",[[1,1442,\"谢谢你\"]],[1442,1442],[1445,1445]]],[1572794159786,[null,[[-1,1334,\"\\n\"],[1,1335,\"敢\"],[1,1367,\"\\n\"],[-1,1377,\"喝\"],[-1,1447,\"下\"]],[1334,1334],[1447,1447]]],[1572794159786,[null,[[1,1334,\"\\n\"],[-1,1334,\"敢\"],[-1,1367,\"\\n\"],[1,1378,\"喝\"],[1,1447,\"下\"]],[1447,1447],[1334,1334]]],[1572794100024,[\"x@x.local\",[[1,1445,\"本身\"]],[1445,1445],[1447,1447]]],[1572794101616,[\"x@x.local\",[[-1,1442,\"谢谢你本身\"]],[1447,1447],[1442,1442]]],[1572794106941,[\"x@x.local\",[[1,1442,\"这是我对在乎的人\"]],[1442,1442],[1450,1450]]],[1572794108502,[\"x@x.local\",[[-1,1446,\"在乎的人\"]],[1450,1450],[1446,1446]]],[1572794116885,[\"x@x.local\",[[1,1446,\"所有人本身的拼接\"]],[1446,1446],[1454,1454]]],[1572794118837,[\"x@x.local\",[[-1,1446,\"所有人本身的拼接\"]],[1454,1454],[1446,1446]]],[1572794123790,[\"x@x.local\",[[1,1446,\"身边人的评价，\"]],[1446,1446],[1453,1453]]],[1572794125602,[\"x@x.local\",[[-1,1450,\"评价，\"]],[1453,1453],[1450,1450]]],[1572794127901,[\"x@x.local\",[[1,1450,\"台独。\"]],[1450,1450],[1453,1453]]],[1572794128601,[\"x@x.local\",[[-1,1450,\"台独。\"]],[1453,1453],[1450,1450]]],[1572794130150,[\"x@x.local\",[[1,1450,\"态度。\"]],[1450,1450],[1453,1453]]],[1572794135353,[\"x@x.local\",[[1,1455,\"\\n\"]],[1453,1453],[1454,1454]]],[1572794136730,[\"x@x.local\",[[1,1454,\"无聊\"]],[1454,1454],[1456,1456]]],[1572794137362,[\"x@x.local\",[[-1,1454,\"无聊\"]],[1456,1456],[1454,1454]]],[1572794141112,[\"x@x.local\",[[1,1454,\"无论你能不能\"]],[1454,1454],[1460,1460]]],[1572794143166,[\"x@x.local\",[[-1,1454,\"无论你能不能\"]],[1460,1460],[1454,1454]]],[1572794143722,[\"x@x.local\",[[-1,1455,\"\\n\"]],[1454,1454],[1453,1453]]],[1572794219807,[null,[[-1,1334,\"\\n\"],[1,1335,\"敢\"],[1,1367,\"\\n\"],[-1,1377,\"喝\"],[-1,1455,\"下\"]],[1334,1334],[1455,1455]]],[1572794219807,[null,[[1,1334,\"\\n\"],[-1,1334,\"敢\"],[-1,1367,\"\\n\"],[1,1378,\"喝\"],[1,1455,\"下\"]],[1455,1455],[1334,1334]]],[1572794161242,[\"x@x.local\",[[-1,1169,\"好的态度\"]],[1173,1173],[1169,1169]]],[1572794163369,[\"x@x.local\",[[1,1169,\"好感\"]],[1169,1169],[1171,1171]]],[1572794203108,[\"x@x.local\",[[1,1323,\"，我又不会生气\"]],[1323,1323],[1330,1330]]],[1572794208733,[\"x@x.local\",[[-1,1333,\"样\"]],[1334,1334],[1333,1333]]],[1572794212078,[\"x@x.local\",[[-1,1336,\"也\"]],[1337,1337],[1336,1336]]],[1572794279795,[null,[[-1,1337,\"\\n\"],[1,1338,\"敢\"],[1,1370,\"\\n\"],[-1,1380,\"喝\"],[-1,1458,\"下\"]],[1337,1337],[1458,1458]]],[1572794279795,[null,[[1,1337,\"\\n\"],[-1,1337,\"敢\"],[-1,1370,\"\\n\"],[1,1381,\"喝\"],[1,1458,\"下\"]],[1458,1458],[1337,1337]]],[1572794254915,[\"x@x.local\",[[-1,1457,\"\\n\"],[1,1458,\"也\"]],[1457,1457],[1458,1458]]],[1572794257052,[\"x@x.local\",[[1,1458,\"是对你的。\"]],[1458,1458],[1463,1463]]],[1572794258444,[\"x@x.local\",[[1,1463,\"\\n\\n\"]],[1463,1463],[1464,1464]]],[1572794263227,[\"x@x.local\",[[-1,1464,\"\\n\"],[1,1465,\"你有\"]],[1464,1464],[1466,1466]]],[1572794264681,[\"x@x.local\",[[1,1466,\"模板就\"]],[1466,1466],[1469,1469]]],[1572794265269,[\"x@x.local\",[[-1,1466,\"模板就\"]],[1469,1469],[1466,1466]]],[1572794269746,[\"x@x.local\",[[1,1466,\"目标就去实现啊。，\"]],[1466,1466],[1475,1475]]],[1572794270653,[\"x@x.local\",[[-1,1473,\"。，\"]],[1475,1475],[1473,1473]]],[1572794276848,[\"x@x.local\",[[1,1473,\"，你的标签就是一直\"]],[1473,1473],[1482,1482]]],[1572794279459,[\"x@x.local\",[[-1,1475,\"的标签就是一直\"]],[1482,1482],[1475,1475]]],[1572794339813,[null,[[-1,1337,\"\\n\"],[1,1338,\"敢\"],[1,1370,\"\\n\"],[-1,1380,\"喝\"],[-1,1475,\"下\"]],[1337,1337],[1475,1475]]],[1572794339813,[null,[[1,1337,\"\\n\"],[-1,1337,\"敢\"],[-1,1370,\"\\n\"],[1,1381,\"喝\"],[1,1475,\"下\"]],[1475,1475],[1337,1337]]],[1572794284233,[\"x@x.local\",[[1,1475,\"的微信标签就是「」\"]],[1475,1475],[1484,1484]]],[1572794293259,[\"x@x.local\",[[1,1483,\"一直喜欢你，希望你幸福啊\"]],[1483,1483],[1495,1495]]],[1572794295288,[\"x@x.local\",[[1,1496,\"、\"]],[1496,1496],[1497,1497]]],[1572794295884,[\"x@x.local\",[[-1,1496,\"、\"]],[1497,1497],[1496,1496]]],[1572794296366,[\"x@x.local\",[[1,1496,\"。\"]],[1496,1496],[1497,1497]]],[1572794296680,[\"x@x.local\",[[1,1497,\"\\n\\n\"]],[1497,1497],[1498,1498]]],[1572794310239,[\"x@x.local\",[[-1,1488,\"，\"]],[1489,1489],[1488,1488]]],[1572794310527,[\"x@x.local\",[[1,1488,\" \"]],[1488,1488],[1489,1489]]],[1572794321714,[\"x@x.local\",[[-1,1474,\"你的\"]],[1476,1476],[1474,1474]]],[1572794324262,[\"x@x.local\",[[1,1474,\"给你加的\"]],[1474,1474],[1478,1478]]],[1572794399808,[null,[[-1,1337,\"\\n\"],[1,1338,\"敢\"],[1,1370,\"\\n\"],[-1,1380,\"喝\"],[-1,1501,\"下\"]],[1337,1337],[1501,1501]]],[1572794399808,[null,[[1,1337,\"\\n\"],[-1,1337,\"敢\"],[-1,1370,\"\\n\"],[1,1381,\"喝\"],[1,1501,\"下\"]],[1501,1501],[1337,1337]]],[1572794353440,[\"x@x.local\",[[-1,1500,\"\\n\"],[1,1501,\"无法\"]],[1500,1500],[1502,1502]]],[1572794356080,[\"x@x.local\",[[-1,1501,\"法\"]],[1502,1502],[1501,1501]]],[1572794358192,[\"x@x.local\",[[1,1501,\"非行不行\"]],[1501,1501],[1505,1505]]],[1572794358912,[\"x@x.local\",[[-1,1502,\"行不行\"]],[1505,1505],[1502,1502]]],[1572794367405,[\"x@x.local\",[[1,1502,\"想不想，喜欢不喜欢。啊，都快\"]],[1502,1502],[1516,1516]]],[1572794370239,[\"x@x.local\",[[-1,1512,\"啊，都快\"]],[1516,1516],[1512,1512]]],[1572794370465,[\"x@x.local\",[[1,1512,\"\\n\\n\"]],[1512,1512],[1513,1513]]],[1572794372575,[\"x@x.local\",[[-1,1513,\"\\n\"],[1,1514,\"我\"]],[1513,1513],[1514,1514]]],[1572794385166,[\"x@x.local\",[[1,1514,\"而立之年都过了，还觉得可以\"]],[1514,1514],[1527,1527]]],[1572794386320,[\"x@x.local\",[[-1,1522,\"还觉得可以\"]],[1527,1527],[1522,1522]]],[1572794459809,[null,[[-1,1337,\"\\n\"],[1,1338,\"敢\"],[1,1370,\"\\n\"],[-1,1380,\"喝\"],[-1,1522,\"下\"]],[1337,1337],[1522,1522]]],[1572794459809,[null,[[1,1337,\"\\n\"],[-1,1337,\"敢\"],[-1,1370,\"\\n\"],[1,1381,\"喝\"],[1,1522,\"下\"]],[1522,1522],[1337,1337]]],[1572794406049,[\"x@x.local\",[[1,1512,\"勇气呢？\"]],[1512,1512],[1516,1516]]],[1572794421979,[\"x@x.local\",[[1,1526,\"我也觉得自己一事无成。\"]],[1526,1526],[1537,1537]]],[1572794425710,[\"x@x.local\",[[-1,1536,\"。\"]],[1537,1537],[1536,1536]]],[1572794433612,[\"x@x.local\",[[1,1536,\"，吹牛逼说自己帮\"]],[1536,1536],[1544,1544]]],[1572794434096,[\"x@x.local\",[[-1,1543,\"帮\"]],[1544,1544],[1543,1543]]],[1572794441264,[\"x@x.local\",[[1,1543,\"棒，不害臊\"]],[1543,1543],[1548,1548]]],[1572794446441,[\"x@x.local\",[[-1,1532,\"一事无成，吹牛逼说自己棒，不害臊\"]],[1548,1548],[1532,1532]]],[1572794450418,[\"x@x.local\",[[1,1532,\"没做好几件事。\"]],[1532,1532],[1539,1539]]],[1572794450866,[\"x@x.local\",[[1,1539,\"\\n\\n\"]],[1539,1539],[1540,1540]]],[1572794457406,[\"x@x.local\",[[-1,1540,\"\\n\"],[1,1541,\"后面\"]],[1540,1540],[1542,1542]]],[1572794458529,[\"x@x.local\",[[-1,1541,\"面\"]],[1542,1542],[1541,1541]]],[1572794458710,[\"x@x.local\",[[-1,1540,\"后\"],[1,1541,\"\\n\"]],[1541,1541],[1540,1540]]],[1572794459308,[\"x@x.local\",[[-1,1540,\"\\n\"],[1,1541,\"我\"]],[1540,1540],[1541,1541]]],[1572794519818,[null,[[-1,1337,\"\\n\"],[1,1338,\"敢\"],[1,1370,\"\\n\"],[-1,1380,\"喝\"],[-1,1541,\"下\"]],[1337,1337],[1541,1541]]],[1572794519818,[null,[[1,1337,\"\\n\"],[-1,1337,\"敢\"],[-1,1370,\"\\n\"],[1,1381,\"喝\"],[1,1541,\"下\"]],[1541,1541],[1337,1337]]],[1572794474810,[\"x@x.local\",[[1,1541,\"给自己5年时间，手头上的事情要做到极致。\"]],[1541,1541],[1561,1561]]],[1572794477492,[\"x@x.local\",[[-1,1560,\"。\"]],[1561,1561],[1560,1560]]],[1572794486356,[\"x@x.local\",[[1,1560,\"，而不会再去考虑什么能不能\"]],[1560,1560],[1573,1573]]],[1572794486880,[\"x@x.local\",[[-1,1572,\"能\"]],[1573,1573],[1572,1572]]],[1572794490117,[\"x@x.local\",[[1,1572,\"能的问题。\"]],[1572,1572],[1577,1577]]],[1572794491696,[\"x@x.local\",[[1,1577,\"\\n\\n\"]],[1577,1577],[1578,1578]]],[1572794492295,[\"x@x.local\",[[-1,1578,\"\\n\"],[1,1579,\"也\"]],[1578,1578],[1579,1579]]],[1572794493346,[\"x@x.local\",[[1,1579,\"不回去\"]],[1579,1579],[1582,1582]]],[1572794494383,[\"x@x.local\",[[-1,1580,\"回去\"]],[1582,1582],[1580,1580]]],[1572794504884,[\"x@x.local\",[[1,1580,\"会去考量别人怎么看，一切都没必要。\"]],[1580,1580],[1597,1597]]],[1572794507716,[\"x@x.local\",[[-1,1590,\"一切\"]],[1592,1592],[1590,1590]]],[1572794516625,[\"x@x.local\",[[1,1549,\"把\"]],[1549,1549],[1550,1550]]],[1572794579843,[null,[[-1,1337,\"\\n\"],[1,1338,\"敢\"],[1,1370,\"\\n\"],[-1,1380,\"喝\"],[-1,1596,\"下\"]],[1337,1337],[1596,1596]]],[1572794579843,[null,[[1,1337,\"\\n\"],[-1,1337,\"敢\"],[-1,1370,\"\\n\"],[1,1381,\"喝\"],[1,1596,\"下\"]],[1596,1596],[1337,1337]]],[1572794519883,[\"x@x.local\",[[-1,1556,\"要\"]],[1557,1557],[1556,1556]]],[1572794522087,[\"x@x.local\",[[-1,1561,\"而\"]],[1562,1562],[1561,1561]]],[1572794523647,[\"x@x.local\",[[1,1561,\"\\n\"]],[1561,1561],[1562,1562]]],[1572794545672,[\"x@x.local\",[[-1,1327,\"会\"]],[1328,1328],[1327,1327]]],[1572794569407,[\"x@x.local\",[[-1,1403,\"愿意\"]],[1405,1405],[1403,1403]]],[1572794577328,[\"x@x.local\",[[-1,1417,\"断定\"]],[1419,1419],[1417,1417]]],[1572794639835,[null,[[-1,1336,\"\\n\"],[1,1337,\"敢\"],[1,1369,\"\\n\"],[-1,1379,\"喝\"],[-1,1590,\"下\"]],[1336,1336],[1590,1590]]],[1572794639835,[null,[[1,1336,\"\\n\"],[-1,1336,\"敢\"],[-1,1369,\"\\n\"],[1,1380,\"喝\"],[1,1590,\"下\"]],[1590,1590],[1336,1336]]],[1572794580057,[\"x@x.local\",[[1,1417,\"判定\"]],[1417,1417],[1419,1419]]],[1572794621804,[\"x@x.local\",[[-1,1532,\"几件事\"]],[1535,1535],[1532,1532]]],[1572794623902,[\"x@x.local\",[[1,1532,\"什么事情\"]],[1532,1532],[1536,1536]]],[1572794624233,[\"x@x.local\",[[-1,1535,\"情\"]],[1536,1536],[1535,1535]]],[1572794699850,[null,[[-1,1336,\"\\n\"],[1,1337,\"敢\"],[1,1369,\"\\n\"],[-1,1379,\"喝\"],[-1,1592,\"下\"]],[1336,1336],[1592,1592]]],[1572794699850,[null,[[1,1336,\"\\n\"],[-1,1336,\"敢\"],[-1,1369,\"\\n\"],[1,1380,\"喝\"],[1,1592,\"下\"]],[1592,1592],[1336,1336]]],[1572794642910,[\"x@x.local\",[[1,1592,\"\\n\\n\"]],[1592,1592],[1593,1593]]],[1572794646014,[\"x@x.local\",[[-1,1593,\"\\n\"],[1,1594,\"都没必要\"]],[1593,1593],[1597,1597]]],[1572794653828,[\"x@x.local\",[[1,1597,\"。生活的本质是活给自己看的，。\"]],[1597,1597],[1612,1612]]],[1572794654352,[\"x@x.local\",[[-1,1611,\"。\"]],[1612,1612],[1611,1611]]],[1572794658675,[\"x@x.local\",[[1,1598,\"\\n\"]],[1598,1598],[1599,1599]]],[1572794662334,[\"x@x.local\",[[1,1612,\"活给\"]],[1612,1612],[1614,1614]]],[1572794662950,[\"x@x.local\",[[-1,1612,\"活给\"]],[1614,1614],[1612,1612]]],[1572794663790,[\"x@x.local\",[[1,1612,\"\\n\\n\"]],[1612,1612],[1613,1613]]],[1572794665050,[\"x@x.local\",[[-1,1613,\"\\n\"]],[1613,1613],[1612,1612]]],[1572794667854,[\"x@x.local\",[[1,1612,\"为自己活着。，\"]],[1612,1612],[1619,1619]]],[1572794668545,[\"x@x.local\",[[-1,1617,\"。，\"]],[1619,1619],[1617,1617]]],[1572794668847,[\"x@x.local\",[[1,1617,\"，\"]],[1617,1617],[1618,1618]]],[1572794669384,[\"x@x.local\",[[1,1619,\"\\n\"]],[1618,1618],[1619,1619]]],[1572794672610,[\"x@x.local\",[[-1,1619,\"\\n\"],[1,1620,\"肩负\"]],[1619,1619],[1621,1621]]],[1572794673224,[\"x@x.local\",[[1,1621,\"的\"]],[1621,1621],[1622,1622]]],[1572794673780,[\"x@x.local\",[[-1,1620,\"负的\"]],[1622,1622],[1620,1620]]],[1572794673930,[\"x@x.local\",[[-1,1619,\"肩\"],[1,1620,\"\\n\"]],[1620,1620],[1619,1619]]],[1572794676390,[\"x@x.local\",[[-1,1619,\"\\n\"],[1,1620,\"和\"]],[1619,1619],[1620,1620]]],[1572794683467,[\"x@x.local\",[[1,1620,\"家人一起，担负起\"]],[1620,1620],[1628,1628]]],[1572794687116,[\"x@x.local\",[[-1,1625,\"担负起\"]],[1628,1628],[1625,1625]]],[1572794694109,[\"x@x.local\",[[1,1625,\"对自己负责，对家负责。\"]],[1625,1625],[1636,1636]]],[1572794759850,[null,[[-1,1336,\"\\n\"],[1,1337,\"敢\"],[1,1369,\"\\n\"],[-1,1379,\"喝\"],[-1,1636,\"下\"]],[1336,1336],[1636,1636]]],[1572794759850,[null,[[1,1336,\"\\n\"],[-1,1336,\"敢\"],[-1,1369,\"\\n\"],[1,1380,\"喝\"],[1,1636,\"下\"]],[1636,1636],[1336,1336]]],[1572794712526,[\"x@x.local\",[[-1,1592,\"\\n\"]],[1593,1593],[1592,1592]]],[1572794713351,[\"x@x.local\",[[-1,1591,\"。\"]],[1592,1592],[1591,1591]]],[1572794716770,[\"x@x.local\",[[-1,1591,\"都没必要\"]],[1595,1595],[1591,1591]]],[1572794726461,[\"x@x.local\",[[1,1630,\"\\n\\n\"]],[1630,1630],[1631,1631]]],[1572794730463,[\"x@x.local\",[[-1,1631,\"\\n\"],[1,1632,\"难道\"]],[1631,1631],[1633,1633]]],[1572794736886,[\"x@x.local\",[[1,1633,\"还是为了让别人\"]],[1633,1633],[1640,1640]]],[1572794739576,[\"x@x.local\",[[-1,1632,\"道还是为了让别人\"]],[1640,1640],[1632,1632]]],[1572794740051,[\"x@x.local\",[[-1,1631,\"难\"],[1,1632,\"\\n\"]],[1632,1632],[1631,1631]]],[1572794740396,[\"x@x.local\",[[1,1632,\"\\n\"]],[1631,1631],[1632,1632]]],[1572794741535,[\"x@x.local\",[[-1,1632,\"\\n\"],[1,1633,\"那么\"]],[1632,1632],[1634,1634]]],[1572794752025,[\"x@x.local\",[[1,1634,\"点自卑甚至刻意的去炫耀，\"]],[1634,1634],[1646,1646]]],[1572794819868,[null,[[-1,1336,\"\\n\"],[1,1337,\"敢\"],[1,1369,\"\\n\"],[-1,1379,\"喝\"],[-1,1646,\"下\"]],[1336,1336],[1646,1646]]],[1572794819868,[null,[[1,1336,\"\\n\"],[-1,1336,\"敢\"],[-1,1369,\"\\n\"],[1,1380,\"喝\"],[1,1646,\"下\"]],[1646,1646],[1336,1336]]],[1572794762248,[\"x@x.local\",[[1,1646,\"就算报复心\"]],[1646,1646],[1651,1651]]],[1572794762764,[\"x@x.local\",[[-1,1650,\"心\"]],[1651,1651],[1650,1650]]],[1572794769539,[\"x@x.local\",[[1,1650,\"性的获得了成功\"]],[1650,1650],[1657,1657]]],[1572794770305,[\"x@x.local\",[[-1,1655,\"成功\"]],[1657,1657],[1655,1655]]],[1572794772674,[\"x@x.local\",[[1,1655,\"想要的\"]],[1655,1655],[1658,1658]]],[1572794782051,[\"x@x.local\",[[-1,1633,\"么点自卑甚至刻意的去炫耀，就算报复性的获得了想要的\"]],[1658,1658],[1633,1633]]],[1572794782262,[\"x@x.local\",[[-1,1632,\"那\"],[1,1633,\"\\n\"]],[1633,1633],[1632,1632]]],[1572794783818,[\"x@x.local\",[[-1,1632,\"\\n\"],[1,1633,\"刻意\"]],[1632,1632],[1634,1634]]],[1572794791881,[\"x@x.local\",[[1,1634,\"的去炫耀，虚张声势。\"]],[1634,1634],[1644,1644]]],[1572794792282,[\"x@x.local\",[[1,1644,\"\\n\\n\"]],[1644,1644],[1645,1645]]],[1572794794499,[\"x@x.local\",[[-1,1645,\"\\n\"],[1,1646,\"刻意\"]],[1645,1645],[1647,1647]]],[1572794803775,[\"x@x.local\",[[1,1647,\"的表达，就不是真实的自己。\"]],[1647,1647],[1660,1660]]],[1572794804251,[\"x@x.local\",[[1,1660,\"\\n\\n\"]],[1660,1660],[1661,1661]]],[1572794806814,[\"x@x.local\",[[-1,1661,\"\\n\"],[1,1662,\"刻意\"]],[1661,1661],[1663,1663]]],[1572794817471,[\"x@x.local\",[[1,1663,\"的学习，哇这是件好事。\"]],[1663,1663],[1674,1674]]],[1572794817827,[\"x@x.local\",[[1,1674,\"\\n\\n\"]],[1674,1674],[1675,1675]]],[1572794879859,[null,[[-1,1336,\"\\n\"],[1,1337,\"敢\"],[1,1369,\"\\n\"],[-1,1379,\"喝\"],[-1,1676,\"下\"]],[1336,1336],[1676,1676]]],[1572794879859,[null,[[1,1336,\"\\n\"],[-1,1336,\"敢\"],[-1,1369,\"\\n\"],[1,1380,\"喝\"],[1,1676,\"下\"]],[1676,1676],[1336,1336]]],[1572794829258,[\"x@x.local\",[[1,1650,\"出「」\"]],[1650,1650],[1653,1653]]],[1572794834849,[\"x@x.local\",[[1,1652,\"blingbling\"]],[1652,1652],[1662,1662]]],[1572794841976,[\"x@x.local\",[[1,1663,\"的曾经不\"]],[1663,1663],[1667,1667]]],[1572794842367,[\"x@x.local\",[[-1,1666,\"不\"]],[1667,1667],[1666,1666]]],[1572794844633,[\"x@x.local\",[[1,1666,\"没有的东西\"]],[1666,1666],[1671,1671]]],[1572794848065,[\"x@x.local\",[[-1,1673,\"不是真实的自己\"]],[1680,1680],[1673,1673]]],[1572794850225,[\"x@x.local\",[[1,1673,\"是不完全\"]],[1673,1673],[1677,1677]]],[1572794939868,[null,[[-1,1336,\"\\n\"],[1,1337,\"敢\"],[1,1369,\"\\n\"],[-1,1379,\"喝\"],[-1,1694,\"下\"]],[1336,1336],[1694,1694]]],[1572794939868,[null,[[1,1336,\"\\n\"],[-1,1336,\"敢\"],[-1,1369,\"\\n\"],[1,1380,\"喝\"],[1,1694,\"下\"]],[1694,1694],[1336,1336]]],[1572794894132,[\"x@x.local\",[[-1,1624,\"，\"]],[1625,1625],[1624,1624]]],[1572794900130,[\"x@x.local\",[[1,1638,\"是\"]],[1638,1638],[1639,1639]]],[1572794908368,[\"x@x.local\",[[-1,1672,\"就是不完全\"]],[1677,1677],[1672,1672]]],[1572794910604,[\"x@x.local\",[[1,1672,\"是不成熟\"]],[1672,1672],[1676,1676]]],[1572794914894,[\"x@x.local\",[[1,1678,\"\\n\"]],[1677,1677],[1678,1678]]],[1572794915569,[\"x@x.local\",[[-1,1678,\"\\n\"]],[1678,1678],[1677,1677]]],[1572794916829,[\"x@x.local\",[[1,1693,\"\\n\"]],[1691,1691],[1692,1692]]],[1572794921502,[\"x@x.local\",[[1,1692,\"你缺少什么，。\"]],[1692,1692],[1699,1699]]],[1572794925108,[\"x@x.local\",[[-1,1693,\"缺少什么，。\"]],[1699,1699],[1693,1693]]],[1572794935276,[\"x@x.local\",[[1,1693,\"获得什么不是为了炫耀，是为了生活\"]],[1693,1693],[1709,1709]]],[1572794935820,[\"x@x.local\",[[-1,1707,\"生活\"]],[1709,1709],[1707,1707]]],[1572794939419,[\"x@x.local\",[[1,1707,\"一些目标，\"]],[1707,1707],[1712,1712]]],[1572794999873,[null,[[-1,1336,\"\\n\"],[1,1337,\"敢\"],[1,1369,\"\\n\"],[-1,1379,\"喝\"],[-1,1714,\"下\"]],[1336,1336],[1714,1714]]],[1572794999873,[null,[[1,1336,\"\\n\"],[-1,1336,\"敢\"],[-1,1369,\"\\n\"],[1,1380,\"喝\"],[1,1714,\"下\"]],[1714,1714],[1336,1336]]],[1572794944024,[\"x@x.local\",[[1,1713,\"为了一些人，是为了\"]],[1713,1713],[1722,1722]]],[1572794946566,[\"x@x.local\",[[-1,1707,\"一些目标，是为了一些人，是为了\"]],[1722,1722],[1707,1707]]],[1572794960303,[\"x@x.local\",[[1,1707,\"自己，为了一些人，为了一些目标，这就很好。\"]],[1707,1707],[1728,1728]]],[1572794960644,[\"x@x.local\",[[1,1730,\"\\n\"]],[1728,1728],[1729,1729]]],[1572794979347,[\"x@x.local\",[[1,1729,\"玩，也是目标，但在没有资本的前提的\"]],[1729,1729],[1746,1746]]],[1572794981511,[\"x@x.local\",[[-1,1745,\"的\"]],[1746,1746],[1745,1745]]],[1572794982309,[\"x@x.local\",[[1,1745,\"下，\"]],[1745,1745],[1747,1747]]],[1572794995625,[\"x@x.local\",[[-1,1730,\"，\"]],[1731,1731],[1730,1730]]],[1572795059884,[null,[[-1,1336,\"\\n\"],[1,1337,\"敢\"],[1,1369,\"\\n\"],[-1,1379,\"喝\"],[-1,1746,\"下\"],[1,1747,\"\\n\"]],[1336,1336],[1748,1748]]],[1572795059884,[null,[[1,1336,\"\\n\"],[-1,1336,\"敢\"],[-1,1369,\"\\n\"],[1,1380,\"喝\"],[1,1746,\"下\"],[-1,1746,\"\\n\"]],[1748,1748],[1336,1336]]],[1572795006049,[\"x@x.local\",[[-1,1709,\"，\"]],[1710,1710],[1709,1709]]],[1572795008359,[\"x@x.local\",[[-1,1714,\"，\"]],[1715,1715],[1714,1714]]],[1572795059334,[\"x@x.local\",[[1,1744,\"那是浪费，\"]],[1744,1744],[1749,1749]]],[1572795119886,[null,[[-1,1336,\"\\n\"],[1,1337,\"敢\"],[1,1369,\"\\n\"],[-1,1379,\"喝\"],[-1,1749,\"下\"],[1,1750,\"\\n\"]],[1336,1336],[1751,1751]]],[1572795119886,[null,[[1,1336,\"\\n\"],[-1,1336,\"敢\"],[-1,1369,\"\\n\"],[1,1380,\"喝\"],[1,1749,\"下\"],[-1,1749,\"\\n\"]],[1751,1751],[1336,1336]]],[1572795068644,[\"x@x.local\",[[1,1749,\"流淌的时间不复回\"]],[1749,1749],[1757,1757]]],[1572795069290,[\"x@x.local\",[[-1,1755,\"复回\"]],[1757,1757],[1755,1755]]],[1572795077689,[\"x@x.local\",[[1,1755,\"复回\"]],[1755,1755],[1757,1757]]],[1572795079205,[\"x@x.local\",[[-1,1755,\"复回\"]],[1757,1757],[1755,1755]]],[1572795091810,[\"x@x.local\",[[1,1755,\"复回。\"]],[1755,1755],[1758,1758]]],[1572795101166,[\"x@x.local\",[[1,1760,\"\\n\"]],[1758,1758],[1759,1759]]],[1572795107016,[\"x@x.local\",[[-1,1760,\"\\n\"]],[1759,1759],[1758,1758]]],[1572795109341,[\"x@x.local\",[[-1,1744,\"那是浪费，流淌的时间不复回。\"]],[1758,1758],[1744,1744]]],[1572795110471,[\"x@x.local\",[[1,1744,\"那是浪费，流淌的时间不复回。\"]],[1744,1744],[1758,1758]]],[1572795113572,[\"x@x.local\",[[1,1760,\"\\n\"]],[1758,1758],[1759,1759]]],[1572795117708,[\"x@x.local\",[[1,1759,\"我知道你很好\"]],[1759,1759],[1765,1765]]],[1572795119481,[\"x@x.local\",[[-1,1759,\"我知道你很好\"]],[1765,1765],[1759,1759]]],[1572795179887,[null,[[-1,1336,\"\\n\"],[1,1337,\"敢\"],[1,1369,\"\\n\"],[-1,1379,\"喝\"],[-1,1758,\"下\"],[1,1759,\"\\n\"]],[1336,1336],[1760,1760]]],[1572795179887,[null,[[1,1336,\"\\n\"],[-1,1336,\"敢\"],[-1,1369,\"\\n\"],[1,1380,\"喝\"],[1,1758,\"下\"],[-1,1758,\"\\n\"]],[1760,1760],[1336,1336]]],[1572795124777,[\"x@x.local\",[[1,1759,\"逃是下册\"]],[1759,1759],[1763,1763]]],[1572795125497,[\"x@x.local\",[[-1,1761,\"下册\"]],[1763,1763],[1761,1761]]],[1572795137454,[\"x@x.local\",[[1,1761,\"本能，面对是勇气。\"]],[1761,1761],[1770,1770]]],[1572795138562,[\"x@x.local\",[[1,1772,\"\\n\"]],[1770,1770],[1771,1771]]],[1572795159229,[\"x@x.local\",[[1,1771,\"破罐子再破，我也\"]],[1771,1771],[1779,1779]]],[1572795159742,[\"x@x.local\",[[-1,1777,\"我也\"]],[1779,1779],[1777,1777]]],[1572795177996,[\"x@x.local\",[[1,1777,\"我也想你捡起来看看，自己身上有足够的勇气，给你\"]],[1777,1777],[1800,1800]]],[1572795239893,[null,[[-1,1336,\"\\n\"],[1,1337,\"敢\"],[1,1369,\"\\n\"],[-1,1379,\"喝\"],[-1,1758,\"下\"],[1,1759,\"\\n\"]],[1336,1336],[1760,1760]]],[1572795239893,[null,[[1,1336,\"\\n\"],[-1,1336,\"敢\"],[-1,1369,\"\\n\"],[1,1380,\"喝\"],[1,1758,\"下\"],[-1,1758,\"\\n\"]],[1760,1760],[1336,1336]]],[1572795180442,[\"x@x.local\",[[-1,1798,\"给你\"]],[1800,1800],[1798,1798]]],[1572795208523,[\"x@x.local\",[[-1,1754,\"不复回\"]],[1757,1757],[1754,1754]]],[1572795212496,[\"x@x.local\",[[1,1754,\"不复存在\"]],[1754,1754],[1758,1758]]],[1572795222233,[\"x@x.local\",[[-1,1788,\"自己\"]],[1790,1790],[1788,1788]]],[1572795223565,[\"x@x.local\",[[1,1788,\"它\"]],[1788,1788],[1789,1789]]],[1572795228113,[\"x@x.local\",[[-1,1791,\"有足够的勇气\"]],[1797,1797],[1791,1791]]],[1572795235286,[\"x@x.local\",[[1,1791,\"本来就有足够的勇气。\"]],[1791,1791],[1801,1801]]],[1572795238688,[\"x@x.local\",[[-1,1800,\"。，\"]],[1802,1802],[1800,1800]]],[1572795239005,[\"x@x.local\",[[1,1800,\"，\"]],[1800,1800],[1801,1801]]],[1572795299909,[null,[[-1,1336,\"\\n\"],[1,1337,\"敢\"],[1,1369,\"\\n\"],[-1,1379,\"喝\"],[-1,1759,\"下\"],[1,1760,\"\\n\"]],[1336,1336],[1761,1761]]],[1572795299910,[null,[[1,1336,\"\\n\"],[-1,1336,\"敢\"],[-1,1369,\"\\n\"],[1,1380,\"喝\"],[1,1759,\"下\"],[-1,1759,\"\\n\"]],[1761,1761],[1336,1336]]],[1572795240383,[\"x@x.local\",[[1,1801,\"可逆\"]],[1801,1801],[1803,1803]]],[1572795241208,[\"x@x.local\",[[-1,1800,\"，可逆\"]],[1803,1803],[1800,1800]]],[1572795241542,[\"x@x.local\",[[1,1800,\"。\"]],[1800,1800],[1801,1801]]],[1572795241943,[\"x@x.local\",[[1,1803,\"\\n\"]],[1801,1801],[1802,1802]]],[1572795265062,[\"x@x.local\",[[1,1802,\"我不记得是不是16年还是17年，那本秘密花园绘本还在吗？\"]],[1802,1802],[1830,1830]]],[1572795267894,[\"x@x.local\",[[1,1832,\"\\n\"]],[1830,1830],[1831,1831]]],[1572795283986,[\"x@x.local\",[[1,1831,\"我也不记得你曾经说过的话，但是依稀记得你说过的\"]],[1831,1831],[1854,1854]]],[1572795286505,[\"x@x.local\",[[-1,1850,\"你说过的\"]],[1854,1854],[1850,1850]]],[1572795291282,[\"x@x.local\",[[1,1850,\"那些重要的，\"]],[1850,1850],[1856,1856]]],[1572795291863,[\"x@x.local\",[[-1,1855,\"，\"]],[1856,1856],[1855,1855]]],[1572795292136,[\"x@x.local\",[[1,1855,\"。\"]],[1855,1855],[1856,1856]]],[1572795359900,[null,[[-1,1336,\"\\n\"],[1,1337,\"敢\"],[1,1369,\"\\n\"],[-1,1379,\"喝\"],[-1,1759,\"下\"],[1,1760,\"\\n\"]],[1336,1336],[1761,1761]]],[1572795359900,[null,[[1,1336,\"\\n\"],[-1,1336,\"敢\"],[-1,1369,\"\\n\"],[1,1380,\"喝\"],[1,1759,\"下\"],[-1,1759,\"\\n\"]],[1761,1761],[1336,1336]]],[1572795304144,[\"x@x.local\",[[1,1857,\"我不知道你记不记得。\"]],[1857,1857],[1867,1867]]],[1572795324625,[\"x@x.local\",[[-1,1846,\"依稀\"]],[1848,1848],[1846,1846]]],[1572795327038,[\"x@x.local\",[[1,1867,\"\\n\"]],[1865,1865],[1866,1866]]],[1572795343422,[\"x@x.local\",[[1,1866,\"你去过的地方，遇见的事情，从前过去未来。\"]],[1866,1866],[1886,1886]]],[1572795419907,[null,[[-1,1336,\"\\n\"],[1,1337,\"敢\"],[1,1369,\"\\n\"],[-1,1379,\"喝\"],[-1,1759,\"下\"],[1,1760,\"\\n\"],[1,1887,\"\\n\"]],[1336,1336],[1888,1888]]],[1572795419907,[null,[[1,1336,\"\\n\"],[-1,1336,\"敢\"],[-1,1369,\"\\n\"],[1,1380,\"喝\"],[1,1759,\"下\"],[-1,1759,\"\\n\"],[-1,1887,\"\\n\"]],[1888,1888],[1336,1336]]],[1572795371170,[\"x@x.local\",[[-1,1339,\"我不太清楚为什么长大了顾虑多了，\\n少了这份本来就有的勇气呵。\"]],[1339,1369],[1339,1339]]],[1572795371515,[\"x@x.local\",[[-1,1339,\"\\n\"]],[1339,1339],[1338,1338]]],[1572795372041,[\"x@x.local\",[[-1,1337,\"，\"]],[1338,1338],[1337,1337]]],[1572795372972,[\"x@x.local\",[[1,1337,\"。\"]],[1337,1337],[1338,1338]]],[1572795374599,[\"x@x.local\",[[-1,1331,\"这不敢那不敢。\"]],[1338,1338],[1331,1331]]],[1572795374890,[\"x@x.local\",[[-1,1331,\"\\n\"]],[1331,1331],[1330,1330]]],[1572795375746,[\"x@x.local\",[[1,1331,\"\\n\"]],[1330,1330],[1331,1331]]],[1572795382961,[\"x@x.local\",[[-1,1340,\"啊\"]],[1341,1341],[1340,1340]]],[1572795479924,[null,[[1,1332,\"人\"],[-1,1339,\"啊喝\"],[1,1341,\"？\"],[-1,1720,\"下\"],[1,1721,\"\\n\"],[1,1848,\"\\n\"]],[1332,1332],[1849,1849]]],[1572795479924,[null,[[-1,1332,\"人\"],[1,1340,\"啊喝\"],[-1,1340,\"？\"],[1,1720,\"下\"],[-1,1720,\"\\n\"],[-1,1848,\"\\n\"]],[1849,1849],[1332,1332]]],[1572795434171,[\"x@x.local\",[[-1,1571,\"着\"]],[1572,1572],[1571,1571]]],[1572795434698,[\"x@x.local\",[[1,1571,\"的\"]],[1571,1571],[1572,1572]]],[1572795438866,[\"x@x.local\",[[-1,1583,\"负责\"]],[1585,1585],[1583,1583]]],[1572795460481,[\"x@x.local\",[[-1,1679,\"，这就很好\"]],[1684,1684],[1679,1679]]],[1572795477041,[\"x@x.local\",[[-1,1687,\"但\"]],[1688,1688],[1687,1687]]],[1572795539912,[null,[[1,1332,\"人\"],[-1,1339,\"啊喝\"],[1,1341,\"？\"],[-1,1712,\"下\"],[1,1713,\"\\n\"],[1,1840,\"\\n\"]],[1332,1332],[1841,1841]]],[1572795539912,[null,[[-1,1332,\"人\"],[1,1340,\"啊喝\"],[-1,1340,\"？\"],[1,1712,\"下\"],[-1,1712,\"\\n\"],[-1,1840,\"\\n\"]],[1841,1841],[1332,1332]]],[1572795487076,[\"x@x.local\",[[1,1720,\"就\"]],[1720,1720],[1721,1721]]],[1572795497083,[\"x@x.local\",[[1,1756,\"\\n\"]],[1755,1755],[1756,1756]]],[1572795517913,[\"x@x.local\",[[-1,1834,\"从前过去未来。\"]],[1841,1841],[1834,1834]]],[1572795520799,[\"x@x.local\",[[1,1834,\"我通透\"]],[1834,1834],[1837,1837]]],[1572795521218,[\"x@x.local\",[[-1,1836,\"透\"]],[1837,1837],[1836,1836]]],[1572795523512,[\"x@x.local\",[[1,1836,\"同\"]],[1836,1836],[1837,1837]]],[1572795523918,[\"x@x.local\",[[-1,1836,\"同\"]],[1837,1837],[1836,1836]]],[1572795529607,[\"x@x.local\",[[1,1836,\"通有印象。\"]],[1836,1836],[1841,1841]]],[1572795529948,[\"x@x.local\",[[1,1843,\"\\n\"]],[1841,1841],[1842,1842]]],[1572795533338,[\"x@x.local\",[[-1,1843,\"\\n\"]],[1843,1843],[1842,1842]]],[1572795599919,[null,[[1,1332,\"人\"],[-1,1339,\"啊喝\"],[1,1341,\"？\"],[-1,1712,\"下\"],[1,1713,\"\\n\"]],[1332,1332],[1714,1714]]],[1572795599919,[null,[[-1,1332,\"人\"],[1,1340,\"啊喝\"],[-1,1340,\"？\"],[1,1712,\"下\"],[-1,1712,\"\\n\"]],[1714,1714],[1332,1332]]],[1572795559408,[\"x@x.local\",[[-1,1842,\"\\n\"],[1,1843,\"我\"]],[1842,1842],[1843,1843]]],[1572795565797,[\"x@x.local\",[[1,1843,\"二十几岁傻了吧唧，你不也是\"]],[1843,1843],[1856,1856]]],[1572795568288,[\"x@x.local\",[[-1,1843,\"二十几岁傻了吧唧，你不也是\"]],[1856,1856],[1843,1843]]],[1572795568483,[\"x@x.local\",[[-1,1842,\"我\"],[1,1843,\"\\n\"]],[1843,1843],[1842,1842]]],[1572795659927,[null,[[1,1332,\"人\"],[-1,1339,\"啊喝\"],[1,1341,\"？\"],[-1,1712,\"下\"],[1,1713,\"\\n\"]],[1332,1332],[1714,1714]]],[1572795659927,[null,[[-1,1332,\"人\"],[1,1340,\"啊喝\"],[-1,1340,\"？\"],[1,1712,\"下\"],[-1,1712,\"\\n\"]],[1714,1714],[1332,1332]]],[1572795620521,[\"x@x.local\",[[1,1797,\"所有的\"]],[1797,1797],[1800,1800]]],[1572795623459,[\"x@x.local\",[[-1,1803,\"是\"]],[1804,1804],[1803,1803]]],[1572795635819,[\"x@x.local\",[[-1,1837,\"通通\"]],[1839,1839],[1837,1837]]],[1572795637256,[\"x@x.local\",[[1,1837,\"斗鱼\"]],[1837,1837],[1839,1839]]],[1572795637769,[\"x@x.local\",[[-1,1837,\"斗鱼\"]],[1839,1839],[1837,1837]]],[1572795638700,[\"x@x.local\",[[1,1837,\"都\"]],[1837,1837],[1838,1838]]],[1572795644098,[\"x@x.local\",[[-1,1843,\"\\n\"],[1,1844,\"我\"]],[1843,1843],[1844,1844]]],[1572795653321,[\"x@x.local\",[[1,1844,\"不会当李大仁那种傻逼，心理\"]],[1844,1844],[1857,1857]]],[1572795653805,[\"x@x.local\",[[-1,1856,\"理\"]],[1857,1857],[1856,1856]]],[1572795657678,[\"x@x.local\",[[1,1856,\"里装个人，\"]],[1856,1856],[1861,1861]]],[1572795719932,[null,[[1,1332,\"人\"],[-1,1339,\"啊喝\"],[1,1341,\"？\"],[-1,1712,\"下\"],[1,1713,\"\\n\"]],[1332,1332],[1714,1714]]],[1572795719932,[null,[[-1,1332,\"人\"],[1,1340,\"啊喝\"],[-1,1340,\"？\"],[1,1712,\"下\"],[-1,1712,\"\\n\"]],[1714,1714],[1332,1332]]],[1572795663331,[\"x@x.local\",[[1,1861,\"表演自己多申请\"]],[1861,1861],[1868,1868]]],[1572795663929,[\"x@x.local\",[[-1,1866,\"申请\"]],[1868,1868],[1866,1866]]],[1572795671486,[\"x@x.local\",[[1,1866,\"深情，还要考\"]],[1866,1866],[1872,1872]]],[1572795671925,[\"x@x.local\",[[-1,1871,\"考\"]],[1872,1872],[1871,1871]]],[1572795673110,[\"x@x.local\",[[1,1871,\"靠\"]],[1871,1871],[1872,1872]]],[1572795681585,[\"x@x.local\",[[-1,1852,\"傻逼\"]],[1854,1854],[1852,1852]]],[1572795682455,[\"x@x.local\",[[1,1852,\"人\"]],[1852,1852],[1853,1853]]],[1572795688680,[\"x@x.local\",[[-1,1868,\"还要靠\"]],[1871,1871],[1868,1868]]],[1572795691650,[\"x@x.local\",[[-1,1859,\"，\"]],[1860,1860],[1859,1859]]],[1572795696888,[\"x@x.local\",[[1,1867,\"还谈着恋爱，\"]],[1867,1867],[1873,1873]]],[1572795698640,[\"x@x.local\",[[1,1873,\"\\n\\n\"]],[1873,1873],[1874,1874]]],[1572795700410,[\"x@x.local\",[[-1,1874,\"\\n\"],[1,1875,\"这么\"]],[1874,1874],[1876,1876]]],[1572795713029,[\"x@x.local\",[[1,1876,\"不负责任的人，不是渣男是什么。\"]],[1876,1876],[1891,1891]]],[1572795779936,[null,[[1,1332,\"人\"],[-1,1339,\"啊喝\"],[1,1341,\"？\"],[-1,1712,\"下\"],[1,1713,\"\\n\"]],[1332,1332],[1714,1714]]],[1572795779936,[null,[[-1,1332,\"人\"],[1,1340,\"啊喝\"],[-1,1340,\"？\"],[1,1712,\"下\"],[-1,1712,\"\\n\"]],[1714,1714],[1332,1332]]],[1572795731529,[\"x@x.local\",[[-1,1867,\"还谈着恋爱，\"]],[1867,1873],[1867,1867]]],[1572795733908,[\"x@x.local\",[[1,1854,\"还谈着恋爱，\"]],[1854,1854],[1860,1860]]],[1572795737983,[\"x@x.local\",[[1,1862,\"还\"]],[1862,1862],[1863,1863]]],[1572795738571,[\"x@x.local\",[[-1,1862,\"还\"]],[1863,1863],[1862,1862]]],[1572795741631,[\"x@x.local\",[[-1,1863,\"个\"]],[1864,1864],[1863,1863]]],[1572795743987,[\"x@x.local\",[[1,1863,\"着别\"]],[1863,1863],[1865,1865]]],[1572795750946,[\"x@x.local\",[[1,1892,\"\\n\\n\"]],[1892,1892],[1893,1893]]],[1572795839934,[null,[[1,1332,\"人\"],[-1,1339,\"啊喝\"],[1,1341,\"？\"],[-1,1712,\"下\"],[1,1713,\"\\n\"]],[1332,1332],[1714,1714]]],[1572795839934,[null,[[-1,1332,\"人\"],[1,1340,\"啊喝\"],[-1,1340,\"？\"],[1,1712,\"下\"],[-1,1712,\"\\n\"]],[1714,1714],[1332,1332]]],[1572795800986,[\"x@x.local\",[[-1,1893,\"\\n\"],[1,1894,\"你\"]],[1893,1893],[1894,1894]]],[1572795822755,[\"x@x.local\",[[1,1894,\"每次出现都在你受伤或者恢复的时候，哪次出现是带着笑意的，\"]],[1894,1894],[1922,1922]]],[1572795826382,[\"x@x.local\",[[1,1922,\"\\n\\n\"]],[1922,1922],[1923,1923]]],[1572795899960,[null,[[1,1332,\"人\"],[-1,1339,\"啊喝\"],[1,1341,\"？\"],[-1,1712,\"下\"],[1,1713,\"\\n\"]],[1332,1332],[1714,1714]]],[1572795899960,[null,[[-1,1332,\"人\"],[1,1340,\"啊喝\"],[-1,1340,\"？\"],[1,1712,\"下\"],[-1,1712,\"\\n\"]],[1714,1714],[1332,1332]]],[1572795840783,[\"x@x.local\",[[-1,1923,\"\\n\"],[1,1924,\"或者\"]],[1923,1923],[1925,1925]]],[1572795842822,[\"x@x.local\",[[-1,1924,\"者\"]],[1925,1925],[1924,1924]]],[1572795842987,[\"x@x.local\",[[-1,1923,\"或\"],[1,1924,\"\\n\"]],[1924,1924],[1923,1923]]],[1572795844834,[\"x@x.local\",[[-1,1923,\"\\n\"],[1,1924,\"我\"]],[1923,1923],[1924,1924]]],[1572795851930,[\"x@x.local\",[[1,1924,\"会很开心，一直很开心。\"]],[1924,1924],[1935,1935]]],[1572795853683,[\"x@x.local\",[[1,1935,\"\\n\\n\"]],[1935,1935],[1936,1936]]],[1572795854612,[\"x@x.local\",[[-1,1936,\"\\n\"],[1,1937,\"但是\"]],[1936,1936],[1938,1938]]],[1572795855180,[\"x@x.local\",[[1,1938,\"你\"]],[1938,1938],[1939,1939]]],[1572795857687,[\"x@x.local\",[[-1,1937,\"是你\"]],[1939,1939],[1937,1937]]],[1572795857867,[\"x@x.local\",[[-1,1936,\"但\"],[1,1937,\"\\n\"]],[1937,1937],[1936,1936]]],[1572795861345,[\"x@x.local\",[[-1,1936,\"\\n\"],[1,1937,\"我\"]],[1936,1936],[1937,1937]]],[1572795864530,[\"x@x.local\",[[1,1937,\"能为你做的，\"]],[1937,1937],[1943,1943]]],[1572795884073,[\"x@x.local\",[[-1,1901,\"受伤或者恢复\"]],[1907,1907],[1901,1901]]],[1572795885513,[\"x@x.local\",[[1,1901,\"特别\"]],[1901,1901],[1903,1903]]],[1572795899343,[\"x@x.local\",[[1,1939,\"替你\"]],[1939,1939],[1941,1941]]],[1572795959953,[null,[[1,1332,\"人\"],[-1,1339,\"啊喝\"],[1,1341,\"？\"],[-1,1712,\"下\"],[1,1713,\"\\n\"]],[1332,1332],[1714,1714]]],[1572795959953,[null,[[-1,1332,\"人\"],[1,1340,\"啊喝\"],[-1,1340,\"？\"],[1,1712,\"下\"],[-1,1712,\"\\n\"]],[1714,1714],[1332,1332]]],[1572795905670,[\"x@x.local\",[[1,1941,\"开心的事情，真的\"]],[1941,1941],[1949,1949]]],[1572795907848,[\"x@x.local\",[[-1,1946,\"，真的\"]],[1949,1949],[1946,1946]]],[1572795908180,[\"x@x.local\",[[1,1946,\"。\"]],[1946,1946],[1947,1947]]],[1572795908823,[\"x@x.local\",[[-1,1946,\"。\"]],[1947,1947],[1946,1946]]],[1572795909232,[\"x@x.local\",[[1,1946,\"，\"]],[1946,1946],[1947,1947]]],[1572795912078,[\"x@x.local\",[[-1,1943,\"的事情，\"]],[1947,1947],[1943,1943]]],[1572795921832,[\"x@x.local\",[[1,1943,\"这件事，足够我这辈子去回忆了。\"]],[1943,1943],[1958,1958]]],[1572795924021,[\"x@x.local\",[[1,1958,\"\\n\\n\"]],[1958,1958],[1959,1959]]],[1572795951049,[\"x@x.local\",[[-1,1854,\"还\"]],[1855,1855],[1854,1854]]],[1572796019960,[null,[[1,1332,\"人\"],[-1,1339,\"啊喝\"],[1,1341,\"？\"],[-1,1712,\"下\"],[1,1713,\"\\n\"]],[1332,1332],[1714,1714]]],[1572796019960,[null,[[-1,1332,\"人\"],[1,1340,\"啊喝\"],[-1,1340,\"？\"],[1,1712,\"下\"],[-1,1712,\"\\n\"]],[1714,1714],[1332,1332]]],[1572795978349,[\"x@x.local\",[[-1,1923,\"，一直很开心\"]],[1929,1929],[1923,1923]]],[1572795990244,[\"x@x.local\",[[-1,1952,\"\\n\"],[1,1953,\"但愿\"]],[1952,1952],[1954,1954]]],[1572795997478,[\"x@x.local\",[[1,1954,\"好梦长久睡眠~\"]],[1954,1954],[1961,1961]]],[1572796001074,[\"x@x.local\",[[-1,1954,\"好梦长久睡眠~\"]],[1961,1961],[1954,1954]]],[1572796017159,[\"x@x.local\",[[1,1954,\"好梦睡长久。\"]],[1954,1954],[1960,1960]]],[1572796019209,[\"x@x.local\",[[-1,1957,\"长久。\"]],[1960,1960],[1957,1957]]],[1572796030820,[null,[[1,1332,\"人\"],[-1,1339,\"啊喝\"],[1,1341,\"？\"],[-1,1712,\"下\"],[1,1713,\"\\n\"]],[1332,1332],[1714,1714]]],[1572796030820,[null,[[-1,1332,\"人\"],[1,1340,\"啊喝\"],[-1,1340,\"？\"],[1,1712,\"下\"],[-1,1712,\"\\n\"]],[1714,1714],[1332,1332]]],[1572796023129,[\"x@x.local\",[[1,1957,\"得安稳。\"]],[1957,1957],[1961,1961]]],[1572796024790,[\"x@x.local\",[[1,1961,\"\\n\\n\"]],[1961,1961],[1962,1962]]],[1572796025889,[\"x@x.local\",[[-1,1962,\"\\n\"],[1,1963,\"(\"]],[1962,1962],[1963,1963]]],[1572796026128,[\"x@x.local\",[[1,1963,\")\"]],[1963,1963],[1964,1964]]],[1572796028372,[\"x@x.local\",[[1,1963,\"完\"]],[1963,1963],[1964,1964]]],[1572796090838,[null,[[1,1332,\"人\"],[-1,1339,\"啊喝\"],[1,1341,\"？\"],[-1,1712,\"下\"],[1,1713,\"\\n\"]],[1332,1332],[1714,1714]]],[1572796090838,[null,[[-1,1332,\"人\"],[1,1340,\"啊喝\"],[-1,1340,\"？\"],[1,1712,\"下\"],[-1,1712,\"\\n\"]],[1714,1714],[1332,1332]]],[1572796079181,[\"x@x.local\",[[-1,544,\"子\"]],[545,545],[544,544]]],[1572796080051,[\"x@x.local\",[[-1,545,\"子\"]],[546,546],[545,545]]],[1572796150845,[null,[[1,1330,\"人\"],[-1,1337,\"啊喝\"],[1,1339,\"？\"],[-1,1710,\"下\"],[1,1711,\"\\n\"]],[1330,1330],[1712,1712]]],[1572796150845,[null,[[-1,1330,\"人\"],[1,1338,\"啊喝\"],[-1,1338,\"？\"],[1,1710,\"下\"],[-1,1710,\"\\n\"]],[1712,1712],[1330,1330]]],[1572796099218,[\"x@x.local\",[[1,565,\"热\"]],[565,565],[566,566]]],[1572796146141,[\"x@x.local\",[[-1,784,\"锻炼\"]],[786,786],[784,784]]],[1572796147775,[\"x@x.local\",[[1,784,\"散步\"]],[784,784],[786,786]]],[1572796450859,[null,[[1,1331,\"人\"],[-1,1338,\"啊喝\"],[1,1340,\"？\"],[-1,1711,\"下\"],[1,1712,\"\\n\"]],[1331,1331],[1713,1713]]],[1572796450859,[null,[[-1,1331,\"人\"],[1,1339,\"啊喝\"],[-1,1339,\"？\"],[1,1711,\"下\"],[-1,1711,\"\\n\"]],[1713,1713],[1331,1331]]],[1572796396136,[\"x@x.local\",[[1,1891,\"\\n\"]],[1890,1890],[1891,1891]]],[1572796413871,[\"x@x.local\",[[1,1891,\"有爱就去追，不要留遗憾。\"]],[1891,1891],[1903,1903]]],[1572796416041,[\"x@x.local\",[[1,1904,\"\\n\"]],[1903,1903],[1904,1904]]],[1572796421025,[\"x@x.local\",[[1,1904,\"任何事都是如此。\"]],[1904,1904],[1912,1912]]],[1572796439441,[\"x@x.local\",[[-1,1964,\"这辈子去\"]],[1968,1968],[1964,1964]]],[1572796475041,[null,[[1,1331,\"人\"],[-1,1338,\"啊喝\"],[1,1340,\"？\"],[-1,1711,\"下\"],[1,1712,\"\\n\"]],[1331,1331],[1713,1713]]],[1572796475041,[null,[[-1,1331,\"人\"],[1,1339,\"啊喝\"],[-1,1339,\"？\"],[1,1711,\"下\"],[-1,1711,\"\\n\"]],[1713,1713],[1331,1331]]],[1572796454641,[\"x@x.local\",[[1,1973,\"，\"]],[1973,1973],[1974,1974]]],[1572796462606,[\"x@x.local\",[[1,1961,\"或者别的，\"]],[1961,1961],[1966,1966]]],[1572796470387,[\"x@x.local\",[[1,1988,\"\\n\\n\"]],[1988,1988],[1989,1989]]],[1572796472336,[\"x@x.local\",[[-1,1989,\"\\n\"]],[1989,1989],[1988,1988]]]],null,\"x@x.local\"]]}"},{"title":"夜","url":"%2F2019%2F11%2F03%2F%E5%A4%9C%2F","content":"\n有些年很反常，比如今年秋天就燥得很。\n除了跑步，一般夜里极少出去。\n偶尔觉得这样太烦，就去散散步，逛到附近商场买罐啤酒边走边喝。\n附近的园子是这片住宅区仅有的一大片绿。\n每天早上路过都能看到锻炼的，还有负责照看花花草草的上了年纪的人。\n偶尔一次，踩到刚种下的草皮，没走几步被大妈隔着老远说不能走这边。\n现在，叶落满地。\n银杏叶埋在还算绿的草地上，风一吹挺好看。\n几颗梧桐也变的略微光突。周围的碎叶则被堆在了一起。\n就怕哪个人随手丢个烟头。\n10月印象里下的雨不多，园子的人工湖被拿来灌溉周围的植被。抽干了一些地方。\n偶见湖底的烂泥里不少贝类，也有人会围着水位低的地方下几个套，或者拿着杆子钓点什么上来。\n夜里这儿，广场舞四场。路边立起路灯后，晚上出来的人多起来。\n夜跑的人，就喜欢从人多的地方钻，大概是因为「你快看你快看，我从你身边跑过去了耶」的天真想法在作祟，为什么知道？因为我夜跑。\n这么晚了也看不清对面人的脸，这么个轮廓，你以为是好看的，其实只不过是减了很多曝光的剪影，天真！\n湖中间是个卖书的图书馆。\n好像这几年光卖书不行，半卖半提供借阅。第一层隔了一大间，放了不少桌椅。靠近湖心的地方是露天平台。还有自动贩卖热咖啡的机器和一些零碎的食品。作为常客，通常揣着个笔记本找个地儿，随便站着或坐着就开始看资料。看完或者饿了就回家。\n\n大概从去年10月开始的规律锻炼。\n去年7月整整一个月，晚上靠游戏度日，ARPG游戏--尼尔机械纪元。\n8月9月已毫无记忆--严重睡眠不足。\n中间穿插一些零碎的责骂，因为某些状态在父母看来是很痛心的。\n因为拒绝帮助拒绝交流。\n很多负面情绪。但都过来了，原因无非是重新一点点拾起以前的东西，或者当感觉到心情不好时，就去跑步去散步啊，什么乱七八糟的想法，一通下来累的够呛哪有时间去想，睡眠够了，精神状态自然会好。\n「情绪和身体是相互影响的。」\n\n作为一个普通人，有一些事情是没法做出太大改变的，比如家庭背景。\n普通人并不代表无能。\n并不是说一些通用的「价值观」就一定任何场合下都正确。\n那样会使人变得俗气，因为为了迎合。\n独立思考是件不太容易的事。\n既然选择了做什么，就抓紧时间。\n这不是考试，前一周找老师画画重点，通宵达旦攀上知识顶峰，考完立马回到历史最低水平。\n今天开始比明天开始离目标近点。\n无限拖延带来的伤害，不是由于你不够聪明不够勤奋，而是因为时间不够。\n认知的提升也不是局限在一方面，有些东西速成了就只是个目录，真正的东西需要时间去填补上对它认识上的不足。\n永远没有准备好的时候。\n所以加油啊~你。\n\n作为祖上三代喝酒成性的，很抱歉从小看了太多酒后的傻事。\n我这辈子对酒精都不怎么有好感。即便在社交场合。\n上面散步喝啤酒，啤酒算酒吗？\n所以酒精这种无聊的东西，微微喝醉的状态就很好。\n既壮了怂人胆，又不至于喝太醉犯傻。\n我也不喜欢喝多了的人，然后跟我说「掏心掏肺」的话，\n平时怎么不说？喝多了说的我当真了你反悔了，当我什么？\n最主要每次都被骂，卧槽我这么招人恨？\n有啥大不了的，不能当我面说，我又不生气。\n\n人这辈子为了什么？\n我这辈子就希望有个人能理解我，\n这种理解是我吐露内心世界，\n而不被下任何判定。\n「你的存在本身就能给人带来喜悦和感谢。」\n这是我对身边人的态度。\n也是对你的。\n你有目标就去实现啊，给你加的微信标签就是「一直喜欢你 希望你幸福啊」。\n无非想不想，喜欢不喜欢。勇气呢？\n我而立之年都过了，我也觉得自己没做好什么事。\n我给自己5年时间，把手头上的事情做到极致，\n不会再去考虑什么能不能的问题。\n也不会去考量别人怎么看，都没必要。\n生活的本质是活给自己看的，为自己活的，\n和家人一起，对自己对家负责。\n\n刻意的去炫耀，是虚张声势。\n刻意的表达出「blingbling」的曾经没有的东西，是不成熟。\n刻意的学习，哇这是件好事。\n你获得什么不是为了炫耀，是为了自己为了一些人为了一些目标。\n玩也是目标，在没有资本的前提下，那是浪费，流淌的时间不复存在。\n逃是本能，面对就是勇气。\n破罐子再破，我也想你捡起来看看，它身上本来就有足够的勇气。\n\n我不记得是不是16年还是17年，那本秘密花园绘本还在吗？\n我也不记得你曾经说过的所有的话，但记得那些重要的。\n我不知道你记不记得。\n你去过的地方，遇见的事情，我都有印象。\n我不会当李大仁那种人，谈着恋爱，心里装着别人表演自己多深情，\n这么不负责任的人，不是渣男是什么。\n有爱就去追，不要留遗憾。\n任何事都是如此。\n你每次出现都在你特别的时候，哪次出现是带着笑意的，\n我会很开心。\n我能为你做的，替你开心这件事，或者别的，足够我回忆了。\n但愿好梦，睡得安稳。\n(完)\n","tags":["日常"]},{"title":"Bellman-Ford算法","url":"%2F2019%2F10%2F15%2FBellman-Ford%E7%AE%97%E6%B3%95%2F","content":"\n","tags":["算法"]},{"title":"无环加权有向图中的最短路径&&最长路径","url":"%2F2019%2F10%2F15%2F%E6%97%A0%E7%8E%AF%E5%8A%A0%E6%9D%83%E6%9C%89%E5%90%91%E5%9B%BE%E4%B8%AD%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95%2F","content":"\n如何得到无环加权有向图的最短路径？解决办法是用之前学习过的拓扑排序和对边的放松技术。\n理论依据是按照拓扑排序的顺序将图中的顶点加入到最短路径树中，因为拓扑排序的顶点只有指向前面顶点的边，而没有别的顶点指向它，若对顶点进行放松，则就会得到最小权重的边。\n下面是其Java实现：\n\n```java\n// 无环加权有向图中的最短路径算法\nimport java.util.Stack;\n\npublic class AcyclicSP {\n    private double[] distTo;\n    private DirectedEdge[] edgeTo;\n\n    public AcyclicSP(EdgeWeightedDigraph G, int s) {\n        distTo = new double[G.V()];\n        edgeTo = new DirectedEdge[G.V()];\n\n        validateVertex(s);\n\n        for (int v = 0; v < G.V(); v++) {\n            distTo[v] = Double.POSITIVE_INFINITY;\n        }\n        distTo[s] = 0;\n\n        Topological topological = new Topological(G);\n        if (!topological.hasOrder())\n            throw new IllegalArgumentException(\"Digraph is not acyclic\");\n        for (int v : topological.order()) {\n            for (DirectedEdge e : G.adj(v)) {\n                relax(e);\n            }\n        }\n    }\n\n    private void relax(DirectedEdge e) {\n        int v = e.from(), w = e.to();\n        if (distTo[w] > distTo[v] + e.weight()) {\n            distTo[w] = distTo[v] + e.weight();\n            edgeTo[w] = e;\n        }\n    }\n\n    public double distTo(int v) {\n        validateVertex(v);\n        return distTo(v);\n    }\n\n    public boolean hasPathTo(int v) {\n        validateVertex(v);\n        return distTo[v] < Double.POSITIVE_INFINITY;\n    }\n\n    public Iterable<DirectedEdge> pathTo(int v) {\n        validateVertex(v);\n        if (!hasPathTo(v))\n            return null;\n        Stack<DirectedEdge> path = new Stack<DirectedEdge>();\n        for (DirectedEdge e = edgeTo[v]; e != null; e = edgeTo[e.from()]) {\n            path.push(e);\n        }\n        return path;\n    }\n\n    private void validateVertex(int v) {\n        int V = distTo.length;\n        if (v < 0 || v >= V)\n            throw new IllegalArgumentException(\"vertex \" + v + \" is not between 0 and \" + (V - 1));\n    }\n}\n```\n\n无环加权有向图中的最长路径是解决并行任务调度问题的关键。\n其实现的原理是：将一幅无环加权有向图复制得到副本，将副本的每一条边的权重变为其相反数，然后利用求最短路径的算法找到副本中最短的路径，该最短路径即为原图中的最长路径。\n而Algorithms中的实现，并没有使用以上的原理，仅仅只是改了改AcyclicSP算法中的顶点的初始值。\n下面是最长路径的Java实现\n\n```java\n// 无环加权有向图中最长路径问题\n// 思路是：将图复制得到副本，然后将副本中的边的权重变成原来的相反数，\n// 计算副本中的最短路径问题，然后要取得原图中的最长路径问题，\n// 只需将副本中的最短路径上的边的权重变为相反数即可。\n// 这里的实现：是将除了起点以外的其他顶点到起点的距离初始值为无限小，当遇到比初始值大的边，则取其权重和边\nimport java.util.Stack;\n\npublic class AcyclicLP {\n    private double[] distTo;\n    private DirectedEdge[] edgeTo;\n\n    public AcyclicLP(EdgeWeightedDigraph G, int s) {\n        distTo = new double[G.V()];\n        edgeTo = new DirectedEdge[G.V()];\n\n        validateVertex(s);\n        for (int v = 0; v < G.V(); v++) {\n            distTo[v] = Double.NEGATIVE_INFINITY;//初始值改动\n        }\n        distTo[s] = 0.0;\n\n        Topological topological = new Topological(G);\n        if (!topological.hasOrder()) {\n            throw new IllegalArgumentException(\"Digraph is not acyclic.\");\n        }\n        for (int v : topological.order()) {\n            for (DirectedEdge e : G.adj(v)) {\n                relax(e);\n            }\n        }\n    }\n\n    private void relax(DirectedEdge e) {\n        int v = e.from(), w = e.to();\n        if (distTo[w] < distTo[v] + e.weight()) {\n            distTo[w] = distTo[v] + e.weight();\n            edgeTo[w] = e;\n        }\n    }\n\n    public double distTo(int v) {\n        validateVertex(v);\n        return distTo(v);\n    }\n\n    public boolean hasPathTo(int v) {\n        validateVertex(v);\n        return distTo[v] > Double.NEGATIVE_INFINITY;\n    }\n\n    public Iterable<DirectedEdge> pathTo(int v) {\n        validateVertex(v);\n        if (!hasPathTo(v))\n            return null;\n        Stack<DirectedEdge> path = new Stack<DirectedEdge>();\n        for (DirectedEdge e = edgeTo[v]; e != null; e = edgeTo[e.from()]) {\n            path.push(e);\n        }\n        return path;\n    }\n\n    private void validateVertex(int v) {\n        int V = distTo.length;\n        if (v < 0 || v >= V)\n            throw new IllegalArgumentException(\"vertex \" + v + \" is not between 0 and \" + (V - 1));\n    }\n}\n```\n\n\n","tags":["算法"]},{"title":"最短路径&Dijkstra算法","url":"%2F2019%2F10%2F15%2F%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84-Dijkstra%E7%AE%97%E6%B3%95%2F","content":"\n在无向图中，单点之间如果存在路径可达，求其中边数最少的路径，采用的算法是广度优先搜索。\n在有向图中，单点可达性和最短路径问题与无向图中的情况相似。\n而在加权无向图中，主要考虑的问题是最小生成树。最小生成树中已经包含单点可达性和最短路径问题。\n现在研究的加权有向图，则要关注的问题是最短路径问题。\n\n首先加权有向图是在有向图的基础上，赋予边以权重构成的图。\n最短路径表示的是在加权有向图中的顶点s到达顶点w点的一条路径，这条路径的权重最小。\n这条路径具有以下的性质：\n路径是有向的；\n权重不一定等价于距离；\n并不是所有的顶点都可达；\n负权重问题会是问题变得更复杂；\n最短路径一般是简单的；\n最短路径不是唯一的；\n可能会存在平行边和环。\n某个顶点的所有可达顶点的最短路径，构成了这个顶点的最短路径树。\n\n下面是加权有向边和加权有向图的数据结构。\n\n```java\n// 加权有向边\npublic class DirectedEdge {\n    private final int v;\n    private final int w;\n    private final double weight;\n\n    public DirectedEdge(int v, int w, double weight) {\n        if (v < 0)\n            throw new IllegalArgumentException(\"Vertex names must be nonnegative integers\");\n        if (w < 0)\n            throw new IllegalArgumentException(\"Vertex names must be nonnegative integers\");\n        if (Double.isNaN(weight))\n            throw new IllegalArgumentException(\"Weight is NaN\");\n        this.v = v;\n        this.w = w;\n        this.weight = weight;\n    }\n\n    public int from(){\n        return v;\n    }\n\n    public int to(){\n        return w;\n    }\n\n    public double weight(){\n        return weight;\n    }\n\n    public String toString(){\n        return v+ \"->\"+w+\" \"+String.format(\"%5.2f\", weight);\n    }\n}\n```\n\n```java\n// 加权有向图\nimport java.util.Stack;\npublic class EdgeWeightedDigraph {\n    private static final String NEWLINE = System.getProperty(\"line.separator\");\n\n    private final int V;\n    private int E;\n    private Bag<DirectedEdge>[] adj;\n    private int[] indegree;\n\n    public EdgeWeightedDigraph(int V) {\n        if (V < 0)\n            throw new IllegalArgumentException(\"Number of vertices in a Digraph must be nonnegative\");\n        this.V = V;\n        this.E = 0;\n        this.indegree = new int[V];\n        adj = (Bag<DirectedEdge>[]) new Bag[V];\n        for (int v = 0; v < V; v++) {\n            adj[v] = new Bag<DirectedEdge>();\n        }\n    }\n\n    public EdgeWeightedDigraph(int V, int E) {\n        this(V);\n        if (E < 0)\n            throw new IllegalArgumentException(\"Number of edges in a Digraph must be nonnegative\");\n        for (int i = 0; i < E; i++) {\n            int v = StdRandom.uniform(V);\n            int w = StdRandom.uniform(V);\n            double weight = 0.01*StdRandom.uniform(100);\n            DirectedEdge e = new DirectedEdge(v, w, weight);\n            addEdge(e);\n        }\n    }\n\n    public EdgeWeightedDigraph(In in){\n        this(in.readInt());\n        int E = in.readInt();\n        if (E < 0) throw new IllegalArgumentException(\"Number of edges must be nonnegative\");\n        for(int i=0;i<E;i++){\n            int v = in.readInt();\n            int w=in.readInt();\n            valiadteVertex(v);\n            valiadteVertex(w);\n            double weight = in.readDouble();\n            addEdge(new DirectedEdge(v,w,weight));\n        }\n    }\n\n    public EdgeWeightedDigraph(EdgeWeightedDigraph G){\n        this(G.V());\n        this.E=G.E();\n        for(int v=0;v<G.V();v++)\n            this.indegree[v]=G.indegree(v);\n        for(int v=0;v<G.V();v++){\n            Stack<DirectedEdge> reverse = new Stack<DirectedEdge>();\n            for(DirectedEdge e:G.adj[v])\n                reverse.push(e);\n            for(DirectedEdge e:reverse)\n                adj[v].add(e);    \n        }\n    }\n\n    public int V(){\n        return V;\n    }\n\n    public int E(){\n        return E;\n    }\n    // 添加边\n    public void addEdge(DirectedEdge e){\n        int v = e.from();\n        int w=e.to();\n        valiadteVertex(v);\n        valiadteVertex(w);\n        adj[v].add(e);\n        indegree[w]++;\n        E++;\n    }\n\n    public void valiadteVertex(int v){\n        if(v<0||v>=V)\n            throw new IllegalArgumentException(\"vertex \" + v + \" is not between 0 and \" + (V-1));\n    }\n\n    public Iterable<DirectedEdge> adj(int v){\n        valiadteVertex(v);\n        return adj[v];\n    }\n    // 出度\n    public int outdegree(int v){\n        valiadteVertex(v);\n        return adj[v].size();\n    }\n    // 入度\n    public int indegree(int v){\n        valiadteVertex(v);\n        return indegree[v];\n    }\n    \n    public Iterable<DirectedEdge> edges(){\n        Bag<DirectedEdge> list = new Bag<DirectedEdge>();\n        for(int v=0;v<V;v++){\n            for(DirectedEdge e:adj[v]){\n                list.add(e);\n            }\n        }\n        return list;\n    }\n\n    public String toString(){\n        StringBuilder s = new StringBuilder();\n        s.append(V+\" \"+E+NEWLINE);\n        for(int v=0;v<V;v++){\n            s.append(v+\": \");\n            for(DirectedEdge e:adj[v])\n                s.append(e+\" \");\n            s.append(NEWLINE);\n        }\n        return s.toString();\n    }\n}\n```\n\n\n而最短路径的数据结构就比较简单了。\n最短路径中的边：一个以顶点为索引的DirectedEdge对象的父链接数组edgeTo[]，edgeTo[v]表示v到它父结点的边。\n最短路径的距离：一个由顶点为索引的distTo数组，distTo[v]表示起点到顶点v的距离。\n\n而要找到加权有向图中的最短路径，是基于一个叫「放松」的基本操作。\n一开始，我们假设加权有向图中的顶点到起点的距离：起点为0，其他顶点到起点的距离都是无限远的。\n并且我们将顶点到起点的路径存储在edgeTo中，而距离存储在distTo中，随着算法的进行，包括「放松」的操作，\n路径和距离信息都会得到更新。\n\n而所谓「放松」操作：\n假设有向图中的有三个点，分别是起点s，顶点v，顶点w。倘若s可以到达v，也可以到达w，\n那么distTo[w]即为s到w的距离，若v也可以到达w且v-w的边为e，\n放松v-w边：即检查s到w的最短路径，是否先从s到v，再由v到w，\n若不是，即distTo[v]+e.weight()>=distTo[w]，则称边e失效忽略这条边，\n若是，即distTo[v]+e.weight()<distTo[w]，则更新distTo[w]=distTo[v]+e.weight()。\n\n判断路径是否是最短路径的全局条件与放松一条边时所检测的局部条件是等价的。\n\nDijkstraSP算法的实现如下：\n构造方法中的索引优先队列会先插入打算计算最短路径的起点s，\n1.然后将优先队列中距离起点最短的顶点删除，\n2.再依次放松这个顶点发出的所有边，将其可达的顶点的相关信息存入distTo和edgeTo数组中，\n若该可达顶点不在优先队列中则将其加入，否则只更新相关信息。\n重复执行步骤 1, 2，直至优先队列为空。\n\nJava代码实现：\n\n```java\n// 有向图单点最短路径\nimport java.util.Stack;\n\npublic class DijkstraSP {\n    private double[] distTo;\n    private DirectedEdge[] edgeTo;\n    private IndexMinPQ<Double> pq;\n\n    public DijkstraSP(EdgeWeightedDigraph G, int s) {\n        for (DirectedEdge e : G.edges()) {// 不包含负权重边\n            if (e.weight() < 0)\n                throw new IllegalArgumentException(\"edge \" + e + \" has negative weight\");\n        }\n        distTo = new double[G.V()];\n        edgeTo = new DirectedEdge[G.V()];\n        \n        validateVertex(s);\n\n        for (int v = 0; v < G.V(); v++) {\n            distTo[v] = Double.POSITIVE_INFINITY;// 除起点外 图中其他的点距离起点的距离都是无限远\n        }\n        distTo[s] = 0;\n\n        pq = new IndexMinPQ<Double>(G.V());\n        pq.insert(s, distTo[s]);\n        while (!pq.isEmpty()) {\n            int v = pq.delMin();\n            for (DirectedEdge e : G.adj(v)) {\n                relax(e);// 对v的邻接表内的每条边都进行放松\n            }\n        }\n\n         assert check(G, s);\n    }\n\n    \n    private void relax(DirectedEdge e) {\n        int v = e.from(), w = e.to();\n        if (distTo[w] > distTo[v] + e.weight()) {// 若从起点s到w的距离大于从s-v-s路径的权重 则更新数据\n            distTo[w] = distTo[v] + e.weight();\n            edgeTo[w] = e;\n            if (pq.contains(w))// 若优先队列中已包含w顶点则修改s到w的distTo[]\n                pq.decreaseKey(w, distTo[w]);\n            else\n                pq.insert(w, distTo[w]);// 若不在优先队列中则添加进去\n        }\n    }\n\n    public double distTo(int v) {\n        validateVertex(v);\n        return distTo(v);\n    }\n\n    public boolean hasPathTo(int v) {\n        validateVertex(v);\n        return distTo[v] < Double.POSITIVE_INFINITY;\n    }\n\n    public Iterable<DirectedEdge> pathTo(int v) {\n        validateVertex(v);\n        if (!hasPathTo(v))\n            return null;\n        Stack<DirectedEdge> path = new Stack<DirectedEdge>();\n        for (DirectedEdge e = edgeTo[v]; e != null; e = edgeTo[e.from()]) {\n            path.push(e);\n        }\n        return path;\n    }\n\n    \n    private boolean check(EdgeWeightedDigraph G, int s) {\n\n        // 负权重边检查\n        for (DirectedEdge e : G.edges()) {\n            if (e.weight() < 0) {\n                System.err.println(\"negative edge weight detected\");\n                return false;\n            }\n        }\n\n        // check that distTo[v] and edgeTo[v] are consistent\n        if (distTo[s] != 0.0 || edgeTo[s] != null) {\n            System.err.println(\"distTo[s] and edgeTo[s] inconsistent\");\n            return false;\n        }\n        for (int v = 0; v < G.V(); v++) {\n            if (v == s) continue;\n            if (edgeTo[v] == null && distTo[v] != Double.POSITIVE_INFINITY) {\n                System.err.println(\"distTo[] and edgeTo[] inconsistent\");\n                return false;\n            }\n        }\n\n        // check that all edges e = v->w satisfy distTo[w] <= distTo[v] + e.weight()\n        for (int v = 0; v < G.V(); v++) {\n            for (DirectedEdge e : G.adj(v)) {\n                int w = e.to();\n                if (distTo[v] + e.weight() < distTo[w]) {\n                    System.err.println(\"edge \" + e + \" not relaxed\");\n                    return false;\n                }\n            }\n        }\n\n        // check that all edges e = v->w on SPT satisfy distTo[w] == distTo[v] + e.weight()\n        for (int w = 0; w < G.V(); w++) {\n            if (edgeTo[w] == null) continue;\n            DirectedEdge e = edgeTo[w];\n            int v = e.from();\n            if (w != e.to()) return false;\n            if (distTo[v] + e.weight() != distTo[w]) {\n                System.err.println(\"edge \" + e + \" on shortest path not tight\");\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private void validateVertex(int v){\n        int V =distTo.length;\n        if(v<0||v>=V){\n            throw new IllegalArgumentException(\"vertex \" + v + \" is not between 0 and \" + (V-1));\n        }\n    }\n}\n```\n","tags":["算法"]},{"title":"Kruskal算法","url":"%2F2019%2F10%2F15%2FKruskal%E7%AE%97%E6%B3%95%2F","content":"\n第二种计算最小生成树的算法是Kruskal算法。\n\n这个算法的主要思想是按照边的权重顺序处理它们，\n将边加入最小生成树中，并且新加入的边与已加入的边不会形成环，直至达到V-1条边结束。\n\n算法一开始会将图中所有的边加入到优先队列中，\n从中找到权重最小的边，然后将之加入到最小生成树中，\n在边不断的加入到最小生成树的过程中，可能会出现环，\nAglorithms中Kruskal算法的实现对此的处理方式是：通过一个UF类来判断即将加入最小生成树的边的两个顶点是否在同一个连通分量中。\n也就是说假如两个顶点已经在同一个连通分量中了，即两个顶点之间已经有边连接且在最小生成树中，此时即将加入的这条边本身已将这两个顶点连接在一起，若将它加入到最小生成树中，则构成了环。\nUF类本身很简单。\n其Java实现如下：\n整个类一开始初始化会将图中的每个顶点设置为单点树。\n类中函数包括：判断两点是否连接的、找出顶点所在连通分量(树)的、连接两颗树的。\n\n```java\n\npublic class UF {\n\n    private int[] parent;  // 顶点所在连通分量的标识符\n    private byte[] rank;   // 顶点的连通分量中的位置\n    private int count;     // 顶点数量\n\n    public UF(int n) {\n        if (n < 0) throw new IllegalArgumentException();\n        count = n;\n        parent = new int[n];\n        rank = new byte[n];\n        for (int i = 0; i < n; i++) {\n            parent[i] = i;\n            rank[i] = 0;\n        }\n    }\n\n    public int find(int p) {// 找到p所在的连通分量标识符\n        validate(p);\n        while (p != parent[p]) { // 在和别的触点连通的情况下\n            parent[p] = parent[parent[p]];    \n            p = parent[p];\n        } \n        return p;\n    }\n\n    \n    public int count() {\n        return count;\n    }\n  \n    \n    public boolean connected(int p, int q) {// 判断两点之间是否连接 或在同一个分量中\n        return find(p) == find(q);\n    }\n  \n    \n    public void union(int p, int q) {// 添加一条连接\n        int rootP = find(p);\n        int rootQ = find(q);\n        if (rootP == rootQ) return;\n\n        \n        if      (rank[rootP] < rank[rootQ]) parent[rootP] = rootQ;\n        else if (rank[rootP] > rank[rootQ]) parent[rootQ] = rootP;\n        else {\n            parent[rootQ] = rootP;\n            rank[rootP]++;\n        }\n        count--;\n    }\n\n\n    private void validate(int p) {\n        int n = parent.length;\n        if (p < 0 || p >= n) {\n            throw new IllegalArgumentException(\"index \" + p + \" is not between 0 and \" + (n-1));  \n        }\n    }\n}\n```\n\nKruskal算法的实现如下：\n\n```java\npublic class KruskalMST {\n    private static final double FLOATING_POINT_EPSILON = 1E-12;\n\n    private double weight;\n    private Queue<Edge> mst = new Queue<Edge>();\n\n    public KruskalMST(EdgeWeightedGraph G) {\n        MinPQ<Edge> pq = new MinPQ<Edge>();\n        for (Edge e : G.edges()) {\n            pq.insert(e);// 将图中的所有边加入到优先队列中\n        }\n\n        UF uf = new UF(G.V());\n        while (!pq.isEmpty() && mst.size() < G.V() - 1) {\n            Edge e = pq.delMin();\n            int v = e.either();\n            int w = e.other(v);\n            if (!uf.connected(v, w)) {// 在uf对象中，v、w两点是未连接的分量\n                uf.union(v, w);// 连接vw\n                mst.enqueue(e);// 将边加到最小生成树中\n                weight += weight;\n            }\n        }\n\n        assert check(G);\n\n    }\n\n    public Iterable<Edge> edges() {\n        return mst;\n    }\n\n    public double weight() {\n        return weight;\n    }\n\n    private boolean check(EdgeWeightedGraph G) {\n        double total = 0.0;\n        for (Edge e : edges()) {\n            total += e.weight();\n        }\n\n        if (Math.abs(total - weight()) > FLOATING_POINT_EPSILON) {\n            System.err.printf(\"Weight of edges does not equal weight(): %f vs. %f\\n\", total, weight());\n            return false;\n        }\n\n        UF uf = new UF(G.V());\n        for (Edge e : edges()) {\n            int v = e.either(), w = e.other(v);\n            if (uf.connected(v, w)) {\n                System.err.println(\"Not a forest\");\n                return false;\n            }\n            uf.union(v, w);\n        }\n        for (Edge e : G.edges()) {\n            int v = e.either(), w = e.other(v);\n            if (!uf.connected(v, w)) {\n                System.err.println(\"Not a spanning forest\");\n                return false;\n            }\n        }\n\n        for (Edge e : edges()) {\n\n            // all edges in MST except e\n            uf = new UF(G.V());\n            for (Edge f : mst) {\n                int x = f.either(), y = f.other(x);\n                if (f != e)\n                    uf.union(x, y);\n            }\n\n            // check that e is min weight edge in crossing cut\n            for (Edge f : G.edges()) {\n                int x = f.either(), y = f.other(x);\n                if (!uf.connected(x, y)) {\n                    if (f.weight() < e.weight()) {\n                        System.err.println(\"Edge \" + f + \" violates cut optimality conditions\");\n                        return false;\n                    }\n                }\n            }\n\n        }\n        return true;\n    }\n}\n```\n","tags":["算法"]},{"title":"Prim算法的即时实现","url":"%2F2019%2F10%2F15%2FPrim%E7%AE%97%E6%B3%95%E7%9A%84%E5%8D%B3%E6%97%B6%E5%AE%9E%E7%8E%B0%2F","content":"\n在Prim算法的延迟实现中，生成最小生成树的过程中，优先队列中保存有失效的边。\n改进延迟实现，可以尝试从优先队列中删除失效的边，只保留有树中的点和非树中的点之间的横切边。\n在Prim算法的即时实现中，我们并不这么做。\n我们将新顶点加入到最小生成树时，其余非树中的顶点到最小生成树的距离只可能变小。\n我们并不需要在优先队列中保留非树中的顶点到最小生成树的所有横切边，只保留权重最小的那条边即可。\n在某个新顶点加入到最小生成树时，检查是否需要更新这条边即可。\n在Prim算法的即时实现中：\nedgeTo[]保存的是非树中顶点到最小生成树距离最短的边。\ndistTo[]则保存的是这条边的权重。\n\n其构造函数会遍历图中的顶点，将起点加入到最小生成树时，会将起点的邻接链表中的边都加入到索引优先队列中，因为从上面的内容来看，这些邻接边目前是那些非树顶点到树距离最小的边，之后随着不断的将新顶点加入到最小生成树中，需要不断的更新索引优先队列的数据，只保留非树顶点到树距离最小的边，直至将图中的顶点遍历完毕。\n\n下面是其Java实现：\n\n```java\npublic class PrimMST {\n    private static final double FLOATING_POINT_EPSILON = 1E-12;\n\n    private Edge[] edgeTo;// 距离树最短的边\n    private double[] distTo;// 距离树最短的边的权重\n    private boolean[] marked;// 标记\n    private IndexMinPQ<Double> pq;// 保存有效的横切边\n\n    public PrimMST(EdgeWeightedGraph G) {\n        edgeTo = new Edge[G.V()];\n        distTo = new double[G.V()];\n        marked = new boolean[G.V()];\n        pq = new IndexMinPQ<Double>(G.V());\n\n        for (int v = 0; v < G.V(); v++) {\n            distTo[v] = Double.POSITIVE_INFINITY;// 未加入最小生成树前初始化所有顶点到最小生成树的距离为无限远\n        }\n\n        for (int v = 0; v < G.V(); v++) {// 遍历顶点\n            if (!marked[v])\n                prim(G, v);\n        }\n\n        assert check(G);\n    }\n\n    private void prim(EdgeWeightedGraph G, int s) {\n        distTo[s] = 0.0;// 加入MST的顶点距离MST的距离必然为0\n        pq.insert(s, distTo[s]);\n        while (!pq.isEmpty()) {\n            int v = pq.delMin();\n            scan(G, v);\n        }\n    }\n\n    // 将顶点v加入最小生成树中 并更新数据\n    private void scan(EdgeWeightedGraph G, int v) {\n        marked[v] = true;// 标记\n        for (Edge e : G.adj(v)) {\n            int w = e.other(v);\n            if (marked[w])\n                continue;\n            if (e.weight() < distTo[w]) {\n                distTo[w] = e.weight();\n                edgeTo[w] = e;\n                if (pq.contains(w))\n                    pq.decreaseKey(w, distTo[w]);\n                else\n                    pq.insert(w, distTo[w]);\n            }\n        }\n    }\n\n    public Iterable<Edge> edges() {\n        Queue<Edge> mst = new Queue<Edge>();\n        for (int v = 0; v < edgeTo.length; v++) {\n            Edge e = edgeTo[v];\n            if (e != null) {\n                mst.enqueue(e);\n            }\n        }\n        return mst;\n    }\n\n    public double weight() {\n        double weight = 0.0;\n        for (Edge e : edges()) {\n            weight += e.weight();\n        }\n        return weight;\n    }\n\n    private boolean check(EdgeWeightedGraph G) {\n\n        // 检查权重\n        double totalWeight = 0.0;\n        for (Edge e : edges()) {\n            totalWeight += e.weight();\n        }\n        if (Math.abs(totalWeight - weight()) > FLOATING_POINT_EPSILON) {\n            System.err.printf(\"Weight of edges does not equal weight(): %f vs. %f\\n\", totalWeight, weight());\n            return false;\n        }\n\n        // 检查是否是环\n        UF uf = new UF(G.V());\n        for (Edge e : edges()) {\n            int v = e.either(), w = e.other(v);\n            if (uf.connected(v, w)) {\n                System.err.println(\"Not a forest\");\n                return false;\n            }\n            uf.union(v, w);\n        }\n\n        // 检查是否是森林\n        for (Edge e : G.edges()) {\n            int v = e.either(), w = e.other(v);\n            if (!uf.connected(v, w)) {\n                System.err.println(\"Not a spanning forest\");\n                return false;\n            }\n        }\n\n        // 检查是否是最小生成森林\n        for (Edge e : edges()) {\n            uf = new UF(G.V());\n            for (Edge f : edges()) {\n                int x = f.either(), y = f.other(x);\n                if (f != e)\n                    uf.union(x, y);\n            }\n\n            for (Edge f : G.edges()) {\n                int x = f.either(), y = f.other(x);\n                if (!uf.connected(x, y)) {\n                    if (f.weight() < e.weight()) {\n                        System.err.println(\"Edge \" + f + \" violates cut optimality conditions\");\n                        return false;\n                    }\n                }\n            }\n\n        }\n        return true;\n    }\n}\n```\n\n","tags":["算法"]},{"title":"Prim算法的延迟实现","url":"%2F2019%2F10%2F15%2FPrim%E7%AE%97%E6%B3%95%E7%9A%84%E5%BB%B6%E8%BF%9F%E5%AE%9E%E7%8E%B0%2F","content":"\n上篇博文的内容涉及到的是最小生成树的理论部分。即：切分定理以及加权图和加权边的数据结构。\n回顾一下切分定理，它的内容是：\n**在一幅加权图中，给定任意的切分，它的横切边中权重最小的边必然属于图的最小生成树。**\n而所谓的切分，则是将图中的顶点分成两个非空不重叠的集合，横切边是连接两个不同集合内的顶点的边。\n能够找到任意加权图的算法这里介绍了两种：一种是Prim算法，一种是Kruskal算法。\nPrim算法的实现又分两种，一种是延迟实现，一种是即时实现。\n区别在于对新加入最小生成树的顶点与树内其他顶点之间的边是否及时删除上。\n\n先说说Prim算法的延迟实现。\n首先其实现切分的方式是在构造方法中遍历图中的顶点，\n将图中的顶点分成已标记的顶点和未标记的顶点两个非空集合。\n然后将已标记的顶点中所有连接这个顶点和未被标记的顶点的边加入到优先队列中，\n标记其中权重最小的边，加入到最小生成树中，并将相关的顶点加入到最小生成树中。\n\n因为优先队列中的那些并不是当前被遍历到的顶点的横切边没有被删除，\n即便正在被遍历的顶点的横切边中最小权重边在优先队列中不是最小的，\n也应当忽略优先队列中的那些失效的横切边即便它们权重更小，而选择正在被遍历的顶点的最小权重边。\n相应的解决办法是，因为那些没有被删除的失效边两端的顶点均在最小生成树内，\n则必然会被标记，所以一旦检查到其两端顶点被标记过则直接忽略它，\n继续找优先队列中的下一个最小权重边。\n\n以上是延迟实现的一些关键地方。下面是其Java实现：\n\n```java\npublic class LazyPrimMST {\n    private static final double FLOATING_POINT_EPSILON = 1E-12;\n\n    private double weight;// 最小生成树的权重大小\n    private Queue<Edge> mst;// 最小生成的边\n    private boolean[] marked;// 最小生成树的顶点\n    private MinPQ<Edge> pq;// 横切边\n\n    public LazyPrimMST(EdgeWeightedGraph G) {\n        mst = new Queue<Edge>();\n        pq = new MinPQ<Edge>();\n        marked = new boolean[G.V()];\n        for (int v = 0; v < G.V(); v++) {\n            if (!marked[v])\n                prim(G, v);\n        }\n        assert check(G);\n    }\n\n    private void prim(EdgeWeightedGraph G, int s) {\n        scan(G, s);\n        while (!pq.isEmpty()) {\n            Edge e = pq.delMin();\n            int v = e.either(), w = e.other(v);\n            assert marked[v]||marked[w];\n            if (marked[v] && marked[w]) // pq中的横切边若失效了(权重并不是最小的) 即跳过\n                continue;\n            mst.enqueue(e);// 添加最小权重横切边到最小生成树中\n            weight += e.weight();// 更新最小生成树的权重\n            if (!marked[v])// 标记顶点v或者w，即将顶点加入到最小生成树中\n                scan(G, v);\n            if (!marked[w])\n                scan(G, w);\n        }\n    }\n\n    // 标记顶点v 并将所有连接顶点v和未标记顶点的边加入pq中\n    private void scan(EdgeWeightedGraph G, int v) {\n        assert !marked[v];\n        marked[v] = true;\n        for (Edge e : G.adj(v)) {\n            if (!marked[e.other(v)])\n                pq.insert(e);\n        }\n    }\n\n    public Iterable<Edge> edges() {\n        return mst;\n    }\n\n    public double weight() {\n        return weight;\n    }\n\n    private boolean check(EdgeWeightedGraph G) {\n\n        double totalWeight = 0.0;\n        for (Edge e : edges()) {\n            totalWeight += e.weight();\n        }\n        if (Math.abs(totalWeight - weight()) > FLOATING_POINT_EPSILON) {\n            System.err.printf(\"Weight of edges does not equal weight(): %f vs. %f\\n\", totalWeight, weight());\n            return false;\n        }\n\n        UF uf = new UF(G.V());\n        for (Edge e : edges()) {\n            int v = e.either(), w = e.other(v);\n            if (uf.connected(v, w)) {\n                System.err.println(\"Not a forest\");\n                return false;\n            }\n            uf.union(v, w);\n        }\n\n        for (Edge e : G.edges()) {\n            int v = e.either(), w = e.other(v);\n            if (!uf.connected(v, w)) {\n                System.err.println(\"Not a spanning forest\");\n                return false;\n            }\n        }\n\n        for (Edge e : edges()) {\n\n            // all edges in MST except e\n            uf = new UF(G.V());\n            for (Edge f : mst) {\n                int x = f.either(), y = f.other(x);\n                if (f != e)\n                    uf.union(x, y);\n            }\n\n            // check that e is min weight edge in crossing cut\n            for (Edge f : G.edges()) {\n                int x = f.either(), y = f.other(x);\n                if (!uf.connected(x, y)) {\n                    if (f.weight() < e.weight()) {\n                        System.err.println(\"Edge \" + f + \" violates cut optimality conditions\");\n                        return false;\n                    }\n                }\n            }\n\n        }\n\n        return true;\n    }\n}\n```\n\n","tags":["算法"]},{"title":"最小生成树","url":"%2F2019%2F10%2F15%2F%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%2F","content":"\n图的分类中，有一类叫加权图，即图的每条边关联一个权值或是成本。\n这类图在实际生活中的应用很多：电路、航空、电力分配、图像分析等。\n图的生成树，表示的一颗含有图中所有顶点的无环连通子图。\n而加权图中的最小生成树，则表示这棵树在所有生成树中所有的边的权重加起来是最小的。\n\nAlgorithms中计算最小生成树，遵守以下约定：\n只考虑连通图；\n边的权重不一定表示距离；\n边的权重可能是0或者负的；\n所有边的权重都不相同。\n\n树是无环连通图，则意味着：\n树是连通的；\n树中不存在环；\n树中添加任意一条边都会产生一条环；\n树中删除任意一条边都会使它不再连通；\n树中任意一对顶点之间都仅存一条简单路径。\n\n其中添加一条边就会产生一个新的环和删除任意一条边将会得到两棵树，\n是证明最小生成树的一条性质的基础，而这个基本性质则是最小生成树算法的基础。\n\n定义：图的一种切分是将图中的顶点分成两个非空不重叠的集合。横切边是一条连接两个属于不同集合的顶点的边。\n切分定理：一幅加权图中，给定任意的切分，它的横切边中权重最小的边必然属于图的最小生成树。\n切分定理是解决最小生成树问题的所有算法的基础，属于贪心算法的特殊情况。使用切分定理找到最小生成树的一条边，不断重复直到找到最小生成树的所有边。\n\n最小生成树的贪心算法：会找到加权连通图中的最小生成树，并将它的边全标记为黑色。其过程是在V个顶点的加权连通图中，初始状态下将所有边设为灰色，找到一种切分，它产生的横切边均不为黑色，将它权重最小的横切边设为黑色，反复，直至标记了V-1条黑色边为止。\n\n加权无向图的数据类型有两种：即Edge--加权边和EdgeWeightedGraph--加权图；\n以下是这两种数据类的Java实现：\n\n```java\n// 加权边\n\npublic class Edge implements Comparable<Edge> {\n    private final int v;\n    private final int w;\n    private final double weight;\n\n    public Edge(int v, int w, double weight) {\n        if (v < 0)\n            throw new IllegalArgumentException(\"vertex index must be a nonnegative integer\");\n        if (w < 0)\n            throw new IllegalArgumentException(\"vertex index must be a nonnegative integer\");\n        if (Double.isNaN(weight))\n            throw new IllegalArgumentException(\"Weight is NaN\");\n        this.v = v;\n        this.w = w;\n        this.weight = weight;\n    }\n\n    public double weight() {\n        return weight;\n    }\n\n    public int either() {\n        return v;\n    }\n\n    public int other(int vertex) {\n        if (vertex == v)\n            return w;\n        else if (vertex == w)\n            return v;\n        else\n            throw new IllegalArgumentException(\"Illegal endpoint\");\n    }\n\n    public int compareTo(Edge that) {\n        return Double.compare(this.weight, that.weight);\n    }\n\n    public String toString() {\n        return String.format(\"%d-%d %.5f\", v, w, weight);\n    }\n\n}\n```\n\n```java\n// 加权图\nimport java.util.Stack;\n\npublic class EdgeWeightedGraph {\n    private static final String NEWLINE = System.getProperty(\"line.separator\");\n    private final int V;\n    private int E;\n    private Bag<Edge>[] adj;\n\n    public EdgeWeightedGraph(int V) {\n        if (V < 0)\n            throw new IllegalArgumentException(\"Number of vertices must be nonnegative\");\n        this.V = V;\n        this.E = 0;\n        adj = (Bag<Edge>[]) new Bag[V];\n        for (int v = 0; v < V; v++) {\n            adj[v] = new Bag<Edge>();\n        }\n    }\n\n    public EdgeWeightedGraph(int V, int E) {\n        this(V);\n        if (E < 0)\n            throw new IllegalArgumentException(\"Number of vertices must be nonnegative\");\n        for (int i = 0; i < E; i++) {\n            int v = StdRandom.uniform(V);\n            int w = StdRandom.uniform(V);\n            double weight = Math.round(100 * StdRandom.uniform()) / 100.0;\n            Edge e = new Edge(v, w, weight);\n            addEdge(e);\n        }\n    }\n\n    public EdgeWeightedGraph(In in) {\n        this(in.readInt());\n        int E = in.readInt();\n        if (E < 0)\n            throw new IllegalArgumentException(\"Number of edges must be nonnegative\");\n        for (int i = 0; i < E; i++) {\n            int v = in.readInt();\n            int w = in.readInt();\n            validateVertex(v);\n            validateVertex(w);\n            double weight = in.readDouble();\n            Edge e = new Edge(v, w, weight);\n            addEdge(e);\n        }\n    }\n\n    public EdgeWeightedGraph(EdgeWeightedGraph G) {\n        this(G.V());\n        this.E = G.E();\n        for (int v = 0; v < G.V(); v++) {\n            Stack<Edge> reverse = new Stack<Edge>();\n            for (Edge e : G.adj[v]) {\n                reverse.push(e);\n            }\n            for (Edge e : reverse) {\n                adj[v].add(e);\n            }\n        }\n    }\n\n    public int V() {\n        return V;\n    }\n\n    public int E() {\n        return E;\n    }\n\n    private void validateVertex(int v) {\n        if (v < 0 || v >= V)\n            throw new IllegalArgumentException(\"vertex \" + v + \" is not between 0 and \" + (V - 1));\n    }\n\n    public void addEdge(Edge e) {\n        int v = e.either();\n        int w = e.other(v);\n        validateVertex(v);\n        validateVertex(w);\n        adj[v].add(e);\n        adj[w].add(e);\n        E++;\n    }\n\n    public Iterable<Edge> adj(int v) {\n        validateVertex(v);\n        return adj[v];\n    }\n\n    public int degree(int v) {\n        validateVertex(v);\n        return adj[v].size();\n    }\n\n    public Iterable<Edge> edges() {\n        Bag<Edge> list = new Bag<Edge>();\n        for (int v = 0; v < V; v++) {\n            int selfLoops = 0;\n            for (Edge e : adj(v)) {\n                if (e.other(v) > v) {\n                    list.add(e);\n                } else if (e.other(v) == v) {\n                    if (selfLoops % 2 == 0)\n                        list.add(e);\n                    selfLoops++;\n                }\n            }\n        }\n        return list;\n    }\n\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        s.append(V + \" \" + E + NEWLINE);\n        for (int v = 0; v < V; v++) {\n            s.append(v + \": \");\n            for (Edge e : adj[v]) {\n                s.append(e + \" \");\n            }\n            s.append(NEWLINE);\n        }\n        return s.toString();\n    }\n}\n```\n\n","tags":["算法"]},{"title":"计算强连通性的Kosaraju算法","url":"%2F2019%2F10%2F15%2F%E8%AE%A1%E7%AE%97%E5%BC%BA%E8%BF%9E%E9%80%9A%E6%80%A7%E7%9A%84Kosaraju%E7%AE%97%E6%B3%95%2F","content":"\n在无向图中，因为边没有方向，所以假设v、w两点是连通的，既可以从v到达w，也可以从w到达v。\n但在有向图中，因为边有方向，假设v、w两点是连通的，即存在从v到达w的有向路径，但从w到达v的有向路径可能存在也可能不存在。\n有向图中，如果两点是相互可达的，则称这两个点是强连通的。\n当两个点是强连通的当且仅当它们都在一个普通的有向环中。\n在无向图中计算连通分量只是深度优先搜索的一个简单应用，在有向图中深度优先搜索也可以用来计算强连通分量。这里要用到之前提到的DepthFirstOrder类，并且完成以下的任务。\n① 将给定的有向图G，利用DepthFirstOrder类计算其反向图的逆后序排列。\n② 在G中进行深度优先搜索，但以刚才计算得到的逆后序排列为顺序来访问未被标记的顶点。\n③ 在构造函数中，所有在同一个递归dfs调用中被访问到的顶点都在同一个强连通分量中，均会被识别出来。\n以下是Java的实现：\n\n```java\n// 计算强连通分量\npublic class KosarajuSharirSCC {\n    private boolean[] marked;// 标记\n    private int[] id;// 顶点和强连通分量标识符关联\n    private int count;// 强连通分量的编号\n\n    public KosarajuSharirSCC(Digraph G) {\n        DepthFirstOrder dfs = new DepthFirstOrder(G.reverse());// 反向图的深度优先搜索排序\n        marked = new boolean[G.V()];\n        id = new int[G.V()];\n        for (int v : dfs.reversePost()) {// 访问顺序是反向图的逆后序排列\n            if (!marked[v]) {\n                dfs(G, v);\n                count++;\n            }\n        }\n\n        assert check(G);\n    }\n\n    private void dfs(Digraph G, int v) {\n        marked[v] = true;\n        id[v] = count;\n        for (int w : G.adj(v)) {\n            if (!marked[w])\n                dfs(G, w);\n        }\n    }\n\n    public int count() {\n        return count;\n    }\n\n    public boolean stronglyConnected(int v, int w) {\n        validateVertex(v);\n        validateVertex(w);\n        return id[v] == id[w];\n    }\n\n    public int id(int v) {\n        validateVertex(v);\n        return id[v];\n    }\n\n    private boolean check(Digraph G) {\n        TransitiveClosure tc = new TransitiveClosure(G);\n        for (int v = 0; v < G.V(); v++) {\n            for (int w = 0; w < G.V(); w++) {\n                if (stronglyConnected(v, w) != tc.reachable(v, w) && tc.reachable(w, v))\n                    return false;\n            }\n        }\n        return true;\n    }\n\n    private void validateVertex(int v) {\n        int V = marked.length;\n        if (v < 0 || v >= V)\n            throw new IllegalArgumentException(\"vertex \" + v + \" is not between 0 and \" + (V - 1));\n    }\n}\n```\n\nKosaraju算法实现容易，但难以理解。\n它的理论依据是：使用深度优先搜索查找给定的有向图G的反向图，根据由此得到的所有顶点的逆后序再次用深度优先搜索处理有向图G，其构造函数中的每一次递归调用所标记的顶点都在同一个强连通分量中。\n这个理论，证明起来也不是很难。\n首先，用反证法证明「每个与s强连通的顶点v都会在构造函数的dfs(G,s)中被访问到」。\n假设有一个与s强连通的顶点v不会在构造函数调用的dfs(G,s)中被访问到。因为存在s到达v的路径，则v在之前肯定被标记过了。又因为也存在v到达s的路径，则s在dfs(G,v)的调用中被标记过，所以构造函数不会调用dfs(G,s)的。矛盾。\n其次，要证明「构造函数调用的dfs(G,s)所到达的任意顶点v都必然是和s强连通的」。\n假设v是dfs(G,s)到达的某个顶点，那么G中必然存在一条s到达v的路径，现在只需要证明G中也存在一条从v到达s的路径即可。这也等价于在G的反向图中找到一条从s到达v的路径。\n按照逆后序进行的深度优先搜索意味着，在G的反向图中进行的深度优先搜索中，dfs(G,v)必然在dfs(G,s)之前就已经结束了。这样dfs(G,v)的调用就只会出现两种情况：\n调用在dfs(G,s)的调用之前，也在dfs(G,s)的调用之前结束。\n调用在dfs(G,s)的调用之后，也在dfs(G,s)的结束之前结束。\n第一种情况不存在，因为G的反向图中存在一条v到达s的路径。\n第二种情况则说明G的反向图中存在一条从s到达v的路径。\n\n","tags":["算法"]},{"title":"有向图中基于深度优先搜索的顶点排序&拓扑排序","url":"%2F2019%2F10%2F15%2F%E6%9C%89%E5%90%91%E5%9B%BE%E4%B8%AD%E5%9F%BA%E4%BA%8E%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%9A%84%E9%A1%B6%E7%82%B9%E6%8E%92%E5%BA%8F-%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%2F","content":"\n深度优先搜索中，图中的每个顶点只会被访问一次。\n那么将dfs的参数顶点保存在一个数据结构中，遍历这个数据结构实际上能访问到图中的所有顶点。\n遍历的顺序取决于这个数据结构以及是在递归之前还是之后进行保存的。\n典型的应用中，最为让人感兴趣的有3中排列顺序。\n* 前序：递归调用之前将顶点加入队列。\n* 后序：递归调用之后将顶点加入队列。\n* 逆后序：递归调用之后将顶点压入栈。\n本质上来说，前序是dfs的调用顶点的顺序。后序则是顶点遍历完成的顺序。\n![depth-first-orders](https://isshl.me/img/depth-first-orders.png)\n以下为Java的实现：\n\n```java\n// 有向图中基于深度优先搜索的顶点排序\n\nimport java.util.Stack;\n\npublic class DepthFirstOrder{\n    private boolean[] marked;// 标记\n    private int[] pre;// 前序中顶点在队列中的编号\n    private int[] post;// 后序中顶点在队列中的编号\n    private Queue<Integer> preorder;// 前序队列\n    private Queue<Integer> postorder;// 后序队列\n    private int preCounter;// 前序队列中顶点的数量\n    private int postCounter;// 后序队列中顶点的数量\n    \n    public DepthFirstOrder(Digraph G){\n        pre = new int[G.V()];\n        post = new int[G.V()];\n        postorder = new Queue<Integer>();\n        preorder = new Queue<Integer>();\n        marked = new boolean[G.V()];\n        for(int v=0;v<G.V();v++){\n            if(!marked[v]) dfs(G, v);\n        }\n        assert check();\n    }\n\n    private void dfs(Digraph G,int v){\n        marked[v]=true;// 标记\n        pre[v]=preCounter++;// 前序中顶点在队列中的编号\n        preorder.enqueue(v);// 添加到前序队列中\n        for(int w:G.adj(v)){\n            if(!marked[w])\n            dfs(G, w);\n        }\n        postorder.enqueue(v);// 添加到后序队列中\n        post[v]=postCounter++;// 后序中顶点在队列中的编号\n    }\n\n    public DepthFirstOrder(){}// 待更新加权有向图 \n\n    private void dfs(){} // 待更新加权有向图\n\n    // 返回顶点在前序中的编号\n    public int pre(int v){\n        validateVertex(v);\n        return pre[v];\n    }\n\n    // 返回顶点在后序中的编号\n    public int post(int v){\n        validateVertex(v);\n        return post[v];\n    }\n    \n    public Iterable<Integer> pre(){\n        return preorder;\n    }\n\n    public Iterable<Integer> post(){\n        return postorder;\n    }\n\n    public Iterable<Integer> reversePost(){\n        Stack<Integer> reverse = new Stack<Integer>();\n        for(int v:postorder){\n            reverse.push(v);\n        }\n        return reverse;\n    }\n\n    private boolean check(){\n        int r=0;\n        for(int v:post()){\n            if(post(v)!=r){\n                StdOut.println(\"post(v) and post() inconsistent\");\n                return false;\n            }\n            r++;\n        }\n        r=0;\n        for(int v:pre()){\n            if (pre(v) != r) {\n                StdOut.println(\"pre(v) and pre() inconsistent\");\n                return false;\n            }\n            r++;\n        }\n        return true;\n    }\n\n    private void validateVertex(int v) {\n        int V = marked.length;\n        if (v < 0 || v >= V)\n            throw new IllegalArgumentException(\"vertex \" + v + \" is not between 0 and \" + (V-1));\n    }\n\n}\n```\n\n\n拓扑排序：给定一幅有向图，将有所的顶点排序，使得所有的有向边均从排在前面的元素指向排在后面的元素。\n在优先级的调度问题中，排在前面的任务通常是后面任务的前提，或者说优先级更高。\n而拓扑排序则是解决这个问题的关键。那什么样的有向图才能进行拓扑排序呢？\n有向图必须是无环图。\n而上面的有向图基于深度优先搜索的顶点排序，其中的逆后序排列恰好就是拓扑顺序。\n思考一下：深度优先搜索中，最先完成遍历结束的一定是远处的顶点。然后才是近处的顶点，最后是起点。拓扑排序是前面的顶点发出的有向边均指向排在后面的元素。\n![topological-sort](https://isshl.me/img/topological-sort.png)\n以下是Java实现：\n\n```java\n// 拓扑排序\npublic class Topological{\n    private Iterable<Integer> order;\n    private int[] rank;\n\n    public Topological(Digraph G){\n        DirectedCycle finder = new DirectedCycle(G);// 检查有向图中是否存在环\n        if(!finder.hasCycle()){// 没有环就可以构建拓扑排序\n            DepthFirstOrder  dfs = new DepthFirstOrder(G);\n            order = dfs.reversePost();\n            rank = new int[G.V()];\n            int i=0;\n            for(int v:order){\n                rank[v]=i++;\n            }\n        }\n    }\n\n    public Topological(){}// 待更新加权有向图\n\n    public Iterable<Integer> order(){\n        return order;\n    }\n\n    public boolean hasOrder(){\n        return order!=null;\n    }\n\n    public int rank(int v){\n\n        if(hasOrder()) return rank[v];\n        else return -1;\n    }\n\n    private void validateVertex(int v){\n        int V = rank.length;\n        if (v < 0 || v >= V)\n            throw new IllegalArgumentException(\"vertex \" + v + \" is not between 0 and \" + (V-1));\n    }\n}\n```\n","tags":["算法"]},{"title":"有向图&可达性&有向环","url":"%2F2019%2F10%2F15%2F%E6%9C%89%E5%90%91%E5%9B%BE-%E5%8F%AF%E8%BE%BE%E6%80%A7-%E6%9C%89%E5%90%91%E7%8E%AF%2F","content":"\n什么是有向图？一幅有方向性的图。\n什么有方向？边有方向。即单向的。\n边连接的是什么？边连接的是一对有序的顶点。\n总结：一幅有方向性的图，该图由一组顶点和一组有向边组成，每条有方向的边连接着一对有序的顶点。\n有向图具有的一些性质和无向图类似。以下摘取部分。\n自环就是一条边的起点和终点都是同一个顶点。\n平行边就是两条边同时连接同一对有序顶点。\n入度：表示有多少条边指向顶点。\n出度：表示有多少条边指出顶点。\n有向路径：由一系列顶点组成，对于其中的每个顶点都存在一条有向边从它指向序列中的下一个顶点。\n有向环：是一条有向路径，其起点和终点是相同的顶点，且至少含有一条边。\n路径或者环的长度就是其中的有向边的边数。\n顶点之间可达，表示它们之间至少存在一条有向路径。\n顶点之间是强连接的表示它们之间是相互可达的。\n强连接有向图表示：图中的每个点都是相互可达的。\n下面是Digraph抽象数据类型的Java实现：\n\n```java\nimport java.util.NoSuchElementException;\nimport java.util.Stack;\n\npublic class Digraph {\n    private static final String NEWLINE = System.getProperty(\"line.separator\");\n    private final int V;\n    private int E;\n    private Bag<Integer>[] adj;\n    private int[] indegree;// 入度\n\n    public Digraph(int V) {\n        if (V < 0)\n            throw new IllegalArgumentException(\"Number of vertices in a Digraph must be nonnegative\");\n        this.V = V;\n        this.E = 0;\n        indegree = new int[V];\n        adj = (Bag<Integer>[]) new Bag[V];\n        for (int v = 0; v < V; v++) {\n            adj[v] = new Bag<Integer>();\n        }\n    }\n\n    public Digraph(In in) {\n        try {\n            this.V = in.readInt();\n            if (V < 0)\n                throw new IllegalArgumentException(\"Number of vertices in a Digraph must be nonnegative\");\n            indegree = new int[V];\n            adj = (Bag<Integer>[]) new Bag[V];\n            for (int v = 0; v < V; v++) {\n                adj[v] = new Bag<Integer>();\n            }\n            int E = in.readInt();\n            if (E < 0)\n                throw new IllegalArgumentException(\"number of edges in a Digraph must be nonnegative\");\n            for (int i = 0; i < E; i++) {\n                int v = in.readInt();\n                int w = in.readInt();\n                addEdge(v, w);\n            }\n        } catch (NoSuchElementException e) {\n            throw new IllegalArgumentException(\"invalid input format in Digraph constructor\", e);\n        }\n    }\n\n    public Digraph(Digraph G) {\n        this(G.V());\n        this.E = G.E();\n        for (int v = 0; v < V; v++) {\n            Stack<Integer> reverse = new Stack<Integer>();\n            for (int w : G.adj[v]) {\n                reverse.push(w);\n            }\n            for (int w : reverse) {\n                adj[v].add(w);\n            }\n        }\n    }\n\n    public int V() {\n        return V;\n    }\n\n    public int E() {\n        return E;\n    }\n\n    public void validateVertex(int v) {\n        if (v < 0 || v >= V) {\n            throw new IllegalArgumentException(\"vertex \" + v + \" is not betweent 0 and \" + (V - 1));\n        }\n    }\n\n    public void addEdge(int v, int w) {\n        validateVertex(v);\n        validateVertex(w);\n        adj[v].add(w);\n        indegree[w]++;\n        E++;\n    }\n\n    public Iterable<Integer> adj(int v) {\n        validateVertex(v);\n        return adj[v];\n    }\n\n    public int outdegree(int v) {\n        validateVertex(v);\n        return adj[v].size();\n    }\n\n    public int indegree(int v) {\n        validateVertex(v);\n        return indegree(v);\n    }\n\n    //\n    public Digraph reverse() {\n        Digraph reverse = new Digraph(V);\n        for (int v = 0; v < V; v++) {\n            for (int w : adj(v)) {\n                reverse.addEdge(w, v);\n            }\n        }\n        return reverse;\n    }\n\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        s.append(V + \" vertices, \" + E + \" edges \" + NEWLINE);\n        for (int v = 0; v < V; v++) {\n            s.append(String.format(\"%d\", v));\n            for (int w : adj[v]) {\n                s.append(String.format(\"%d \", w));\n            }\n            s.append(NEWLINE);\n        }\n        return s.toString();\n    }\n}\n```\n\n有向图的单点可达性：即是否存在一条从s到达给定顶点v的有向路径？\n解决这个问题通常需要深度优先搜索。\nJava的实现如下：其中也包含了多点可达性，即是否存在一条从集合中的任意顶点到达给定顶点v的有向路径\n\n```java\n// 单点可达性\n// 以标准的深度优先搜索来解决\npublic class DirectedDFS {\n    private boolean[] marked;\n    private int count;// 起点可以达到的顶点数量\n\n    public DirectedDFS(Digraph G, int s) {\n        marked = new boolean[G.V()];\n        validateVertex(s);\n        dfs(G, s);\n    }\n\n    public DirectedDFS(Digraph G, Iterable<Integer> sources) {\n        marked = new boolean[G.V()];\n        validateVertices(sources);\n        for (int v : sources) {\n            if (!marked[v])\n                dfs(G, v);\n        }\n    }\n\n    private void dfs(Digraph G, int v) {\n        count++;\n        marked[v] = true;\n        for (int w : G.adj(v)) {\n            if (!marked[w]) {\n                dfs(G, w);\n            }\n        }\n    }\n\n    public boolean marked(int v) {\n        validateVertex(v);\n        return marked(v);\n    }\n\n    public int count() {\n        return count;\n    }\n\n    private void validateVertex(int v) {\n        int V = marked.length;\n        if (v < 0 || v >= V) {\n            throw new IllegalArgumentException(\"vertex \" + v + \" is not between 0 and \" + (V - 1));\n        }\n    }\n\n    private void validateVertices(Iterable<Integer> vertices) {\n        if (vertices == null)\n            throw new IllegalArgumentException(\"argument is null\");\n        int V = marked.length;\n        for (int v : vertices) {\n            if (v < 0 || v >= V)\n                throw new IllegalArgumentException(\"vertex \" + v + \" is not between 0 and \" + (V - 1));\n        }\n    }\n}\n```\n\n有向环，即有向图中的环。\n有向图的实际应用中，有一类是调度问题，即给定一组任务并安排它们的执行顺序，限制条件是这些任务的执行方法和起始时间。限制条件还可能包括任务的耗时和资源的消耗等。而这之中最重要的要属于优先级限制，它指明了哪些任务必须在哪些任务之前完成。\n假设任务x在任务y之前完成，任务y在任务z之前完成，任务z在任务x之前完成，那这三个任务是不可能完成的。\n以上的内容在有向图中的体现就是图中存在环。\n那么给定一幅有向图，其中存在有向环吗？存在话，按照路径的方向从某个顶点开始返回自己来找到环上的所有顶点。\nJava的实现：\n\n```java\n//  检测给定的图中是否存在有向环\n\nimport java.util.Stack;\n\npublic class DirectedCycle {\n    private boolean[] marked;// 标记\n    private int[] edgeTo; // 第一次经过某点的边\n    private boolean[] onStack; // 表示顶点在栈中\n    private Stack<Integer> cycle; // 存储路径用的栈\n\n    public DirectedCycle(Digraph G) {\n        marked = new boolean[G.V()];\n        onStack = new boolean[G.V()];\n        edgeTo = new int[G.V()];\n        for (int v = 0; v < G.V(); v++) {\n            if (!marked[v] && cycle == null)\n                dfs(G, v);\n        }\n    }\n\n    private void dfs(Digraph G, int v) {\n        onStack[v] = true; // 存储递归调用期间栈上的顶点\n        marked[v] = true;\n        for (int w : G.adj(v)) {\n            if (cycle != null)\n                return;\n            else if (!marked[w]) {\n                edgeTo[w] = v;\n                dfs(G, w);\n            }\n\n            else if (onStack[w]) { // 如果某个顶点存在于栈中 && 且被标记了 则构成了一个有向环\n                cycle = new Stack<Integer>();\n                for (int x = v; x != w; x = edgeTo[x]) {\n                    cycle.push(x);\n                }\n                cycle.push(w);\n                cycle.push(v);\n                assert check();\n            }\n        }\n        onStack[v] = false;\n    }\n\n    public boolean hasCycle() {\n        return cycle != null;\n    }\n\n    public Iterable<Integer> cycle() {\n        return cycle;\n    }\n\n    private boolean check(){\n        if(hasCycle()){\n            int first =-1,last=-1;\n            for(int v:cycle()){\n                if(first==-1) first=v;\n                last=v;\n            }\n            if(first!=last){\n                System.err.printf(\"cycle begins with %d and ends with %d\\n\", first, last);\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n","tags":["算法"]},{"title":"符号图","url":"%2F2019%2F10%2F15%2F%E7%AC%A6%E5%8F%B7%E5%9B%BE%2F","content":"\n实际应用中，图都是通过文件或者网页定义的，使用的是字符串而非整数来表示和指代顶点。\n因此就出现了符号图这类数据结构。\n符号图中使用了三种数据结构：\n符号表，数组，图。\n其中符号表内存储了String类型的键和int类型的值。\n数组内存储的是符号表中的键值对的反向，即数组的索引是符号表的键值对中的值，数组索引对应的值恰好是符号表内键值对中对应的键。\n从以下图片可以很直观的看到具体的说明。\n![symbol-graph](https://isshl.me/img/symbol-graph.png)\nJava的实现如下：具体的运行过程见注释。\n\n```java\npublic class SymbolGraph {\n    private ST<String, Integer> st;\n    private String[] keys;\n    private Graph graph;\n\n    public SymbolGraph(String filename, String delimiter) {\n        st = new ST<String, Integer>();// 创建符号表\n\n        // 读取文件\n        In in = new In(filename);\n        // 将读取的文本信息 添加到符号表中，key是String Value是st的大小\n        while (!in.isEmpty()) {\n            String[] a = in.readLine().split(delimiter);\n            for (int i = 0; i < a.length; i++) {\n                if (!st.contains(a[i]))\n                    st.put(a[i], st.size());// key(String)-val(int)\n            }\n        }\n        // 将st中的key和val对调 val是int型\n        keys = new String[st.size()];\n        for (String name : st.keys()) {\n            keys[st.get(name)] = name;// keys[i]=name\n        }\n        // 构建图\n        graph = new Graph(st.size());\n        in = new In(filename);\n        while (in.hasNextLine()) {// 构建图\n            String[] a = in.readLine().split(delimiter);\n            int v = st.get(a[0]);\n            for (int i = 1; i < a.length; i++) {\n                int w = st.get(a[i]);\n                graph.addEdge(v, w);\n            }\n        }\n    }\n\n    public int indexOf(String s) {\n        return st.get(s);\n    }\n\n    public String nameOf(int v) {\n        validateVertex(v);\n        return keys[v];\n    }\n\n    public Graph graph() {\n        return graph;\n    }\n\n    private void validateVertex(int v) {\n        int V = graph.V();\n        if (v < 0 || v >= V)\n            throw new IllegalArgumentException(\"vertex \" + v + \" is not between 0 and \" + (V - 1));\n    }\n\n}\n```\n\n\n","tags":["算法"]},{"title":"深度优先搜索的一些应用","url":"%2F2019%2F10%2F14%2F%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BA%94%E7%94%A8%2F","content":"\n利用深度优先搜索可以找出一幅图中所有的连通分量。\nJava实现如下：其中的注释解释了代码的运行过程。\n\n```java\npublic class CC {\n    private boolean[] marked;// 标记顶点 也是起点\n    private int[] id;// 将同一连通分量重的顶点和连通分量的标识符关联\n    private int[] size;// 给定的连通分量重的顶点数量\n    private int count; // 连通分量数量\n\n    public CC(Graph G) {\n        marked = new boolean[G.V()];\n        id = new int[G.V()];\n        size = new int[G.V()];\n        for (int v = 0; v < G.V(); v++) {\n            if (!marked[v]) {\n                dfs(G, v);\n                count++;\n            }\n        }\n    }\n\n    private void dfs(Graph G, int v) {\n        marked[v] = true;// 标记顶点\n        id[v] = count;// 将连通分量中的顶点和连通分量的标识符关联\n        size[count]++; // 增加连通分量中的顶点数\n        for (int w : G.adj(v)) { // 递归\n            if (!marked[w]) {\n                dfs(G, w);\n            }\n        }\n    }\n\n    // 返回顶点关联的连通分量\n    public int id(int v) {\n        validateVertex(v);\n        return id[v];\n    }\n\n    // 返回连通分量中的顶点数量\n    public int size(int v) {\n        validateVertex(v);\n        return size[id[v]];\n    }\n\n    //连通分量的数量\n    public int count() {\n        return count;\n    }\n\n    // 判断两个顶点是否在同一个连通分量内\n    public boolean connected(int v, int w) {\n        validateVertex(v);\n        validateVertex(w);\n        return id[v] == id[w];\n    }\n\n    private void validateVertex(int v) {\n        int V = marked.length;\n        if (v < 0 || v >= V)\n            throw new IllegalArgumentException(\"vertex \" + v + \" is not betweent 0 and \" + (V - 1));\n    }\n}\n```\n\n判断图是否是无环图。\n首先假设某图中有一条边v-w，我们用edgeTo[w]=v表示v-w是第一次访问w时经过的边，在以下java实现中，dfs方法添加了一个int形参，其保存的值是v，这样当图中的某些结点可以构成一个环时，可以排除平行边。原因是当检测环时，相对于环的起点，环中的倒数第二个顶点在检查其邻接表内的顶点是否被标记时，假如检测到的顶点和其第一次被标记时的边的另一个顶点相同，则不能确定是否存在环。如果排除掉这种可能，且其邻接表内的顶点均被标记过，则存在环。\n\n```java\nimport java.util.Stack;\n\npublic class Cycle {\n    private boolean[] marked;\n    private int[] edgeTo;\n    private Stack<Integer> cycle;\n\n    public Cycle(Graph G) {\n        if (hasSelfLoop(G))\n            return;\n        if (hasParallelEdges(G))\n            return;\n        marked = new boolean[G.V()];\n        edgeTo = new int[G.V()];\n        for (int v = 0; v < G.V(); v++) {\n            if (!marked[v])\n                dfs(G, -1, v);\n        }\n    }\n\n    private boolean hasSelfLoop(Graph G) {\n        for (int v = 0; v < G.V(); v++) {\n            for (int w : G.adj(v)) {\n                if (v == w) { // 检测自旋 就是检测是否存有一条边的起点和终点是同一个顶点\n                    cycle = new Stack<Integer>();\n                    cycle.push(v);\n                    cycle.push(w);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private boolean hasParallelEdges(Graph G) {\n        marked = new boolean[G.V()];\n\n        for (int v = 0; v < G.V(); v++) {\n            for (int w : G.adj(v)) {\n                if (marked[w]) {\n                    cycle = new Stack<Integer>();\n                    cycle.push(v);\n                    cycle.push(w);\n                    cycle.push(v);\n                    return true;\n                }\n                marked[w] = true;\n            }\n            for (int w : G.adj(v)) {\n                marked[w] = false;\n            }\n        }\n        return false;\n    }\n\n    public boolean hasCycle() {\n        return cycle != null;\n    }\n\n    public Iterable<Integer> cycle(){\n        return cycle;\n    }\n\n    private void dfs(Graph G, int u, int v) {\n        marked[v] = true;\n        for (int w : G.adj(v)) {\n            if (cycle != null) // 存在环 \n                return;\n            if (!marked[w]) { // 邻接表内的顶点未被标记 \n                edgeTo[w] = v;// 第一次访问时候的边\n                dfs(G, v, w);\n            } \n            else if (w != u) { // 邻接表内的某个顶点既被标记过又不等于edgeTo[w]时，存在环\n                cycle = new Stack<Integer>();\n                for (int x = v; x != w; x = edgeTo[x]) {\n                    cycle.push(x);\n                }\n                cycle.push(w);\n                cycle.push(v);\n            }\n        }\n    }\n}\n```\n\n二分图 待更新~","tags":["算法"]},{"title":"图的基础&深度优先搜索&广度优先搜索","url":"%2F2019%2F10%2F14%2F%E5%9B%BE%E7%9A%84%E5%9F%BA%E7%A1%80-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%2F","content":"\n图是一种抽象的数学对象。\n图的种类有很多，这里只涉及到以下几种：无向图、有向图、加权图、加权有向图。\n图的实际应用包括：地图、网页信息、电路、任务调度、商业交易、配对、计算机网络、软件、社交网络等。\n关于图的研究历史悠久，这里我们只关注图的一些基本性质。\n也许包括：\n顶点与顶点之间是否存在连接？\n有多少个顶点与指定顶点相连？\n两个顶点之间最短的连通路径是什么？等等。\n这几个问题涉及到关于图的基础算法：深度优先搜索和广度优先搜索。\n\n在介绍图的基础算法之前，先来介绍一下关于图的一些术语。\n图：由一组顶点和一组能连接两个顶点的边组成的结构。\n自环：由一条连接顶点和其自身的边。\n平行边：两条连接同一对顶点的边。\n两个顶点通过一条边相连是，即相邻的。\n这条边则依附于这两个顶点。\n某个顶点依附于它的边数成为度数。\n子图是一幅图的所有边的一个子集组成的图。\n路径是由边顺序连接的一些列顶点。\n简单路径是没有重复顶点的路径。\n环是一条至少含有一条边且起点和终点相同的路径。\n简单环是一条不含有重复顶点和边的环。\n路径或者环的长度为其中所包含的边数。\n连通图：任意一个顶点都可以通过一条路径到达任意另一个顶点的图。\n无环图：不存在环的图。\n树是一个无环连通图。互不相连的树组成森林。\n密度：图中存在的顶点对占可能连接的顶点对的比例。\n以上就是关于图的一些术语。\n\n在介绍图的基础算法之前，再介绍一下无向图的概念。\n无向图是由顶点和连接顶点的边组成的。\n它的数据结构是一个数组。\n数组的索引为无向图的顶点。\n数组内的每一项都是一个邻接表，即保存了与索引顶点相邻的所有顶点的一个链表结构。\n实现这个链表结构的抽象数据类型是Bag。\n以下是Graph的Java实现：\n\n```java\nimport java.util.NoSuchElementException;\nimport java.util.Stack;\n\npublic class Graph {\n    private static final String NEWLINE = System.getProperty(\"line.separator\");\n\n    private final int V;// 顶点数\n    private int E;// 边数\n    private Bag<Integer>[] adj;\n\n    // 构造函数\n    public Graph(int V) {\n        if (V < 0)\n            throw new IllegalArgumentException(\"Number of vertices must be nonnegative\");\n        this.V = V;\n        this.E = 0;\n        adj = (Bag<Integer>[]) new Bag[V];\n        for (int v = 0; v < V; v++) {\n            adj[v] = new Bag<Integer>();\n        }\n    }\n\n    public Graph(In in) {\n        try {\n            this.V = in.readInt();\n            if (V < 0)\n                throw new IllegalArgumentException(\"Number of vertices must be nonnegative\");\n            adj = (Bag<Integer>[]) new Bag[V];\n            for (int v = 0; v < V; v++) {\n                adj[v] = new Bag<Integer>();\n            }\n            int E = in.readInt();\n            if (E < 0)\n                throw new IllegalArgumentException(\"Number of vertices must be nonnegative\");\n            for (int i = 0; i < E; i++) {\n                int v = in.readInt();\n                int w = in.readInt();\n                validateVertex(v);\n                validateVertex(w);\n                addEdge(v, w);\n            }\n        } catch (NoSuchElementException e) {\n            throw new IllegalArgumentException(\"invalid input format in Graph constructor\", e);\n        }\n    }\n\n    public Graph(Graph G) {\n        this(G.V());\n        this.E = G.E();\n        for (int v = 0; v < G.V(); v++) {\n            Stack<Integer> stack = new Stack<Integer>();\n            for (int w : G.adj[v]) {\n                stack.push(w);\n            }\n            for (int w : stack) {\n                adj[v].add(w);\n            }\n        }\n    }\n\n    public int V() {\n        return V;\n    }\n\n    public int E() {\n        return E;\n    }\n\n    public void validateVertex(int v) {\n        if (v < 0 || v > V)\n            throw new IllegalArgumentException(\"vertex \" + v + \" is not between 0 and \" + (V - 1));\n    }\n\n    public void addEdge(int v, int w) {\n        validateVertex(v);\n        validateVertex(w);\n        E++;\n        adj[v].add(w);\n        adj[w].add(v);\n    }\n\n    public Iterable<Integer> adj(int v) {\n        validateVertex(v);\n        return adj[v];\n    }\n\n    public int degree(int v) {\n        validateVertex(v);\n        return adj[v].size();\n    }\n\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        s.append(V + \" vertices \" + E + \" edges \" + NEWLINE);\n        for (int v = 0; v < V; v++) {\n            s.append(v + \": \");\n            for (int w : adj[v]) {\n                s.append(w + \" \");\n            }\n            s.append(NEWLINE);\n        }\n        return s.toString();\n    }\n}\n```\n\n在上面的内容中有说到两个顶点是否相连通问题，这个问题通常用深度优先算法来解决。\n深度优先算法，是从一个顶点出发，将路径中第一次经过的顶点和边打上标记，直至遇到已被标记过的顶点，此时返回上一层的顶点，继续标记该顶点的剩余相邻顶点，直至该顶点所有的相邻顶点都标记完毕，则返回到更上一层的顶点，继续以上操作，直至图中所有顶点都被标记完毕。\n所以深度优先算法中，一开始被标记的顶点都处于图中很深的位置。\n以下是其Java实现：\n\n```java\nimport java.util.Stack;\n\npublic class DepthFirstPaths {\n    private boolean[] marked;// 标记路径上的点\n    private int[] edgeTo;// 路径上连接最后的顶点的边\n    private final int s;// 起点\n\n    public DepthFirstPaths(Graph G, int s) {\n        this.s = s;\n        edgeTo = new int[G.V()];\n        marked = new boolean[G.V()];\n        validateVertex(s);\n        dfs(G, s);\n    }\n\n    public void dfs(Graph G, int v) {\n        marked[v] = true;\n        for (int w : G.adj(v)) {\n            if (!marked[w]){\n                edgeTo[w] = v;\n                dfs(G, w);\n            }\n        }\n    }\n\n    public boolean hasPathTo(int v){\n        validateVertex(v);\n        return marked[v];\n    }\n\n\n    public Iterable<Integer> pathTo(int v) {\n        validateVertex(v);\n        if (!hasPathTo(v))\n            return null;\n        Stack<Integer> path = new Stack<Integer>();\n        // edgeTo[]的值是指向该点的点 只要存在值则表示有边连接该顶点 \n        for (int x = v; x != s; x = edgeTo[x]) {\n            path.push(x);\n        }// s-v的路径中除去s以外的点\n        path.push(s);\n        return path;\n    }\n\n    private void validateVertex(int v) {\n        int V = marked.length;\n        if (v < 0 || v >= V)\n            throw new IllegalArgumentException(\"vertex \" + v + \" is not between 0 and \" + (V - 1));\n    }\n}\n```\n\n关于图的另一个问题是，既然顶点和顶点是相连的，那他们之间存在的路径中，哪一条是最短路径？对于这个问题，深度优先搜索是无能为力。此时就需要广度优先搜索了。\n广度优先搜索，是从一个顶点出发，将该顶点邻接表内的所有顶点都标记出来，然后在依次将该邻接表内的顶点的邻接表内的顶点也标记出来，如此一直进行下去。这种遍历方式，很适合用队列的数据结构来表示。\n假设现在需要找到从s到v的最短的路径。\n按照广度优先搜索算法来表示：从s开始，先在距离s为一条边的顶点中寻找v，若没找到，则继续在距离s为两条边的顶点中寻找，以此类推。\n下面是其java实现。\n\n```java\nimport java.util.Stack;\n\npublic class BreadthFirstPaths {\n    private static final int INFINITY = Integer.MAX_VALUE;\n\n    private boolean[] marked;// 被标记的顶点\n    private int[] edgeTo; // 返回值是指向一个顶点的另一个顶点\n    private int[] distTo;// 距离\n\n    public BreadthFirstPaths(Graph G, int s) {\n        marked = new boolean[G.V()];\n        distTo = new int[G.V()];\n        edgeTo = new int[G.V()];\n        validateVertex(s);\n        bfs(G, s);\n    }\n\n    // 广度优先搜索\n    private void bfs(Graph G, int s) {\n        Queue<Integer> q = new Queue<Integer>();\n        for (int v = 0; v < G.V(); v++) {\n            distTo[v] = INFINITY;\n        }\n        distTo[s] = 0;\n        marked[s] = true;\n        q.enqueue(s);\n\n        while (!q.isEmpty()) {\n            int v = q.dequeue();\n            for (int w : G.adj(v)) {\n                if (!marked[w]) {\n                    edgeTo[w] = v;\n                    distTo[w] = distTo[v] + 1;\n                    marked[w] = true;\n                    q.enqueue(w);\n                }\n            }\n        }\n    }\n\n    private void validateVertex(int v) {\n        int V = marked.length;\n        if (v < 0 || v <= V) {\n            throw new IllegalArgumentException(\"vertex \" + v + \" is not between 0 and \" + (V - 1));\n        }\n    }\n\n    public BreadthFirstPaths(Graph G, Iterable<Integer> sources) {\n        marked = new boolean[G.V()];\n        distTo = new int[G.V()];\n        edgeTo = new int[G.V()];\n        for (int v = 0; v < G.V(); v++) {\n            distTo[v] = INFINITY;\n        }\n        validateVertices(sources);\n        bfs(G, sources);\n    }\n\n    private void bfs(Graph G, Iterable<Integer> sources) {\n        Queue<Integer> q = new Queue<Integer>();\n        for (int s : sources) {\n            marked[s] = true;\n            distTo[s] = 0;\n            q.enqueue(s);\n        }\n        while (!q.isEmpty()) {\n            int v = q.dequeue();\n            for (int w : G.adj(v)) {\n                if (!marked[w]) {\n                    edgeTo[w] = v;\n                    distTo[w] = distTo[v] + 1;\n                    marked[w] = true;\n                    q.enqueue(w);\n                }\n            }\n        }\n    }\n\n    private void validateVertices(Iterable<Integer> vertices) {\n        if (vertices == null)\n            throw new IllegalArgumentException(\"argument is null\");\n        int V = marked.length;\n        for (int v : vertices) {\n            if (v < 0 || v >= V) {\n                throw new IllegalArgumentException(\"vertex \" + v + \" is not between 0 and \" + (V - 1));\n            }\n        }\n    }\n\n    public boolean hasPathTo(int v) {\n        validateVertex(v);\n        return marked[v];\n    }\n\n    public int distTo(int v) {\n        validateVertex(v);\n        return distTo(v);\n    }\n\n    // 最短距离路径\n    public Iterable<Integer> pathTo(int v) {\n        validateVertex(v);\n        if (!hasPathTo(v))\n            return null;\n        Stack<Integer> path = new Stack<Integer>();\n        int x;\n        for (x = v; distTo[x] != 0; x = edgeTo[x]) {\n            path.push(x);\n        }\n        path.push(x);\n        return path;\n    }\n}\n```\n","tags":["算法"]},{"title":"暂停一下","url":"%2F2019%2F10%2F13%2F%E6%9A%82%E5%81%9C%E4%B8%80%E4%B8%8B%2F","content":"\n哪怕一开始大多数单纯的想法，会随着时间一点一点的消逝，如果，\n等你发现原来我还在原地，又或者在原本你想要去的地方。你会来吗？\n时间最神奇的地方是会给你带来想要的，而不仅仅只有不好的。\n我已记不清，这一年多时间是怎么过来的。几乎每天都一样。\n我想既然没有特别的事情，那就不需要记下太多东西。\n早睡早起，规律锻炼，读一些书。多完美的生活！\n甚至都不需要自己变得更好。\n甚至有一段时间，一个人走到城市的另一半，吹吹风。\n以前认识个人很喜欢在人多的地方找个角落坐下，就这么看着周围的人来人往。\n我以为这是很孤单的事。但也许很少吐露内心的人，大抵会如此。\n\n安静着是没准备好伸手去拥抱谁。\n会变得假装外向，是因为有好事发生。\n而听故事，就只当故事听，从不计较真假，有趣就好。\n夜里出去散步吹吹风。\n这风除却了嘈杂后，还有隐约可以闻到的桂花香。\n每年九十月，这片地上从没叫人失望过。\n也包括在路上不小心踩到的不洁之物。\n想着弄干净，一秒也没想过运气会不会变好。\n趁着路边还有湿漉漉的枯叶夹在泛黄的草地上就走了过去。\n\n操场边上搭了高台，引去了一大堆看热闹的。\n来回走的路，黄灯穿透还算密实的叶子投下星星点点，梧桐好像。\n两三处热闹的商场和小区，多了点活泼的气息。\n提着的三三两两袋子，装满了不知所以的东西。\n说笑的人漫走着。\n擦肩而过时，偶尔偷听两句闲言碎语。\n居然有听到房子的事情，我天这周边的拆迁暴发户还不够多嘛。\n中产的生活方式。我以为并不是真正的生活，当比较成了目的时。\n\n以后养条狗吧，我不开心了它逗我。它不开心了我不理它，自己的事情自己做。\n老早前养过不下5只猫，这帮主子那时我们吃什么它吃什么哪像现在。\n偶尔它们自己会给自己加个餐，抓个鸟偷个鱼什么的很正常。\n自从搬了家，一切都变了。\n就养条边牧吧。\n\n西北角是一片在建高楼，跑步路过时，偶尔听见几句外地方言。\n应该说这片地方，气息早变了，热闹欢快了，甚至变得有趣了。\n我不太适应人多的地方。渺小的似乎不存在，但是又被其中的一些吸引。\n因为很多生活气息，很多现实，很多既不美也不丑的事情。\n\n我想做个路人甲。\n需要时变主角，虽力不能扛鼎，但靠得住。\n不需要时，存在感为0，自在惬意甚至有点想偷笑。\n你想见我时，我都在。不想见时，假装隐身看着你，随时准备着。\n人年轻时不都是这样嘛，怎么长大就害怕了。\n不用纠结未来，至少此时此刻我们都真实的存在着，以及真正的掌控着这杂乱的生活。\n一定不要害怕。\n(完)","tags":["日常"]},{"title":"基于线性探测法的散列表","url":"%2F2019%2F10%2F12%2F%E5%9F%BA%E4%BA%8E%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B%E6%B3%95%E7%9A%84%E6%95%A3%E5%88%97%E8%A1%A8%2F","content":"\n基于拉链法的散列表中，结点存储在链表中，而基于线性探测法的散列表，则将结点排列在一个有空元素的数组中。避免碰撞的处理方式是增加数组中的空位。\n基于线性探测法的散列表使用两个数组，一个用来存储键，一个用来存储值。通过散列函数计算出键对应的数组的索引，从而来访问数据。通常键和值的数组相同的索引对应的是一对相关联的键值对。\n其java实现如下：\n更多的关于算法的理解，则写在注释内。\n\n```java\npublic class LinearProbingHashST<Key, Value> {\n    private static final int INIT_CAPACITY = 4;\n\n    private int n;// 键值对数量\n    private int m;// 数组长度\n    private Key[] keys;\n    private Value[] vals;\n\n    public LinearProbingHashST() {\n        this(INIT_CAPACITY);\n    }\n\n    public LinearProbingHashST(int capacity) {\n        m = capacity;\n        n = 0;\n        keys = (Key[]) new Object[m];\n        vals = (Value[]) new Object[m];\n    }\n\n    public int size() {\n        return n;\n    }\n\n    public boolean isEmpty() {\n        return size() == 0;\n    }\n\n    // 是否包含给定的键\n    public boolean contains(Key key) {\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to contains() is null\");\n        return get(key) != null;\n    }\n\n    // 散列函数\n    private int hash(Key key) {\n        return (key.hashCode() & 0x7fffffff) % m;\n    }\n\n    // 调整数组的大小\n    private void resize(int capacity) {\n        LinearProbingHashST<Key, Value> temp = new LinearProbingHashST<Key, Value>(capacity);\n        for (int i = 0; i < m; i++) {\n            if (keys[i] != null) {\n                temp.put(keys[i], vals[i]);\n            }\n        }\n    }\n\n    // 插入键值对\n    public void put(Key key, Value val) {\n        // 边界情况\n        if (key == null)\n            throw new IllegalArgumentException();\n        if (val == null) {\n            delete(key);\n            return;\n        }\n        // 增加容量 以保证查找的探测次数保持在一个很小的常数范围内\n        if (n >= m / 2)\n            resize(2 * m);\n        // 查找key是否存在于数组内\n        int i;\n        for (i = hash(key); keys[i] != null; i = (i + 1) % m) {\n            if (keys[i].equals(key)) // 存在则直接修改其值\n                vals[i] = val;\n            return;\n        }\n        // 若没有找到，即遇到一个空值，则在该位置添加一个键值对\n        keys[i] = key;\n        vals[i] = val;\n        n++;\n    }\n\n    // 查找给定键的值\n    public Value get(Key key) {\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to get() is null\");\n        // 找到则返回其值\n        for (int i = hash(key); keys[i] != null; i = (i + 1) % m) {\n            if (keys[i].equals(key))\n                return vals[i];\n        }\n        return null;\n    }\n    \n    // 删除任意值 \n    public void delete(Key key) {\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to delete() is null\");\n        if (!contains(key))\n            return;\n        // 找到key的位置\n        int i = hash(key);\n        while (!key.equals(keys[i])) {\n            i = (i + 1) % m;\n        }\n        // 删除key-val\n        keys[i] = null;\n        vals[i] = null;\n        // 重新计算同一键簇的散列值 因为删除位置为空，会造成后面的结点无法被搜到\n        i = (i + 1) % m;\n        while (keys[i] != null) {\n            // 删除\n            Key keyToRehash = keys[i];\n            Value valToRehash = vals[i];\n            keys[i] = null;\n            vals[i] = null;\n            n--;\n            // 重新插入\n            put(keyToRehash, valToRehash);\n            i = (i + 1) % m;\n        }\n        n--;\n        if (n > 0 && n <= m / 8)\n            resize(m / 2);\n    }\n\n    public Iterable<Key> keys() {\n        Queue<Key> queue = new Queue<Key>();\n        for (int i = 0; i < m; i++) {\n            if (keys[i] != null)\n                queue.enqueue(keys[i]);\n        }\n        return queue;\n    }\n}\n```\n\n\n","tags":["算法"]},{"title":"基于拉链法的散列表","url":"%2F2019%2F10%2F12%2F%E5%9F%BA%E4%BA%8E%E6%8B%89%E9%93%BE%E6%B3%95%E7%9A%84%E6%95%A3%E5%88%97%E8%A1%A8%2F","content":"\n如果符号表的键都是小整数，则可以用数组来存储无序的符号表，即键为数组的索引，而数组在键 i 处存储的值即为它对应的值。那么怎样使符号表中的键转化为数组中的索引呢。\n首先，使用散列的查找算法，通常分两步，第一步是将被查找的键转化为数组的一个索引，第二步是处理碰撞冲突的过程。\n键的类型不会只有整数，还有可能是别的类型，甚至是自定义类型，所以将各种类型的键转换为一个小整数，需要一个函数，这个函数被称为散列函数。严格来说，对于每种类型的键都需要一个与之对应的散列函数。\n一个优秀的散列函数需满足以下几点要求：\n  -一致性：等价的键必然产生相等的散列值\n  -高效性：计算简便\n  -均匀性：均匀地散列所有键\n既然需要为每种数据类型提供对应的散列函数，因此在java中，所有的数据类型都继承了一个能够返回32比特整数的方法--hashCode()，与此同时，hashCode()方法与equals()方法的表现必须一致，即若两个键是相等的，则两个键的hashCode方法的返回值也相同，hashCode方法返回值不同，则两个键不相等。而hashCode方法返回值相同，两个键也可能不同，此时需要通过equals方法来判断。\n散列表的实现方式有两种：拉链法和线性探测法。\n这里先说拉链法。\n拉链法的一种实现方法是基于原始的链表数据结构，即扩展的基于无序链表的SequentialSearchST类。\n即：数组中的每一个对象都是SequentialSearchST对象。符号表的键通过散列函数得出对应的索引，然后通过索引找到链表将键值对存储在其中，不相同的键相同散列值的情况，则通过依次将键值对存储在索引对应的SequentialSearchST的链表中，从而避免的碰撞。\nJava的实现如下：\n\n```java\npublic class SeparateChainingHashST<Key, Value> {\n    private static final int INIT_CAPACITY = 4;\n\n    private int n;\n    private int m;\n    private SequentialSearchST<Key, Value>[] st;\n\n    public SeparateChainingHashST() {\n        this(INIT_CAPACITY);\n    }\n\n    public SeparateChainingHashST(int m) {\n        this.m = m;\n        st = (SequentialSearchST<Key, Value>[]) new SequentialSearchST[m]; // 数组\n        for (int i = 0; i < m; i++) {\n            st[i] = new SequentialSearchST<Key, Value>(); // 数组中的每一项都是一条链表\n        }\n    }\n\n    private void resize(int chains) {\n        SeparateChainingHashST<Key, Value> temp = new SeparateChainingHashST<Key, Value>(chains);\n        for (int i = 0; i < m; i++) {\n            for (Key key : st[i].keys()) {\n                temp.put(key, st[i].get(key));\n            }\n        }\n        this.m = temp.m;\n        this.n = temp.n;\n        this.st = temp.st;\n    }\n\n    // 散列函数 or hash函数\n    private int hash(Key key) {\n        return (key.hashCode() & 0x7fffffff) % m;\n    }\n\n    public int size() {\n        return n;\n    }\n\n    public boolean isEmpty() {\n        return size() == 0;\n    }\n\n    public boolean contains(Key key) {\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to contains() is null\");\n        return get(key) != null;\n    }\n\n    public Value get(Key key) {\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to get() is null\");\n        int i = hash(key);\n        return st[i].get(key);\n    }\n\n    public void put(Key key, Value val) {\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to put() is null\");\n        if (val == null) {\n            delete(key);\n            return;\n        }\n\n        if (n >= 10 * m)\n            resize(2 * m);\n        int i = hash(key);\n        if (!st[i].contains(key))\n            n++;\n        st[i].put(key, val);\n    }\n\n    public void delete(Key key) {\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to delete() is null\");\n        int i = hash(key);\n        if (st[i].contains(key))\n            n--;\n        st[i].delete(key);\n        if (m > INIT_CAPACITY && n <= 2 * m)\n            resize(m / 2);\n    }\n\n    public Iterable<Key> keys() {\n        Queue<Key> queue = new Queue<Key>();\n        for (int i = 0; i < m; i++) {\n            for (Key key : st[i].keys())\n                queue.enqueue(key);\n        }\n        return queue;\n    }\n}\n```\n\n","tags":["算法"]},{"title":"平衡查找树","url":"%2F2019%2F10%2F07%2F%E5%B9%B3%E8%A1%A1%E6%9F%A5%E6%89%BE%E6%A0%91%2F","content":"\n什么是平衡查找树？\n平衡查找树是一颗空树，或者非空时任意结点的左右子树也是平衡二叉树，并且高度差的绝对值不大于1。平衡查找树的种类很多。Algorithm书中提到的有2-3树和红黑树。\n\n2-3树是一颗空树，或者不是空树时，树中存在两种结点即：2-结点和3-结点。\n2-结点包含单个键和左右两条链接，左链接指向的左子树中的键均小于该结点，右链接指向的右子树中的键都大于该结点。\n3-结点包含2个键和三条链接，左链接指向的左子树中的键均小于该结点，中链接指向的子树中的键大小介于该结点的两个键之间，右链接指向的右子树中的键均大于该结点。\n而2-3树的叶子结点的链接指向空树，均为空链接。\n完美平衡的2-3树，则指的是所有空链接到根结点的距离相等。\n2-3树的查找和二叉树的查找类似。\n插入新的结点，则需要分以下几种情况。\n新结点在插入之前，需要进行一次未命中的查找，以确定新结点插入的位置。\n若插入的位置在2-结点上，则直接将新结点与该结点组合长一个3-结点。\n若插入的位置在3-结点上，且这颗树只有这一个结点，则将3-结点临时变成4-结点，然后将这个4-结点的中间元素提出，将剩余结点变成2个2-结点，树高加1，以保持树的平衡。\n若插入的位置在3-结点上，且这个结点的父结点是2-结点，则将3-结点临时变为4-结点，然后将4-结点的中间元素插入到父结点2-结点中，并将父结点变成3-结点，4-结点的剩余元素变成2个2-结点。\n若插入的位置在3-结点上，且这个结点的父结点是3-结点，则将3-结点临时变为4-结点，然后将4-几点的中间元素插入到父结点3-结点中，这时父结点3-结点也变成了4-结点，则继续将父结点中的中间元素插入到其父结点中，以此向上不断插入，直至遇到一个2-结点，将2-结点变成3-结点，或者遇到根结点是3-结点，则将根结点临时变成4-结点，然后将该结点的中间元素提出变成根结点，剩余结点变成2个2-结点，树高加1。\n\n红黑树是一颗2-3树，也是一颗二叉查找树。\n在红黑树中，3-结点内的两个键，以一条红色链接连接起来，且链接为左链接。而普通链接则为黑色链接。\n没有任何一个结点同时和两条红色链接相连。\n完美黑色平衡的红黑树，任意空链接到根节点的路径上黑色链接数量相同。\n红黑树的实现，put和delete方法略复杂。以下是java实现：\n\n```java\nimport java.util.NoSuchElementException;\n\npublic class RedBlackBST<Key extends Comparable<Key>, Value> {\n    private static final boolean RED = true;\n    private static final boolean BLACK = false;\n\n    private Node root;\n\n    private class Node {\n        private Key key;\n        private Value val;\n        private Node left, right;\n        private boolean color;\n        private int size;\n\n        public Node(Key key, Value val, boolean color, int size) {\n            this.key = key;\n            this.val = val;\n            this.color = color;\n            this.size = size;\n        }\n    }\n\n    public RedBlackBST() {\n    }\n\n    // 结点辅助方法\n\n    private boolean isRed(Node x) {\n        if (x == null)\n            return false;\n        return x.color == RED;\n    }\n\n    private int size(Node x) {\n        if (x == null)\n            return 0;\n        return x.size;\n    }\n\n    public int size() {\n        return size(root);\n    }\n\n    public boolean isEmpty() {\n        return root == null;\n    }\n\n    // 标准的BST的搜索方法\n\n    // 返回给定键的值\n    public Value get(Key key) {\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to get() is null\");\n        return get(root, key);\n    }\n\n    private Value get(Node x, Key key) {\n        while (x != null) {\n            int cmp = key.compareTo(x.key);\n            if (cmp < 0)\n                x = x.left;\n            if (cmp > 0)\n                x = x.right;\n            else\n                return x.val;\n        }\n        return null;\n    }\n\n    public boolean contains(Key key) {\n        return get(key) != null;\n    }\n\n    public void put(Key key, Value val) {\n        if (key == null)\n            throw new IllegalArgumentException(\"first argument to put() is null\");\n        if (val == null) {\n\n            return;\n        }\n        root = put(root, key, val);\n        root.color = BLACK;\n    }\n    \n    // 二分查找，命中则修改key的val，否则新建一个新的key-val\n    private Node put(Node h, Key key, Value val) {\n        if (h == null)\n            return new Node(key, val, RED, 1);\n\n        int cmp = key.compareTo(h.key);\n        if (cmp < 0)\n            h.left = put(h.left, key, val);\n        if (cmp > 0)\n            h.right = put(h.right, key, val);\n        else\n            h.val = val;\n            \n        // key-val修改或添加后，需要进行红黑边的旋转和修复\n        if (isRed(h.right) && !isRed(h.left))\n            h = rotateLeft(h);\n        if (isRed(h.left) && isRed(h.left.left))\n            h = rotateRight(h);\n        if (isRed(h.left) && isRed(h.right))\n            flipColors(h);\n        h.size = size(h.left) + size(h.right) + 1;\n        return h;\n    }\n\n    // 红黑树删除结点的方法\n\n    // 删除最小的键\n    public void deleteMin() {\n        if (isEmpty())\n            throw new NoSuchElementException(\"BST underflow\");\n        // 假设红黑树是由 根结点和左右子结点组成，则删除最小键的时候需要将这三点合为4-结点\n        if (!isRed(root.left) && !isRed(root.right))\n            root.color = RED;\n        root = deleteMin(root);\n        if (!isEmpty())\n            root.color = BLACK;\n    }\n\n    private Node deleteMin(Node h) {\n        if (h.left == null) {\n            return null;\n        }\n        // 若h结点的左子树和左子树的左子树均为黑色链接 则删除结点时必须将2-结点变成3-结点\n        if (!isRed(h.left) && !isRed(h.left.left)) {\n            h = moveRedLeft(h);\n        }\n\n        h.left = deleteMin(h.left);\n        return balance(h);// 配平\n    }\n\n    // 删除最大的键\n\n    public void deleteMax() {\n        if (isEmpty())\n            throw new NoSuchElementException(\"BST underflow\");\n        // 假设红黑树是由 根结点和左右子结点组成，则删除最小键的时候需要将这三点合为4-结点\n        if (!isRed(root.left) && !isRed(root.right))\n            root.color = RED;\n        root = deleteMax(root);\n        if (!isEmpty())\n            root.color = BLACK;\n    }\n\n    private Node deleteMax(Node h) {\n        // 若左结点为红链接，则转移到右链接上，以便删除时候右链接不是2-结点\n        if (isRed(h.left))\n            h = rotateRight(h);\n        if (h.right == null)\n            return null;\n        // 若h结点的右链接和右链接的左链接是黑色链接，在删除右链接时，需将右链接变成3-结点\n        if (!isRed(h.right) && !isRed(h.right.left))\n            h = moveRedRight(h);\n        h.right = deleteMax(h.right);\n        return balance(h);\n    }\n\n    // 删除任意结点\n\n    public void delete(Key key) {\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to delete() is null\");\n        if (!contains(key))\n            return;\n\n        if (!isRed(root.left) && !isRed(root.right))\n            root.color = RED;\n        root = delete(root, key);\n        if (!isEmpty())\n            root.color = BLACK;\n    }\n\n    private Node delete(Node h, Key key) {\n        if (key.compareTo(h.key) < 0) { // 小于\n            // 保证查找过程中任意当前结点都不是2-结点\n            if (!isRed(h.left) && !isRed(h.left.left)) \n                h = moveRedLeft(h);\n            h.left = delete(h.left, key);\n        } else { \n            // 若左结点为红链接，则右转，以便保证当前结点不是2-结点\n            if (isRed(h.left)) \n                h = rotateRight(h);\n            // 找到要删除的结点，其父结点右链接为空，则转移该结点到右链接上\n            if (key.compareTo(h.key) == 0 && (h.right == null))\n                h = moveRedRight(h);\n            // 找到要删除的结点\n            if (key.compareTo(h.key) == 0) {\n                Node x = min(h.right);// 后继结点\n                h.key = x.key;\n                h.val = x.val;\n                h.right = deleteMin(h.right);\n            } else\n                h.right = delete(h.right, key);\n        }\n        return balance(h);\n    }\n    // 红黑树辅助方法\n\n    // 链接的旋转，并不涉及到颜色,主要提供给插入方法使用\n    // 左链接右转\n    private Node rotateRight(Node h) {\n        Node x = h.left;\n        h.left = x.right;\n        x.right = h;\n        x.color = x.right.color;\n        x.right.color = RED;\n        x.size = h.size;\n        h.size = size(h.left) + size(h.right) + 1;\n        return x;\n    }\n\n    // 右链接左转\n    private Node rotateLeft(Node h) {\n        Node x = h.right;\n        h.right = x.left;\n        x.left = h;\n        x.color = x.left.color;\n        x.left.color = RED;\n        x.size = h.size;\n        h.size = size(h.left) + size(h.right) + 1;\n        return x;\n    }\n\n    // 颜色切换\n    private void flipColors(Node h) {\n        h.color = !h.color;\n        h.left.color = !h.left.color;\n        h.right.color = !h.right.color;\n    }\n\n    // h为红色，它的左结点和左结点的左结点都是普通链接 使h的左结点或者左结点的任意一个结点为红链接\n    // 为了在删除最小结点的时候，使被删除的结点为非2-结点\n    private Node moveRedLeft(Node h) {\n        flipColors(h);\n        if (isRed(h.right.left)) {\n            h.right = rotateRight(h.right);\n            h = rotateLeft(h);\n            flipColors(h);\n        }\n        return h;\n    }\n\n    // h为红色，它的右结点和右结点的左结点为普通链接，使h的右节点或者右节点的任意一个结点为红链接\n    // 为了在删除最大结点的时候，使被删除的结点为非2-结点\n    private Node moveRedRight(Node h) {\n        flipColors(h);\n        if (isRed(h.left.left)) {\n            h = rotateLeft(h);\n            flipColors(h);\n        }\n        return h;\n    }\n\n    // 恢复红黑树的平衡\n    private Node balance(Node h) {\n        if (isRed(h.right))\n            h = rotateLeft(h);\n        if (isRed(h.left) && isRed(h.left.left))\n            h = rotateRight(h);\n        if (isRed(h.left) && isRed(h.right))\n            flipColors(h);\n        h.size = size(h.left) + size(h.right) + 1;\n        return h;\n    }\n\n    // 工具类函数\n\n    // 返回树高\n    public int height() {\n        return height(root);\n    }\n\n    private int height(Node x) {\n        if (x == null)\n            return -1;\n        return 1 + Math.max(height(x.left), height(x.right));\n    }\n\n    // 有序符号表方法\n\n    // 返回最小键\n    public Key min() {\n        if (isEmpty())\n            throw new NoSuchElementException(\"calls min() with empty symbol table\");\n        return min(root).key;\n    }\n\n    private Node min(Node x) {\n        if (x.left == null)\n            return x;\n        else\n            return min(x.left);\n    }\n\n    // 返回最大键\n\n    public Key max() {\n        if (isEmpty())\n            throw new NoSuchElementException(\"calls max() with empty symbol table\");\n        return max(root).key;\n    }\n\n    private Node max(Node x) {\n        if (x == null)\n            return x;\n        else\n            return max(x.right);\n    }\n\n    // 返回<=给定键的最大键\n    public Key floor(Key key) {\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to floor() is null\");\n        if (isEmpty())\n            throw new IllegalArgumentException(\"calls floor() with empty symbol table\");\n        return floor(root, key).key;\n    }\n\n    private Node floor(Node x, Key key) {\n        if (x == null)\n            return null;\n        int cmp = key.compareTo(x.key);\n        if (cmp < 0)\n            return floor(x.left, key);\n        if (cmp == 0)\n            return x;\n        Node t = floor(x.right, key);\n        if (t != null)\n            return t;\n        else\n            return x;\n    }\n\n    // 返回>=给定键的最小键\n    public Key ceiling(Key key) {\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to ceiling() is null\");\n        if (isEmpty())\n            throw new IllegalArgumentException(\"calls ceiling() with empty symbol table\");\n        return ceiling(root, key).key;\n    }\n\n    private Node ceiling(Node x, Key key) {\n        if (x == null)\n            return null;\n        int cmp = key.compareTo(x.key);\n        if (cmp == 0)\n            return x;\n        if (cmp > 0)\n            return ceiling(x.right, key);\n        Node t = floor(x.left, key);\n        if (t != null)\n            return t;\n        else\n            return x;\n    }\n\n    // 返回符号表中排序k的键\n    public Key select(int k) {\n        if (k < 0 || k >= size())\n            throw new IllegalArgumentException(\"argument to select() is incvalid: \" + k);\n        Node x = select(root, k);\n        return x.key;\n    }\n\n    private Node select(Node x, int k) {\n        int t = size(x.left);\n        if (t > k)\n            return select(x.left, k);\n        else if (t < k)\n            return select(x.right, k - t - 1);\n        else\n            return x;\n    }\n\n    // 返回指定key在符号表中的排序\n    public int rank(Key key) {\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to rank() is null\");\n        return rank(key, root);\n    }\n\n    private int rank(Key key, Node x) {\n        if (x == null)\n            return 0;\n        int cmp = key.compareTo(x.key);\n        if (cmp < 0)\n            return rank(key, x.left);\n        if (cmp > 0)\n            return 1 + size(x.left) + rank(key, x.right);\n        else\n            return size(x.left);\n    }\n\n    // 范围内计算和范围内搜索\n\n    public Iterable<Key> keys() {\n        if (isEmpty())\n            return new Queue<Key>();\n        return keys(min(), max());\n    }\n\n    public Iterable<Key> keys(Key lo, Key hi) {\n        if (lo == null)\n            throw new IllegalArgumentException(\"first argument to keys() is null\");\n        if (hi == null)\n            throw new IllegalArgumentException(\"second argument to keys() is null\");\n\n        Queue<Key> queue = new Queue<Key>();\n        keys(root, queue, lo, hi);\n        return queue;\n    }\n\n    private void keys(Node x, Queue<Key> queue, Key lo, Key hi) {\n        if (x == null)\n            return;\n        int cmplo = lo.compareTo(x.key);\n        int cmphi = hi.compareTo(x.key);\n        if (cmplo < 0)\n            keys(x.left, queue, lo, hi);\n        if (cmplo <= 0 && cmphi >= 0)\n            queue.enqueue(x.key);\n        if (cmphi > 0)\n            keys(x.right, queue, lo, hi);\n    }\n\n    public int size(Key lo, Key hi) {\n        if (lo == null)\n            throw new IllegalArgumentException();\n        if (hi == null)\n            throw new IllegalArgumentException();\n\n        if (lo.compareTo(hi) > 0)\n            return 0;\n        if (contains(hi))\n            return rank(hi) - rank(lo) + 1;\n        else\n            return rank(hi) - rank(lo);\n    }\n\n    // 余下的检查红黑树完整性的代码 略；\n}\n```\n\n\n","tags":["算法"]},{"title":"二叉查找树","url":"%2F2019%2F10%2F03%2F%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%2F","content":"\n二叉查找树是由节点和链接组成的数据结构，其中每个节点只有唯一的父节点(根节点没有父节点)，每个节点最多有两个链接，分别指向左右子节点。左右子节点也可以看成是另一颗树的根节点。\n二叉查找树的每个节点中存储着一个Comparable的键和相关联的值。\n以上就是二叉查找树的结构构成。\n其还有以下一些特点：\n**每个节点中的键都大于其左子树中的任意节点中的键**\n**每个节点中的键都小于其右子树中的任意节点中的键**\n**最底层的节点一定左右子树为空**\n**最小节点的左子树为空**\n**最大节点的右子树为空**\n二叉查找树的java实现中，查找方法get，会先将给定的key和二叉查找树根节点的key进行比较，小于则在根节点的左子树中继续查找，直至找到相等的key或者返回null为止。大于则在根节点的右子树中继续查找。给定的key等于节点的key时，则直接返回该节点。\n\n插入方法put，也会先将给定的key和二叉查找树根节点的key比较，小于则将给定的key-val放置在根节点的左子树中，大于则放置在根节点的右子树中，若等于则直接更新该节点的val值。\n\n删除最小节点的方法deleteMin，会在根节点的左子树中查找最小的节点，该节点不存在左子树，删除时将指向该节点的链接指向该节点的右子树，若该节点的右子树不存在，则指向null。而该节点因为没有被链接引用，会被垃圾回收。\n\n删除最大节点的方法deleteMax，会在根节点的右子树中查找最大的节点，该节点不存在右子树，删除时将指向该节点的链接指向该节点的左子树，若该节点的左子树不存在，则指向null。而该节点因为没有被链接引用，最终会被垃圾回收。\n\n删除任意节点的方法delete，会根据节点类型的不同，分三种情况处理。\n当然一开始需要找到该节点。查找方法和get方法类似，即和根节点的key进行比较，若小于根节点，则在左子树中继续查找；若大于根节点，则在右子树中查找。\n若查找，到达二叉查找树的叶子节点处，仍然没有找到和给定key相等的key则树中不存在该节点，返回null。\n若找到和给定key相等的节点，则：\n1. 若该节点只有左节点时，则将指向该节点的链接指向左节点。\n2. 若该节点只有右节点时，则将指向该节点的链接指向右节点。\n3. 若该节点存在左右子树时，此时需要在其右子树中找一个后继节点替换到该节点位置，以保证二叉查找树的有序。\n具体步骤如下：\n1).先将指向将被删除的节点x的链接保存在t中\n2).将x指向它的后继节点，即右子树中最小的节点min(t.right)\n3).x的右链接指向deleteMin(t.right)\n4).x的左链接指向t.left\n\n找到小于等于给定键的最大节点的floor，则依据以下规则判断：\n先将给定键key与根节点的key进行比较，当小于根节点时，则小于等于给定key的节点一定在根节点的左子树中。若大于根节点，则只有当右子树中存在小于等于给定key的节点，否则小于等于给定key的节点就是根节点。\n\n而找到大于等于给定键的最小节点的ceiling，则依据以下规则判断：\n先将给定key和根节点的key进行比较，当大于根节点时，则大于等于给定key的节点一定在右子树中。若小于根节点，则只有左子树中存在大于等于给定key的节点，否则大于等于给定key的最小节点就是根节点。\n\n其余的方法的实现，都不是很复杂。可以直接参考以下java实现：\n\n```java\nimport java.util.NoSuchElementException;\n\npublic class BST<Key extends Comparable<Key>, Value> {\n    private Node root;\n\n    private class Node {\n        private Key key;\n        private Value val;\n        private Node left;\n        private Node right;\n        private int size;\n\n        public Node(Key key, Value val, int size) {\n            this.key = key;\n            this.val = val;\n            this.size = size;\n        }\n    }\n\n    public BST() {\n    }\n\n    public boolean isEmpty() {\n        return size() == 0;\n    }\n\n    public int size() {\n        return size(root);\n    }\n\n    private int size(Node x) {\n        if (x == null)\n            return 0;\n        else\n            return x.size;\n    }\n\n    public boolean contains(Key key) {\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to contains() is null\");\n        return get(key) != null;\n    }\n\n    // 获取给定key的val\n    public Value get(Key key) {\n        return get(root, key);\n    }\n\n    private Value get(Node x, Key key) {\n        if (key == null)\n            throw new IllegalArgumentException(\"call get() with a null key\");\n        if (x == null)\n            return null;\n        int cmp = key.compareTo(x.key);\n        if (cmp < 0)\n            return get(x.left, key);\n        if (cmp > 0)\n            return get(x.right, key);\n        else\n            return x.val;\n    }\n\n    // 插入给定的键值对\n    public void put(Key key, Value val) {\n        if (key == null)\n            throw new IllegalArgumentException(\"call put() with a null key\");\n        if (val == null) {\n            delete(key);\n            return;\n        }\n        root = put(root, key, val);\n        // 断言 assert\n    }\n\n    private Node put(Node x, Key key, Value val) {\n        if (x == null)\n            return new Node(key, val, 1);\n        int cmp = key.compareTo(x.key);\n        if (cmp < 0)\n            x.left = put(x.left, key, val);\n        if (cmp > 0)\n            x.right = put(x.right, key, val);\n        else\n            x.val = val;\n        x.size = 1 + size(x.left) + size(x.right);\n        return x;\n    }\n\n    // 删除最小键\n    public void deleteMin() {\n        if (isEmpty())\n            throw new NoSuchElementException(\"Symbol table underflow\");\n        root = deleteMin(root);\n        // assert\n    }\n\n    private Node deleteMin(Node x) {\n        if (x.left == null)// 最终遇到某个节点的左链接为空\n            return x.right;// 返回该节点的右链接 赋值给该节点父节点的左连接，也就是链接到此节点的链接\n        x.left = deleteMin(x.left);// 递归的搜寻左子树\n        x.size = size(x.left) + size(x.right) + 1;\n        return x;\n    }\n\n    // 删除最大键\n    public void deleteMax() {\n        if (isEmpty())\n            throw new NoSuchElementException(\"Symbol table underflow\");\n        root = deleteMax(root);\n        // assert\n    }\n\n    private Node deleteMax(Node x) {\n        if (x.right == null) {\n            return x.left;\n        }\n        x.right = deleteMax(x.right);\n        x.size = size(x.right) + size(x.left) + 1;\n        return x;\n    }\n\n    // 删除键\n    public void delete(Key key) {\n        if (key == null)\n            throw new IllegalArgumentException(\"calls delete() with a null key\");\n        root = delete(root, key);\n        // assert\n    }\n\n    private Node delete(Node x, Key key) {\n        if (x == null)\n            return null;\n        int cmp = key.compareTo(x.key);\n        if (cmp < 0)\n            x.left = delete(x.left, key);\n        else if (cmp > 0)\n            x.right = delete(x.right, key);\n        else {\n            // 节点有单个子节点\n            if (x.right == null)\n                return x.left;\n            if (x.left == null)\n                return x.right;\n            // 节点有两个子节点\n            Node t = x;// 将指向即将被删除的节点的链接保存在t里\n            x = min(t.right);// 将指向后继节点的链接保存在x里\n            x.right = deleteMin(t.right);// 必然会删除x指向的结点，并返回新的有序的子树\n            x.left = t.left;\n        }\n        x.size = size(x.left) + size(x.right) + 1;\n        return x;\n    }\n\n    // 找到最小的键\n    public Key min() {\n        if (isEmpty())\n            throw new IllegalArgumentException(\"calls min() with empty symbol table\");\n        return min(root).key;\n    }\n\n    private Node min(Node x) {\n        if (x.left == null)\n            return x;\n        else\n            return min(x.left);\n    }\n\n    // 找到最大的键\n\n    public Key max() {\n        if (isEmpty())\n            throw new IllegalArgumentException(\"calls max() with empty symbol table\");\n        return max(root).key;\n    }\n\n    private Node max(Node x) {\n        if (x.right == null)\n            return x;\n        else\n            return max(x.right);\n    }\n\n    // 返回<=给定键的最大键\n    public Key floor(Key key) {\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to floor() is null\");\n        if (isEmpty())\n            throw new NoSuchElementException(\"calls floor() with empty symbol table\");\n        Node x = floor(root, key);\n        if (x == null)\n            return null;\n        else\n            return x.key;\n    }\n\n    private Node floor(Node x, Key key) {\n        if (x == null)\n            return null;// x不存在的情况\n        int cmp = key.compareTo(x.key);// 比较\n        if (cmp == 0)\n            return x;// 相等\n        if (cmp < 0)\n            return floor(x.left, key);// 小于\n        Node t = floor(x.right, key);// 大于\n        if (t != null)\n            return t;\n        else\n            return x;\n    }\n\n    // 返回>=给定键的最小键\n\n    public Key ceiling(Key key) {\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to ceiling() is null\");\n        if (isEmpty())\n            throw new NoSuchElementException(\"calls ceiling() with empty symbol table\");\n        Node x = ceiling(root, key);\n        if (x == null)\n            return null;\n        else\n            return x.key;\n    }\n\n    private Node ceiling(Node x, Key key) {\n        if (x == null)\n            return null;// x不存在\n        int cmp = key.compareTo(x.key);// 比较\n        if (cmp == 0)\n            return x;// 等于\n        if (cmp < 0) {// 小于\n            Node t = ceiling(x.left, key);\n            if (t != null)\n                return t;\n            else\n                return x;\n        }\n        return ceiling(x.right, key);// 大于\n    }\n\n    // 返回给定排名的键\n    public Key select(int k) {\n        if (k < 0 || k >= size())\n            throw new IllegalArgumentException(\"argument to select() is invalid: \" + k);\n        Node x = select(root, k);\n        return x.key;\n    }\n\n    private Node select(Node x, int k) {\n        if (x == null)\n            return null;\n        int t = size(x.left);\n        if (t > k)\n            return select(x.left, k);\n        else if (t < k)\n            return select(x.right, k - t - 1);\n        else\n            return x;\n    }\n\n    // 返回符号表中小于给定键的键的数量\n    public int rank(Key key) {\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to rank() is null\");\n        return rank(key, root);\n    }\n\n    private int rank(Key key, Node x) {\n        if (x == null)\n            return 0;\n        int cmp = key.compareTo(x.key);\n        if (cmp < 0)\n            return rank(key, x.left);\n        else if (cmp > 0)\n            return 1 + size(x.left) + rank(key, x.right);\n        else\n            return size(x.left);\n    }\n\n    public Iterable<Key> keys() {\n        if (isEmpty())\n            return new Queue<Key>();\n        return keys(min(), max());\n    }\n\n    public Iterable<Key> keys(Key lo, Key hi) {\n        if (lo == null)\n            throw new IllegalArgumentException(\"first argument to keys() is null\");\n        if (hi == null)\n            throw new IllegalArgumentException(\"second argument to keys() is null\");\n\n        Queue<Key> queue = new Queue<Key>();\n        keys(root, queue, lo, hi);\n        return queue;\n    }\n\n    private void keys(Node x, Queue<Key> queue, Key lo, Key hi) {\n        if (x == null)\n            return;\n        int cmplo = lo.compareTo(x.key);\n        int cmphi = hi.compareTo(x.key);\n        if (cmplo < 0)\n            keys(x.left, queue, lo, hi);\n        if (cmplo <= 0 && cmphi >= 0)\n            queue.enqueue(x.key);\n        if (cmphi > 0)\n            keys(x.right, queue, lo, hi);\n    }\n\n    public int size(Key lo, Key hi) {\n        if (lo == null)\n            throw new IllegalArgumentException(\"first argument to size() is null\");\n        if (hi == null)\n            throw new IllegalArgumentException(\"second argument to size() is null\");\n\n        if (lo.compareTo(hi) > 0)\n            return 0;\n        if (contains(hi))\n            return rank(hi) - rank(lo) + 1;\n        else\n            return rank(hi) - rank(lo);\n    }\n\n    public int height() {\n        return height(root);\n    }\n\n    private int height(Node x) {\n        if (x == null)\n            return -1;\n        return 1 + Math.max(height(x.left), height(x.right));\n    }\n\n    public Iterable<Key> levelOrder() {\n        Queue<Key> keys = new Queue<Key>();\n        Queue<Node> queue = new Queue<Node>();\n        queue.enqueue(root);\n        while (!queue.isEmpty()) {\n            Node x = queue.dequeue();\n            if (x == null)\n                continue;\n            keys.enqueue(x.key);\n            queue.enqueue(x.left);\n            queue.enqueue(x.right);\n        }\n        return keys;\n    }\n\n    // check integrity of BST data structure\n    private boolean check() {\n        if (!isBST())\n            StdOut.println(\"Not in symmetric order\");\n        if (!isSizeConsistent())\n            StdOut.println(\"Subtree counts not consistent\");\n        if (!isRankConsistent())\n            StdOut.println(\"Ranks not consistent\");\n        return isBST() && isSizeConsistent() && isRankConsistent();\n    }\n\n    private boolean isBST() {\n        return isBST(root, null, null);\n    }\n\n    private boolean isBST(Node x, Key min, Key max) {\n        if (x == null)\n            return true;\n        if (min != null && x.key.compareTo(min) <= 0)\n            return false;\n        if (max != null && x.key.compareTo(max) >= 0)\n            return false;\n        return isBST(x.left, min, x.key) && isBST(x.right, x.key, max);\n    }\n\n    private boolean isSizeConsistent() {\n        return isSizeConsistent(root);\n    }\n\n    private boolean isSizeConsistent(Node x) {\n        if (x == null)\n            return true;\n        if (x.size != size(x.left) + size(x.right) + 1)\n            return false;\n        return isSizeConsistent(x.left) && isSizeConsistent(x.right);\n    }\n\n    private boolean isRankConsistent() {\n        for (int i = 0; i < size(); i++)\n            if (i != rank(select(i)))\n                return false;\n        for (Key key : keys())\n            if (key.compareTo(select(rank(key))) != 0)\n                return false;\n        return true;\n    }\n}\n```\n","tags":["算法"]},{"title":"基于有序数组的二分查找","url":"%2F2019%2F10%2F03%2F%E5%9F%BA%E4%BA%8E%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%2F","content":"\n二分查找采用的是双数组方式，将键和值分开存储。在Java的实现中rank方法是实现其他方法的关键之一。\n实现如下：\n\n```java\nimport java.util.NoSuchElementException;\n\npublic class BinarySearchST<Key extends Comparable<Key>, Value> {\n    private static final int INI_CAPACITY = 2;\n    private Key[] keys;\n    private Value[] vals;\n    private int n = 0;\n\n    public BinarySearchST() {\n        this(INI_CAPACITY);\n    }\n\n    public BinarySearchST(int capacity) {\n        keys = (Key[]) new Comparable[capacity];\n        vals = (Value[]) new Object[capacity];\n    }\n\n    private void resize(int capacity) {// 扩大容量\n        Key[] tempk = (Key[]) new Comparable[capacity];\n        Value[] tempv = (Value[]) new Object[capacity];\n        for (int i = 0; i < n; i++) {\n            tempk[i] = keys[i];\n            tempv[i] = vals[i];\n        }\n        vals = tempv;\n        keys = tempk;\n    }\n\n    public int size() {\n        return n;\n    }\n\n    public boolean isEmpty() {\n        return size() == 0;\n    }\n\n    public boolean contains(Key key) {\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to contains() is null\");\n        return get(key) != null;\n    }\n\n    public Value get(Key key) {\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to get() is null\");\n        if (isEmpty())\n            return null;\n        int i = rank(key);\n        if (i < n && keys[i].compareTo(key) == 0)\n            return vals[i];\n        return null;\n    }\n\n    public int rank(Key key) {// 返回小于给定键的键的数量\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to rank() is null\");\n\n        int lo = 0, hi = n - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            int cmp = key.compareTo(keys[mid]);\n            if (cmp < 0)\n                hi = mid - 1;\n            else if (cmp > 0)\n                lo = mid + 1;\n            else\n                return mid; // 命中查找\n        }\n        return lo;// 当lo>=hi时，若key > keys[mid]的值，则返回lo\n    }\n\n    public void put(Key key, Value val) {\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to put() is null\");\n        if (val == null) {\n            delete(key);\n            return;\n        }\n        int i = rank(key);\n        if (i < n && keys[i].compareTo(key) == 0) {\n            vals[i] = val;\n            return;\n        }\n\n        if (n == keys.length)\n            resize(2 * keys.length);\n\n        for (int j = n; j > i; j--) {// 整体右移\n            keys[j] = keys[j - 1];\n            vals[j] = vals[j - 1];\n        }\n        keys[i] = key;\n        vals[i] = val;\n        n++;\n\n        assert check();\n    }\n\n    public void delete(Key key) {\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to delete() is null\");\n        if (isEmpty())\n            return;\n\n        int i = rank(key);\n\n        if (i == n || keys[i].compareTo(key) != 0) {\n            return;\n        }\n\n        for (int j = i; j < n - 1; j++) {// 整体左移动\n            keys[j] = keys[j + 1];\n            vals[j] = vals[j + 1];\n        }\n        n--;\n        keys[n] = null;\n        vals[n] = null;\n\n        if (n > 0 && n == keys.length / 4)\n            resize(keys.length / 2); // 容量的变化\n        assert check();\n    }\n\n    public void deleteMin() {\n        if (isEmpty())\n            throw new NoSuchElementException(\"Symbol table underflow error\");\n        delete(min());\n    }\n\n    public Key min() {\n        if (isEmpty())\n            throw new NoSuchElementException(\"called min() with empty symbol table\");\n        return keys[0];\n    }\n\n    public void deleteMax() {\n        if (isEmpty())\n            throw new NoSuchElementException(\"Symbol table underflow error\");\n        delete(max());\n    }\n\n    public Key max() {\n        if (isEmpty())\n            throw new NoSuchElementException(\"called max() with empty symbol table\");\n        return keys[n - 1];\n    }\n\n    public Key select(int k) {\n        if (k < 0 || k >= size()) {\n            throw new IllegalArgumentException(\"called select() with invalid argument: \" + k);\n        }\n        return keys[k];\n    }\n\n    public Key floor(Key key) {// 返回符号表中<=给定键的最大key\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to floor() is null\");\n        int i = rank(key);\n        if (i < n && key.compareTo(keys[i]) == 0)\n            return keys[i];\n        if (i == 0)\n            return null;\n        else\n            return keys[i - 1];\n    }\n\n    public Key ceiling(Key key) {// 返回符号表中>=给定键的最小key\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to ceiling() is null\");\n        int i = rank(key);\n        if (i == n)\n            return null;\n        else\n            return keys[i];\n    }\n\n    public int size(Key lo, Key hi) {// 计算指定两个键之间的键的数量\n        if (lo == null)\n            throw new IllegalArgumentException(\"first argument to size() is null\");\n        if (hi == null)\n            throw new IllegalArgumentException(\"second argument to size() is null\");\n        if (lo.compareTo(hi) > 0)\n            return 0;\n        if (contains(hi))\n            return rank(hi) - rank(lo) + 1;\n        else\n            return rank(hi) - rank(lo);\n    }\n\n    public Iterable<Key> keys() {\n        return keys(min(), max());\n    }\n\n    public Iterable<Key> keys(Key lo, Key hi) {\n        if (lo == null)\n            throw new IllegalArgumentException(\"first argument to size() is null\");\n        if (hi == null)\n            throw new IllegalArgumentException(\"second argument to size() is null\");\n\n        Queue<Key> queue = new Queue<Key>();\n        if (lo.compareTo(hi) > 0)\n            return queue;\n        for (int i = rank(lo); i < rank(hi); i++) {\n            queue.enqueue(keys[i]);\n        }\n        if (contains(hi))\n            queue.enqueue(keys[rank(hi)]);\n        return queue;\n    }\n\n    // check internal invarants\n    public boolean check() {\n        return isSort() && rankCheck();\n    }\n\n    private boolean isSort() {\n        for (int i = 1; i < size(); i++) {\n            if (keys[i].compareTo(keys[i - 1]) < 0)\n                return false;\n        }\n        return true;\n    }\n\n    private boolean rankCheck() {\n        for (int i = 0; i < size(); i++)\n            if (i != rank(select(i)))\n                return false;\n        for (int i = 0; i < size(); i++)\n            if (keys[i].compareTo(select(rank(keys[i]))) != 0)\n                return false;\n        return true;\n    }\n}\n```\n\n","tags":["算法"]},{"title":"改变习惯--《习惯的力量》","url":"%2F2019%2F10%2F03%2F%E6%94%B9%E5%8F%98%E4%B9%A0%E6%83%AF-%E3%80%8A%E4%B9%A0%E6%83%AF%E7%9A%84%E5%8A%9B%E9%87%8F%E3%80%8B%2F","content":"要改变自己的习惯，需找到习惯回路的三个部分：暗示、惯常行为和奖赏。\n通常渴求驱使行为，行为带来奖赏，奖赏满足渴求。\n\n第一步 找到惯常行为\n惯常行为通常很明显，就是你想要改变的行为。\n\n第二步 用奖赏做实验 找到奖赏背后的渴求\n不同的行为带来不同的奖赏。\n尝试4～5种不同的行为，在每次活动之后，拿出笔写下能想到的三个词，然后定下15分钟的闹钟，等闹钟结束后问问自己是否还有想作出原先惯常行为的冲动，若有则该行为的奖赏对应的渴求并不属于原先习惯。反之则是原先习惯想满足的东西。\n\n第三步 分隔暗示\n几乎所有的习惯性暗示都可以分为五类：地点、时间、情绪状态、其他人、之前紧挨着的动作。\n所以要找到某个习惯的暗示，请在这一冲动出现前写下5样东西：你在哪？现在几点？你的情绪怎样？周围有谁？在这个冲动出现之前做了什么？\n连续几天记录，就会发现暗示是什么。\n\n第四步 制定计划\n在了解习惯回路三要素之后，通过围绕暗示设计，选择能够满足你所渴求的奖赏的行为，不断执行，就可以改善习惯。\n习惯是大脑自动遵循的行为模式，即看到暗示，做出惯常行为，得到奖赏。\n调整这个模式最容易的方式是制定计划。\n即在暗示出现时，每次都做计划中所定的与惯常行为不同的行为。一开始执行并不一定顺利，但每次都强迫自己按照计划去做，最终会改变这一习惯。\n即保留暗示和奖赏背后对应的渴求，改变惯常行为。\n了解习惯的背后真正需要的是什么，才可以在暗示出现时，作出不同的行为，从而满足同样的心理需求，但得到不一样的现实结果。如何做选择完全在于自己。\n习惯却也不仅限于行为习惯，也包括思维习惯。\n","tags":["心理"]},{"title":"符号表和顺序查找","url":"%2F2019%2F10%2F03%2F%E7%AC%A6%E5%8F%B7%E8%A1%A8%E5%92%8C%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE%2F","content":"\n符号表是一种用来存储数据的抽象数据结构。其最主要的目的是将一个键和一个值联系起来，并提供插入新的键值对和直接通过键查找到相应值的功能。\n\n符号表的实现，首先可以使用一个简单的链表。每个节点表示一个键值对。\n其Java实现如下：\n其中get和put方法均是通过遍历链表的方式来进行相关操作。\n```java\npublic class SequentialSearchST<Key, Value> {\n    private int n;// 键值对数量\n    private Node first;\n\n    private class Node {// 内部类\n        private Key key;\n        private Value val;\n        private Node next;\n\n        public Node(Key key, Value val, Node next) {\n            this.key = key;\n            this.val = val;\n            this.next = next;\n        }\n    }\n\n    public SequentialSearchST() {\n    }\n\n    public int size() {\n        return n;\n    }\n\n    public boolean isEmpty() {\n        return size() == 0;\n    }\n\n    public boolean contains(Key key) {\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to contains() is null\");\n        return get(key) != null;\n    }\n\n    public Value get(Key key) {\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to get() is null\");\n        for (Node x = first; x != null; x = x.next) {\n            if (key.equals(x.key))\n                return x.val;\n        }\n        return null;\n    }\n\n    public void put(Key key, Value val) {\n        if (key == null)\n            throw new IllegalArgumentException(\"first argument to put() is null\");\n        if (val == null) {\n            delete(key);\n            return;\n        }\n        for (Node x = first; x != null; x = x.next) {\n            if (key.equals(x.key)){\n                x.val = val;\n                return;\n            }\n        }\n        first = new Node(key, val, first);\n        n++;\n    }\n\n    public void delete(Key key) {\n        if (key == null)\n            throw new IllegalArgumentException(\"argument to delete() is null\");\n        first = delete(first, key);\n    }\n\n    private Node delete(Node x, Key key) {\n        if (x == null)\n            return null;\n        if (key.equals(x.key)) {\n            n--;\n            return x.next;\n        }\n        x.next = delete(x.next, key);\n        return x;\n    }\n\n    public Iterable<Key> keys() {\n        Queue<Key> queue = new Queue<Key>();\n        for (Node x = first; x != null; x = x.next) {\n            queue.enqueue(x.key);\n        }\n        return queue;\n    }\n\n}\n```\n\n\n","tags":["算法"]},{"title":"堆排序","url":"%2F2019%2F09%2F27%2F%E5%A0%86%E6%8E%92%E5%BA%8F%2F","content":"\n堆排序的基本思想是：将一个无序数组排列成一个堆，然后将最大元素和末尾元素交换，并减小堆的长度，然后将剩下的元素重新排列成一个堆，继续将最大元素和末尾元素交换，减小堆长度。如此反复，最终得到一个有序序列(降序)。\nJava实现：\n\n```java\npublic class Heap {\n    private Heap() {\n    }\n\n    public static void sort(Comparable[] pq) {\n        int n = pq.length;\n        for (int k = n / 2; k >= 1; k--) {\n            sink(pq, k, n);// 构造堆\n        }\n        while (n > 1) {\n            exch(pq, 1, n--);// 将数组最大元素和末尾元素交换，然后删除\n            sink(pq, 1, n);// 保持堆有序\n        }\n    }\n\n    private static void sink(Comparable[] pq, int k, int n) {\n        while (2 * k <= n) {\n            int j = 2 * k;\n            if (j < n && less(pq, j, j + 1))\n                j++;\n            if (!less(pq, k, j))\n                break;\n            exch(pq, k, j);\n            k = j;\n        }\n    }\n\n    // helper functions\n    private static boolean less(Comparable[] pq, int i, int j) {\n        return pq[i - 1].compareTo(pq[j - 1]) < 0;\n    }\n\n    private static void exch(Object[] pq, int i, int j) {\n        Object t = pq[i - 1];\n        pq[i - 1] = pq[j - 1];\n        pq[j - 1] = t;\n    }\n}\n```\n\n","tags":["算法"]},{"title":"索引优先队列","url":"%2F2019%2F09%2F26%2F%E7%B4%A2%E5%BC%95%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%2F","content":"\n在某些应用场景下，引用进入优先队列中的元素是必要的。做到这点的方式是给每一个元素都加一个索引。\n以下的Java实现中，有几个功能不同的数组。\n搞清楚这几个数组的功能，也就能理解实现中的代码含义。\n若数据有误，敬请指正。\n\n```java\nimport java.util.NoSuchElementException;\nimport java.util.Iterator;\n\npublic class IndexMaxPQ<Key extends Comparable<Key>> implements Iterable<Integer> {\n    private int n;// pq中的元素数量\n    private int[] pq;// 优先队列，其中存储的是元素在Key数组中的索引\n    // key数组索引对应的元素，在优先队列中的索引位置,\n    // 在keys数组中的元素被改变时，快速找到该元素在优先队列中的位置，进行上浮和下沉操作以保持堆有序\n    private int[] qp;\n    private Key[] keys;// 实际存放元素的数组\n\n    // initializes\n    public IndexMaxPQ(int maxN) {\n        if (maxN < 0)\n            throw new IllegalArgumentException();\n        n = 0;\n        keys = (Key[]) new Comparable[maxN + 1];\n        pq = new int[maxN + 1];\n        qp = new int[maxN + 1];\n        for (int i = 0; i <= maxN; i++) {\n            qp[i] = -1;\n        }\n    }\n\n    public boolean isEmpty() {\n        return n == 0;\n    }\n\n    public boolean contains(int i) {\n        return qp[i] != -1;\n    }\n\n    public int size() {\n        return n;\n    }\n\n    public void insert(int i, Key key) {// 插入\n        if (contains(i))\n            throw new NoSuchElementException(\"index is already in the priority queue\");\n        n++;\n        qp[i] = n;// keys[i]在优先队列中的索引\n        pq[n] = i;// 优先队列索引n处存放元素在keys[]中的索引\n        keys[i] = key;// 存放数据\n        swin(n);// 上浮\n    }\n\n    public int MaxIndex() {// 返回最大元素索引\n        if (n == 0)\n            throw new NoSuchElementException(\"priority queue underflow\");\n        return pq[1];\n    }\n\n    public Key maxKey() {// 返回最大元素\n        if (n == 0)\n            throw new NoSuchElementException(\"priority queue underflow\");\n        return keys[pq[1]];\n    }\n\n    public int delMax() {// 删除最大值\n        if (n == 0)\n            throw new NoSuchElementException(\"Priority queue underflow\");\n        int max = pq[1];\n        exch(1, n--);\n        sink(1);\n\n        assert pq[n + 1] == max;\n        qp[max] = -1;\n        keys[max] = null;\n        pq[n + 1] = -1;\n        return max;\n    }\n\n    public Key keyOf(int i) {// 返回i对应的值\n        if (!contains(i))\n            throw new NoSuchElementException(\"index is not in the priority queue\");\n        else\n            return keys[i];\n    }\n\n    public void changeKey(int i, Key key) {// 修改i位置的值为key\n        if (!contains(i))\n            throw new NoSuchElementException(\"index is not in the priority queue\");\n        keys[i] = key;\n        swin(qp[i]);// 在优先队列中的位置\n        sink(qp[i]);\n    }\n\n    public void increaseKey(int i, Key key) {// 修改i位置的值为key key大于原值\n        if (!contains(i))\n            throw new NoSuchElementException(\"index is not in the priority queue\");\n        if (keys[i].compareTo(key) >= 0)\n            throw new IllegalArgumentException(\n                    \"Calling increaseKey() with given argument would not strictly increase the key\");\n        keys[i] = key;\n        swin(qp[i]);// 在优先队列中的位置\n    }\n\n    public void decreaseKey(int i, Key key) {// 修改i位置的值为key key小于原值\n        if (!contains(i))\n            throw new NoSuchElementException(\"index is not in the priority queue\");\n        if (keys[i].compareTo(key) <= 0)\n            throw new IllegalArgumentException(\n                    \"Calling decreaseKey() with given argument would not strictly decrease the key\");\n        keys[i] = key;\n        sink(qp[i]);// 在优先队列中的位置\n    }\n\n    public void delete(int i) {// 删除i位置的元素\n        if (!contains(i))\n            throw new NoSuchElementException(\"inde is not in the priority queue\");\n        int index = qp[i];\n        exch(index, n--);\n        swin(index);\n        sink(index);\n        keys[i] = null;\n        qp[i] = -1;\n    }\n    // helper functions\n\n    private boolean less(int i, int j) {\n        return keys[pq[i]].compareTo(keys[pq[j]]) < 0;\n    }\n\n    private void exch(int i, int j) {\n        int t = pq[i];\n        pq[i] = pq[j];\n        pq[j] = t;\n        qp[pq[i]] = i;\n        qp[pq[j]] = j;\n    }\n\n    private void swin(int k) {\n        while (k > 1 && less(k / 2, k)) {\n            exch(k / 2, k);\n            k /= 2;\n        }\n    }\n\n    private void sink(int k) {\n        while (2 * k < n) {\n            int j = 2 * k;\n            if (j < n && less(j, j + 1))\n                j++;\n            if (!less(k, j))\n                break;\n            exch(k, j);\n            k = j;\n        }\n    }\n\n    public Iterator<Integer> iterator() {\n        return new HeapIterator();\n    }\n\n    private class HeapIterator implements Iterator<Integer> {\n\n        private IndexMaxPQ<Key> copy;\n\n        public HeapIterator() {\n            copy = new IndexMaxPQ<Key>(pq.length - 1);\n            for (int i = 1; i <= n; i++)\n                copy.insert(pq[i], keys[pq[i]]);\n        }\n\n        public boolean hasNext() {\n            return !copy.isEmpty();\n        }\n\n        public void remove() {\n            throw new UnsupportedOperationException();\n        }\n\n        public Integer next() {\n            if (!hasNext())\n                throw new NoSuchElementException();\n            return copy.delMax();\n        }\n    }\n}\n```\n\n","tags":["算法"]},{"title":"优先队列","url":"%2F2019%2F09%2F25%2F%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%2F","content":"\n优先队列，是一种抽象数据结构类型。其支持删除最大(小)元素和插入元素操作。\n其存在场景经常是：收集部分元素，处理这些元素中键值最大(小)的元素，再收集一部分元素，再处理这些元素中最大(小)的元素。实际的场景例如：任务调度\n而这里实现优先队列这种数据结构的基础是二叉堆。\n\n下面详细说明什么是二叉堆。\n\n首先，当一颗二叉树的每个节点都大于等于它的两个子节点时，它被称为堆有序。\n堆有序的二叉树中最大节点是根节点。\n\n其次，一颗二叉树能成为完全二叉树，必须满足以下条件：\n在二叉树的深度为h的条件下，除了第h层以外，1~h-1层的节点数已达到最大，h层的节点都连续存在于最左边。\n\n最后，二叉堆是什么呢？二叉堆是一组能够使用堆有序的完全二叉树表示的元素，并在数组中按照层级存储(不使用数组的第一个位置)。\n\n二叉堆的堆有序可能会在某个元素发生变化之后被破坏，此时就要进行堆有序化的操作。\n当二叉堆的某个元素变得比父节点大时，就需要和父元素交换，然后再次比较父元素位置所对应的父元素，最终停留在适合的位置，这个过程被称为上浮。\n当二叉堆的某个元素变得比其子元素小时，其需要和其子元素进行交换，然后需要再次和该位置的子元素进行比较，最终停留在适合的位置，这个过程被称为下沉。\n插入元素，一般将新元素放在数组的末尾，然后进行上浮操作，增加堆的大小。\n删除最大元素，将根元素删除后，将数组末尾的元素放在根节点位置，进行下沉操作，减小堆的大小。\nJava的实现如下：\n\n```java\nimport java.util.Comparator;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\npublic class MaxPQ<Key> implements Iterable<Key> {\n    private Key[] pq; // 存储元素的数组\n    private int n; // 优先队列中的元素数量\n    private Comparator<Key> comparator;\n\n    // Construction functions\n\n    public MaxPQ(int initCapacity) {\n        pq = (Key[]) new Object[initCapacity + 1];\n        n = 0;\n    }\n\n    public MaxPQ() {\n        this(1);\n    }\n\n    public MaxPQ(int initCapacity, Comparator<Key> comparator) {\n        this.comparator = comparator;\n        pq = (Key[]) new Object[initCapacity + 1];\n        n = 0;\n    }\n\n    public MaxPQ(Comparator<Key> comparator) {\n        this(1, comparator);\n    }\n\n    public MaxPQ(Key[] keys) {\n        n = keys.length;\n        pq = (Key[]) new Object[keys.length + 1];\n        for (int i = 0; i < n; i++) {\n            pq[i + 1] = keys[i];\n        }\n        for (int k = n / 2; k >= 1; k--) {\n            sink(k);\n        }\n        assert isMaxHeap();\n    }\n\n    public boolean isEmpty() {\n        return n == 0;\n    }\n\n    public int size() {\n        return n;\n    }\n\n    public Key max() {\n        if (isEmpty())\n            throw new NoSuchElementException(\"Priority queue underflow\");\n        return pq[1];\n    }\n\n    private void resize(int capacity) {//调整队列长度\n        assert capacity > n;\n        Key[] t = (Key[]) new Object[capacity];\n        for (int i = 1; i <= n; i++) {\n            t[i] = pq[i];\n        }\n        pq = t;\n    }\n\n    public void insert(Key x) {\n        if(n==pq.length-1) resize(2*pq.length);\n        pq[++n] = x;//将节点放在数组的最后\n        swin(n);//上浮节点，以保持堆有序\n        assert isMaxHeap();\n    }\n\n    public Key delMax() {\n        if (isEmpty())\n            throw new NoSuchElementException(\"Priority queue underflow\");\n        Key max = pq[1]; // 获取优先队列的最大元素\n        exch(1, n--);// 将数组最后的一个子节点与根节点交换, 之后减小n的大小，即删除了最大元素\n        sink(1);// 下沉交换后的节点，使数组达到堆有序\n        pq[n + 1] = null;// 防止删除的节点 游离 和 垃圾回收\n        if ((n > 0) && (n == (pq.length - 1) / 4))\n            resize(pq.length / 2);// 减小数组的大小 减小内存占用\n        assert isMaxHeap();\n        return max;\n    }\n\n    // helper functions\n    private void swin(int k) {//上浮节点\n        while (k > 1 && less(k / 2, k)) {//比较节点与父节点的大小\n            exch(k, k / 2);//交换\n            k /= 2;\n        }\n    }\n\n    private void sink(int k) {//下沉\n        while (2 * k <= n) {\n            int j = 2 * k;\n            if (j < n && less(j, j + 1))//比较两个子节点的大小\n                j++;\n            if (!less(k, j))//当\b索引k位置的节点大于两个字节点时，中断\n                break;\n            exch(k, j);//否则交换\n            k = j;\n        }\n    }\n\n    private boolean less(int i, int j) {\n        if (comparator == null) {\n            return ((Comparable<Key>) pq[i]).compareTo(pq[j]) < 0;\n        } else {\n            return comparator.compare(pq[i], pq[j]) < 0;\n        }\n    }\n\n    private void exch(int i, int j) {\n        Key t = pq[i];\n        pq[i] = pq[j];\n        pq[j] = t;\n    }\n\n    public boolean isMaxHeap() {\n        return isMaxHeap(1);\n    }\n\n    private boolean isMaxHeap(int k) {\n        if (k > n)\n            return true;\n        int left = 2 * k;\n        int right = 2 * k + 1;\n        if (left <= n && less(k, left))\n            return false;\n        if (right <= n && less(k, right))\n            return false;\n        return isMaxHeap(left) && isMaxHeap(right);\n    }\n\n    public Iterator<Key> iterator() {\n        return new HeapIterator();\n    }\n\n    private class HeapIterator implements Iterator<Key> {\n        private MaxPQ<Key> copy;\n\n        public HeapIterator() {\n            if (comparator == null)\n                copy = new MaxPQ<Key>(size());\n            else\n                copy = new MaxPQ<Key>(size(), comparator);\n            for (int i = 1; i <= n; i++) {\n                copy.insert(pq[i]);\n            }\n        }\n\n        public boolean hasNext() {\n            return !copy.isEmpty();\n        }\n\n        public void remove() {\n            throw new UnsupportedOperationException();\n        }\n\n        public Key next() {\n            if (!hasNext())\n                throw new NoSuchElementException();\n            return copy.delMax();\n        }\n    }\n}\n```\n\n","tags":["算法"]},{"title":"快速排序(二)","url":"%2F2019%2F09%2F25%2F%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F(%E4%BA%8C)%2F","content":"\n基本的快速排序，在面对有大量重复元素数组的时候，排序的速度是不够快的。\n改进的方式有几种。\n第一，对在切分过程中形成的小数组，插入排序比快速排序要快。因此，在小数组存在的情况下，在sort方法中：\n\n```java\nif(hi<=lo) return; \n=> \nif(hi<=lo+M) { \n  Insertion.sort(a,0,a.length);\n  return;\n}\n```\nM的值和系统相关，在5~15之间的任意值大多数情况下都能令人满意。\n第二，则是将子数组的一小部分元素的中位数来切分数组。\n第三，则是将数组切分为三部分，分别对应小于、等于和大于切分元素。\nJava实现如下：\n\n```java\npublic class Quick3way {\n\n    private Quick3way() {\n    }\n\n    private static void sort(Comparable[] a) {\n        StdRandom.shuffle(a);//随机化数组元素，以防止切分不均衡\n        sort(a, 0, a.length);\n        assert isSorted(a);\n    }\n\n    private static void sort(Comparable[] a, int lo, int hi) {\n        if (hi <= lo)\n            return;\n        int lt = lo, gt = hi;// lt指针 从左往右移动 gr指针从右往左移动\n        Comparable v = a[lo];// 切分元素\n        int i = lo + 1;\n        while (i <= gt) {\n            int cmp = a[i].compareTo(v);// 将数组剩余的元素和v进行比较\n            if (cmp < 0)// 小于的交换lt和i处的元素，并移动指针\n                exch(a, lt++, i++);\n            else if (cmp > 0)// 大于的交换i和gt处的元素，并移动指针\n                exch(a, i, gt--);\n            else\n                i++;// 等于的只移动i指针\n        }\n        // 递归的调用sort方法在小于v的区域和大于v的区域内\n        sort(a, lo, lt - 1);\n        sort(a, gt + 1, hi);\n        assert isSorted(a, lo, hi);\n    }\n\n    // helper functions\n    private static boolean less(Comparable v, Comparable w) {\n        return v.compareTo(w) < 0;\n    }\n\n    private static void exch(Object[] a, int i, int j) {\n        Object t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n    }\n\n    private static boolean isSorted(Comparable[] a) {\n        return isSorted(a, 0, a.length - 1);\n    }\n\n    private static boolean isSorted(Comparable[] a, int lo, int hi) {\n        for (int i = lo + 1; i <= hi; i++) {\n            if (less(a[i], a[i - 1]))\n                return false;\n        }\n        return true;\n    }\n\n}\n```\n\n\n","tags":["算法"]},{"title":"快速排序(一)","url":"%2F2019%2F09%2F24%2F%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F(%E4%B8%80)%2F","content":"\n快速排序可能是应用最多的排序算法。原因包括：实现简单，速度快。\n其思想是将数组分成两个子数组，当两个子数组有序了，整个数组也就有序了。\n这个算法的关键在于切分。\n切分是将数组一分为二。\n切分左侧的元素都不大于切分，切分右侧的元素都不小于切分。\n实现切分的方法是：先随意的选取一个元素当作切分元素，然后用指针 i 从数组的左端向右扫描，直至找到一个大于它的元素，再用指针 j 从数组的右端向左扫描，直至找到一个小于它的元素，然后交换这两个元素。如此继续，最终切分元素的左边都是不大于它的元素，右边都是不小于它的元素。当向左和向右扫描的两个指针相遇的时候，则将切分元素和左数组最右侧的元素交换，然后返回右指针 j 。\n排序的实现是：既然切分将数组分成了两个部分，然后继续递归的将子数组切分，最终整个数组变得有序。\nJava实现如下：\n\n```java\npublic class Quick {\n    private Quick() {\n    }\n\n    public static void sort(Comparable[] a) {\n        StdRandom.shuffle(a);//随机打乱数组元素，防止切分不平衡\n        sort(a, 0, a.length - 1);\n        assert isSorted(a);\n    }\n\n    private static void sort(Comparable[] a, int lo, int hi) {\n        if (hi <= lo)\n            return;\n        int j = partition(a, lo, hi);\n        sort(a, lo, j - 1);\n        sort(a, j + 1, hi);\n        assert isSorted(a, lo, hi);\n    }\n\n    private static int partition(Comparable[] a, int lo, int hi) {\n        int i = lo;\n        int j = hi + 1;\n        Comparable v = a[lo];// 切分元素\n        while (true) {\n            while (less(a[++i], v)) {// 找到比切分元素大的元素\n                if (i == hi)\n                    break;\n            }\n\n            while (less(v, a[--j])) {// 找到比切分元素小的元素\n                if (j == lo)\n                    break;\n            }\n\n            if (i >= j)// i不能大于j\n                break;\n            exch(a, i, j);// 交换\n        }\n\n        exch(a, lo, j);// 切分交换\n\n        return j;\n    }\n\n    private static boolean less(Comparable a, Comparable b) {\n        return a.compareTo(b) < 0;\n    }\n\n    private static void exch(Object[] a, int i, int j) {\n        Object t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n    }\n\n    private static boolean isSorted(Comparable[] a) {\n        return isSorted(a, 0, a.length - 1);\n    }\n\n    private static boolean isSorted(Comparable[] a, int lo, int hi) {\n        for (int i = 0; i <= hi; i++) {\n            if (less(a[i], a[i--]))\n                return false;\n        }\n        return true;\n    }\n}\n```\n\n","tags":["算法"]},{"title":"归并排序(二)","url":"%2F2019%2F09%2F23%2F%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F(%E4%BA%8C)%2F","content":"\n归并排序除了自顶而下的归并方式：「即将大问题分割成小问题，将小问题解决后再解决大问题」，还有另一种自底向上的归并方式。\n其思想是：先归并那些微型数组，然后再成对归并得到的子数组。如此直至归并了整个数组，排序结束。\n自底向上的归并排序适合用链表组织的数据。\n\n```java\npublic class MergeBU {\n\n    private static void merge(Comparable[] a, Comparable[] aux, int lo, int mid, int hi) {\n        for (int k = 0; k <= hi; k++) {\n            aux[k] = a[k];\n        }\n\n        int i = lo, j = mid + 1;\n        for (int k = 0; k <= hi; k++) {\n            if (i > mid)\n                a[k] = aux[j++];\n            else if (j > hi)\n                a[k] = aux[i++];\n            else if (less(aux[j], aux[i]))\n                a[k] = aux[j++];\n            else\n                a[k] = aux[i++];\n        }\n    }\n\n    public static void sort(Comparable[] a) {\n        int n = a.length;\n        Comparable[] aux = new Comparable[n];\n        for (int len = 1; len < n; len *= 2) {// 子数组大小\n            // 子数组索引，其中lo+=len+len，表示子数组中的元素在数组中的最大索引值\n            for (int lo = 0; lo < n - len; lo += len + len) {\n                int mid = lo + len - 1;\n                int hi = Math.min(lo + len + len - 1, n - 1);\n                merge(a, aux, lo, mid, hi);\n            }\n        }\n        assert isSorted(a);\n    }\n\n    private static boolean less(Comparable a, Comparable b) {\n        return a.compareTo(b) < 0;\n    }\n\n    private static boolean isSorted(Comparable[] a) {\n        for (int i = 0; i < a.length; i++) {\n            if (less(a[i], a[i - 1]))\n                return false;\n        }\n        return true;\n    }\n\n}\n```\n\n","tags":["算法"]},{"title":"希尔排序与归并排序(一)","url":"%2F2019%2F09%2F23%2F%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%E5%92%8C%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F(%E4%B8%80)%2F","content":"\n在大规模乱序数组中插入排序很慢，因为它只会交换相邻的元素。\n希尔排序是在插入排序的基础上进行修改的。\n其思想是使数组中任意间隔为h的元素有序。排序的过程类似于插入排序但使用不同的增量。\n\n```java\npublic class Shell {\n    private Shell() {\n    }\n\n    public static void sort(Comparable[] a) {\n        int n = a.length;\n        int h = 1;\n        while (h < n / 3)\n            h = 3 * h + 1;// 计算最大的间隔值\n        while (h >= 1) {\n            for (int i = h; i < n; i++) {// 以不同增量进行的插入排序\n                for (int j = i; j >= h && less(a[j], a[j - h]); j -= h) {\n                    exch(a, j, j - h);\n                }\n            }\n            assert isHsorted(a, h);\n            h /= 3;// 改变增量，使数组中的不同h-子数组有序\n        }\n        assert isSorted(a);\n    }\n\n    private static boolean less(Comparable a, Comparable b) {\n        return a.compareTo(b) < 0;\n    }\n\n    private static void exch(Object[] a, int i, int j) {\n        Object t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n    }\n\n    private static boolean isSorted(Comparable[] a) {\n        for (int i = 1; i < a.length; i++) {\n            if (less(a[i], a[i - 1]))\n                return false;\n        }\n        return true;\n    }\n\n    private static boolean isHsorted(Comparable[] a, int h) {\n        for (int i = h; i < a.length; i++) {\n            if (less(a[i], a[i - h]))\n                return false;\n        }\n        return true;\n    }\n}\n```\n\n归并排序\n思想：将数组分成两半分别排序，再将结果归并起来。\n原地归并的抽象方法，是归并算法的核心。\n自顶向下的归并，sort方法以递归的方式，将数组相邻的两个元素进行排序，在此基础上扩大归并的范围。\n\n```java\npublic class Merge {\n    private Merge() {\n    }\n\n    // 原地归并的抽象方法\n    private static void merge(Comparable[] a, Comparable[] aux, int lo, int mid, int hi) {\n        assert isSorted(a, lo, mid);//判断数组的左边是否有序\n        assert isSorted(a, mid + 1, hi);//判断数组的右边是否有序\n\n        for (int k = lo; k <= hi; k++) {\n            aux[k] = a[k];\n        }\n        int i = lo, j = mid + 1;\n        for (int k = lo; k <= hi; k++) {\n            // 将数组分为两半，依次比较两个数组的元素，然后将较小的结果存入原数组中\n            if (i > mid)// 左边取完，继续取右边的\n                a[k] = aux[j++];\n            else if (j > hi)// 右边取完，取左边的\n                a[k] = aux[i++];\n            else if (less(aux[j], aux[i]))// 当左右两边的数组都没有取完，且右边数组的元素较小，取右边的\n                a[k] = aux[j++];\n            else// 否则取左边的\n                a[k] = aux[i++];\n        }\n        assert isSorted(a, lo, hi);\n    }\n\n    public static void sort(Comparable[] a) {\n        Comparable[] aux = new Comparable[a.length];\n        sort(a, aux, 0, a.length - 1);\n        assert isSorted(a);\n\n    }\n\n    // 自顶向下的归并排序\n    private static void sort(Comparable[] a, Comparable[] aux, int lo, int hi) {\n        if (hi <= lo)\n            return;\n        int mid = lo + (hi - lo) / 2;\n        sort(a, aux, lo, mid);// 数组的左半边排序，递归\n        sort(a, aux, mid + 1, hi);// 数组的右半边排序，递归\n        merge(a, aux, lo, mid, hi);// 原地归并\n    }\n\n    private static boolean less(Comparable a, Comparable b) {\n        return a.compareTo(b) < 0;\n    }\n\n    private static boolean isSorted(Comparable[] a) {\n        return isSorted(a, 0, a.length - 1);\n    }\n\n    private static boolean isSorted(Comparable[] a, int lo, int hi) {\n        for (int i = lo + 1; i <= hi; i++) {\n            if (less(a[i], a[i - 1]))\n                return false;\n        }\n        return true;\n    }\n}\n```\n\n\n","tags":["算法"]},{"title":"初级排序算法","url":"%2F2019%2F09%2F22%2F%E5%88%9D%E7%BA%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%2F","content":"\n**Algorithms**这本书花了不少时间阅读，终于在某个时间点读完了。虽说读完了，但之前读的东西基本上也都忘得差不多了。预计抽出一些时间，不定期将这本书中的算法思想和java实现更新到此博客上。\n这是第一篇。\n排序算法的基础。\n\n* * *\n选择排序\n思想：找到数组中最小的元素，然后和数组第一个元素交换位置。再次，找到数组中第二小的元素，然后和数组第二个元素交换位置。如此反复，直到整个数组排序。\n以下为Java的实现： _仅提供必要的代码_\n\n```java\npublic class Selection {\n    private Selection() {\n    }\n\n    public void sort(Comparable[] a) {\n        int n = a.length;\n        for (int i = 0; i < n; i++) {// 选取数组的第一个元素\n            int min = i;\n            for (int j = i + 1; j < n; j++) {// 依次选取数组中剩余的元素\n                if (less(a[j], a[min]))\n                    min = j;// 选取数组中最小的元素\n            }\n            exch(a, i, min);\n            assert isSorted(a, 0, i);\n        }\n        assert isSorted(a);\n    }\n\n    private static boolean less(Comparable a, Comparable b) {\n        return a.compareTo(b) < 0;\n    }\n\n    private static void exch(Object[] a, int i, int j) {\n        Object t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n    }\n\n    private static boolean isSorted(Comparable[] a) {\n        return isSorted(a, 0, a.length - 1);\n    }\n\n    private static boolean isSorted(Comparable[] a, int lo, int hi) {\n        for (int i = 0; i < a.length; i++) {\n            if (less(a[i], a[i - 1]))\n                return false;\n        }\n        return true;\n    }\n}\n```\n\n插入算法\n思想：在一个数组中，把相邻的元素进行比较和交换，使各个元素处在恰当的位置上，直至此操作的索引到达数组的右端时，完成排序。\nJava实现：_仅提供必要的代码_\n\n```java\npublic class Insertion {\n    public void sort(Comparable[] a) {\n        int n = a.length;\n        for (int i = 1; i < n; i++) {\n            for (int j = i; j > 0 && less(a[j], a[j - 1]); j--) {\n                exch(a, j, j - 1);\n            }\n            assert isSorted(a, 0, i);\n        }\n        assert isSorted(a);\n    }\n\n    private static boolean less(Comparable a, Comparable b) {\n        return a.compareTo(b) < 0;\n    }\n\n    private static void exch(Object[] a, int i, int j) {\n        Object t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n    }\n\n    private static boolean isSorted(Comparable[] a) {\n        return isSorted(a, 0, a.length);\n    }\n\n    private static boolean isSorted(Comparable[] a, int lo, int hi) {\n        for (int i = lo + 1; i < hi; i++)\n            if (less(a[i], a[i - 1]))\n                return false;\n        return true;\n\n    }\n}\n```\n\n","tags":["算法"]},{"title":"KMP算法","url":"%2F2019%2F07%2F30%2FKMP%E7%AE%97%E6%B3%95%2F","content":"\nKMP算法，花了不少时间去理解。\n网络上说这个算法的内容很多~\n例如阮一峰的[博文](http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html)，应该说他讲的很清楚，但没有实现，所以只能理解到其中的思想。和《算法》第四版中描述的内容是有差异的。\n《算法》第四版中的KMP内容理解起来会比较费劲。原因可能是因为中文的翻译有时候完全基于原文，内容之间的联系有些割裂，当然英文好的话，推荐英文好的直接看原版。\n\n假设有一个长字符串文本(文本)和一个短字符串文本(模式)，现在需要我们做的是判断这个文本中是否存在与模式一样的子字符串。\n\n通常的暴力算法：\n首先，文本和模式都有指向自己字符的指针，指针的作用是为了说明正在比较的字符的位置。\n然后，将文本的第一个字符与模式的第一个字符进行比较，若匹配成功则继续将文本的指针移向下一个位置，同时也将模式的指针移向下一个位置继续进行字符比较，直到模式指针指向模式字符串的最后一位字符，且与文本中指针指向的字符匹配为止，即匹配成功。若期间匹配失败，则将文本指针移动到上一次匹配起始位置的下一个位置，将模式指针移动到模式字符串起始位置，对这两个位置的字符进行比较，若匹配则继续比较下一个位置的字符，若不匹配则继续移动文本指针到上一次匹配起始位置下一个位置，并且将模式指针退回到起始位置，继续比较两个位置的字符是否匹配。\n通常暴力子字符串查找法，在长度为N的文本中查找长度为M的模式，最坏需要~NM次比较。\n实现如下：\n```java\npublic static int search(String pat,String txt){\n  int j,M=pat.length();\n  int i,N=txt.length();\n  for(i=0,j=0;i<N&&j<M;i++){//i-=j和i++表示不匹配，则从匹配的起始位置的下一位开始重新匹配\n    if(txt.charAt(i)==pat.charAt(j)) j++;\n    else{i -= j;j=0}\n  }\n  if(j==M) return i-M;//匹配成功\n  else     return N;//匹配失败\n}\n```\n\nKMP算法：\n首先，文本和模式都有指向自己字符的指针，指针是用来说明文本和模式的哪个位置的字符正在进行比较。\n其次，这个算法中存在一个记录匹配失败时模式指针 j 应该指向哪个位置的数组dfa[][]，这个数组在文本指针 i 和模式指针 j 指向的字符匹配时，\n\n```java\ndfa[txt.charAt(i)][j] = j+1\n```\n\n即和文本指针在第 i+1 处的字符比较的是模式指针在第 j+1 处的字符，或者说当文本和模式一直匹配`dfa[][j]`的值一直增加，最终 j = M (模式字符串最后一个字符的索引)，即匹配成功。\n若文本指针第 i 处的字符与模式指针第 j 处的字符不匹配，则我们可以得到以下信息：\n已经匹配的文本字符是什么。因为这部分文本字符和模式中的部分内容是匹配的，即模式字符串的前 j 个字符。\n这里应该说明，j 是模式字符串的索引，从0开始计算，当文本字符串的 i 处字符和模式字符串的 j 处字符不匹配时候，之前已经匹配的字符的数量是 j (0...j-1) 个。\n\n至此，我们仅仅知道的是若匹配则`dfa[][j]`的值是不断增加的，若文本和模式在某个位置不匹配， `dfa[][]`又是怎么判断模式指针该退回去多远呢？\nKMP算法的主要思想是：「模式字符串中的某处可以和匹配失败处的正文相匹配，那么就不应该完全跳过所有已经匹配的所有字符」。KMP算法会提前判断如何重新开始查找，而这种判断仅取决于模式本身。\n翻译成大白话就是：文本和模式在某处不匹配，但模式中的某处和匹配失败处的字符串匹配，那么我们就不应该跳过这部分已匹配的字符，而应该将模式字符串的指针移动到该处，然后继续下一位的字符匹配。假设文本和模式分别在第 i 处和第 j 处不匹配，又文本中从 i-j 处开始到 i 位置的字符是已知的且前面的 j 个字符都是匹配的，仅 第 i 个位置的字符和模式不匹配，其实这些问题最终只归结于模式本身，因为匹配的部分就是模式中的字符。\n\n这里要说明一个概念：确定有限状态自动机。\n其组成包括：\n一个非空有限的状态集合𝑄；\n一个输入字母表∑；\n一个转移函数𝜕；\n一个开始状态𝙨 ∈ 𝑄 ；\n一个接受状态的集合F ⊆ 𝑄；\n其工作方式：\n确定有限状态自动机从起始状态开始，一个字符接一个字符的读入一个字符串w ( w ∈ ∑ )，并根据给定的转移函数一步一步地转移至下一个状态。在读完该字符串后，如果该自动机停在一个属于F的接受状态，那么它就接受该字符串，反之则拒绝该字符串。\n\n回到KMP算法中，\ndfa[][]数组本身定义的就是一个*确定有限状态自动机*。\n根据算法第四版中的内容可知，\n「一个非空有限的状态集合𝑄」-> 模式字符串中的每个索引值代表一种状态；\n「一个输入字母表∑」 -> 模式字符串的字母表；\n「一个转移函数𝜕」 -> 即判断文本字符和模式字符是否匹配；\n「一个开始状态𝙨 ∈ 𝑄 」 -> 状态0；\n「一个接受状态的集合F ⊆ 𝑄；」-> 状态M，即模式指针移动到模式字符串最后一个字符且与文本匹配时的`dfa[][]`状态；\ndfa[][]的工作方式：\ndfa[][]从状态0开始，一个字符接一个字符的读入模式字符串，将这些字符一个一个与文本中的字符进行比较，如果模式中的字符和文本中的字符匹配，则状态会依次改变，当最终达到状态M(即模式指针指向模式最后一个字符且与文本内容匹配时)时候，则表明文本中找到了一段与模式匹配的子字符，否则文本中不存在与模式匹配的子字符串。\n我们拿文本和模式中的字符一一对比，`dfa[][]`的状态会发生变化。当字符匹配，模式指针向右移动一位,即`dfa[][]`的状态向前进；当出现不匹配的情况，则模式指针的向左移动，移动位置会根据当前`dfa[][]`所处的状态不同而不同。在以上两种情况下，文本指针的位置一直是向右移动。\n\n那么当文本和模式出现不匹配的时候，`dfa[][]`的值怎么确定呢？毕竟这是告诉我们模式指针该退回多远的关键。\n假设文本的第 i 处和模式的第 j 处不匹配，\n首先，我们应当理解，文本中已经和模式匹配的字符的数量是 j 个，位置在 i-j 到 i-1 之间。\n我们希望了解的是，如果退回了文本指针并右移了一位之后，重新扫描这部分字符，(这部分文本字符和模式字符是相同的，即pat.charAt(1)~pat.charAt(j-1)之间的字符) `dfa[][]`的状态是什么，这个状态又叫做*重启状态X*。\n为什么要忽略pat.charAt(0)呢，因为模式需要右移一位(文本指针右移一位)，为什么忽略pat.charAt(j)呢，因为这个字符是匹配失败的。\n显然对于匹配的字符数量不同，则重启状态X的值是不同的，即`dfa[][]`的值不同，模式指针退回多远也不一样。\n例如模式的字符串是 ABABAC，则\n当 j = 0 时，文本和模式不匹配，必然是文本指针向右移动一位，这里不存在重启状态X；\n当 j = 1 时，文本和模式不匹配，此时与模式匹配的字符A，去掉首字符和不匹配字符，然后将剩余字符(不存在)和模式进行匹配，`dfa[][]`=0，则X = 0；\n当 j = 2 时，文本和模式不匹配，此时与模式匹配的字符为AB，去掉首字符和不匹配字符，然后将剩余字符(B)和模式进行匹配，`dfa[][]`=0，则X = 0\n当 j = 3 时，文本和模式不匹配，此时与模式匹配的字符为ABA，去掉首字符和不匹配字符，然后将剩余字符(BA)和模式进行匹配，`dfa[][]`=1，去掉首字符和不匹配字符，则X = 1\n当 j = 4 时，文本和模式不匹配，此时与模式匹配的字符为ABAB，去掉首字符和不匹配字符，然后将剩余字符(BAB)和模式进行匹配，`dfa[][]`=2，去掉首字符和不匹配字符，则X = 2\n当 j = 5 时，文本和模式不匹配，此时与模式匹配的字符为ABABA，去掉首字符和不匹配字符，然后将剩余字符(BABA)和模式进行匹配，`dfa[][]`=3，去掉首字符和不匹配字符，则X = 3\nj 即使模式指针，也是状态。\n\n此时，我们已经确定在文本和模式不匹配的时候，模式指针应该退回多远，即退回到重启状态X的位置。\n当模式指针退回到重启状态X的位置时，会继续进行匹配。\njava的完整实现如下：\n```java\npublic class KMP {\n    private final int R;\n    private int[][] dfa;//记录文本和模式不匹配时候，模式指针退回多远的值\n\n    private char[] pattern;\n    private String pat;\n\n    public KMP(String pat) {\n        this.R = 256;\n        this.pat = pat;\n\n        int m = pat.length();\n        dfa = new int[R][m];\n        dfa[pat.charAt(0)][0] = 1;\n        for (int x = 0, j = 1; j < m; j++) {\n            for (int c = 0; c < R; c++) {\n                //不匹配 文本i位置的可以是除匹配字符以外的任意字符，但在此位置的重启状态X都是一样的\n                dfa[c][j] = dfa[c][x];\n            }\n            //匹配,就是说只有dfa[pat.charAt(j)][j]的项才会使状态前进，不匹配的都会经重新状态X转到合适的位置\n            dfa[pat.charAt(j)][j] = j + 1;\n            x = dfa[pat.charAt(j)][x];//更新X 不同状态，对应的重启状态X不一样\n        }\n    }\n\n    public KMP(char[] pattern, int R) {\n        this.R = R;\n        this.pattern = new char[pattern.length];\n        for (int j = 0; j < pattern.length; j++) {\n            this.pattern[j] = pattern[j];\n        }\n\n        int m = pattern.length;\n        dfa = new int[R][m];\n        dfa[pattern[0]][0] = 1;\n        for (int x = 0, j = 1; j < m; j++) {\n            for (int c = 0; c < R; c++) {\n                dfa[c][j] = dfa[c][x];//不匹配\n            }\n            dfa[pattern[j]][j] = j + 1;//匹配\n            x = dfa[pattern[j]][x];//模式不同位置，对应的重启状态X不一样\n        }\n    }\n\n    public int search(String txt) {\n        int m = pat.length();\n        int n = txt.length();\n        int i, j;\n        for (i = 0, j = 0; i < n && j < m; i++) {\n            //只有dfa[txt.charAt(i)][j]==dfa[pat.charAt(j)][j],j才会等于j+1,即匹配。其他的情况，j会退回到之前的位置\n            j = dfa[txt.charAt(i)][j];\n        }\n        if (j == m) return i - m;//发现\n        return n;//未发现\n    }\n\n    public int search(char[] text) {\n        int m = pattern.length;\n        int n = text.length;\n        int i, j;\n        for (i = 0, j = 0; i < n && j < m; i++) {\n            j = dfa[text[i]][j];\n        }\n        if (j == m) return i - m;//发现\n        return n;//未发现\n    }\n\n    public static void main(String[] args) {\n        String pat = args[0];\n        String txt = args[1];\n        char[] pattern = pat.toCharArray();\n        char[] text = txt.toCharArray();\n\n        KMP kmp1 = new KMP(pat);\n        int offset1 = kmp1.search(txt);\n\n        KMP kmp2 = new KMP(pattern, 256);\n        int offset2 = kmp2.search(text);\n\n        StdOut.println(\"text:   \" + txt);\n        StdOut.print(\"pattern: \");\n        for (int i = 0; i < offset1; i++)\n            StdOut.print(\" \");\n        StdOut.println(pat);\n\n        StdOut.print(\"pattern: \");\n        for (int i = 0; i < offset2; i++)\n            StdOut.println();\n        StdOut.println(pat);\n    }\n}\n```\n\n讲的并不是很清楚，待更新~","tags":["算法"]},{"title":"学习和时间管理","url":"%2F2019%2F07%2F20%2F%E5%AD%A6%E4%B9%A0%E5%92%8C%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%2F","content":"\n<div style=“text-align:center>\n    <table cellpadding=\"3\" cellspacing=\"0\" style=\"width: 60%;margin:auto\">\n        <td>\n            <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=298 height=52 src=\"//music.163.com/outchain/player?type=2&id=760541&auto=0&height=32\"> </iframe>\n        </td>\n    </table>\n</div>\n\n学习新技能是一件让人开心的事情。\n回想起学生时代，除了填鸭式死记硬背，从没想过别的学习方式。\n以此，学的不好可想而知。另一个原因是每次考试的时候心理压力太大。\n不知何时起，这种时间跨度比较大的反思或者反省常常会伴随着和自己的和解。\n因为知道自己怎么了，才能找办法解决。\n\n学习其实最关键的还是理解+重复的次数足够多。\n但重复多了，有时会怀疑自己，怎么这么蠢连这点东西都理解不了。\n进而受挫，也许最后就放弃了。\n\n知识分为两类：一种侧重于了解某事物的名称。一种侧重于理解某事物本身。\n其实高中学到的大部分知识，都是浅尝辄止式的广撒网。\n而对于理解某事物本身的知识，如果有人说「这个东西我理解，但是不知道怎么去表达或者说出来能让别人理解」，这恰恰说明他不理解。因为既然一个东西你完全掌握了，理应可以用浅显直白的语言说出它所有的性质。\n这里套用一句话：\n**「说他知道自己的想法但却无法表达的人, 通常并不知道他自己的想法。 」**-- Mortimer Adler\n![study](https://isshl.me/img/study.jpg)\n从学习后知识的留存率来看，好为人师并不是坏事，你向别人说明一个事物的时候，正好可以用来检验你对所述内容的理解程度。\n当你向不熟悉某议题的人解释该议题的时候，以他们能理解的方式及最简单的语言向他们解释，\n倘若发现自己有不能理解的地方或者不能简单解释某议题的地方，恰恰这些是你对该议题理解薄弱的地方，\n这个时候应该回到原始材料中，重新学习理解薄弱的地方，一直到你能够以简单的语言来解释为止。\n重复以上步骤，直到你能完全理解这个议题为止。\n\n其实上面的内容，都是「费曼技巧」中的内容。\n而一旦你以这种方式去学习，\n其一，能够真正的了解任何你学习的事物。\n其二，做出深思熟虑并有智慧的决定。\n其三，熟练的将知识应用到实际问题中。\n\n以上~\n\n时间管理，是一个大的议题。相关的书籍很多很多。\n这些书所传述的「技能」，在现实生活中起多少作用，真的是靠自己如何将其和生活本身相结合了。\n时间就是生命~与其说是管理时间，不如说是管理好自己。\n以我自己来说，有时候觉得一丁点儿的娱乐都不应该存在，很大原因是觉得有好多东西需要去学习，成为更好的自己。\n所以玩一会，就觉得浪费时间。以前看过别人写的「为什么越努力越焦虑」，其核心的观点是：当你以「成为更好的自己」为目标，但「更好」并没有一个确切的定义，「更好」之外还有「更好」，你永远也达不到「最好」，最终努力成了目标本身，没有上限的目标一定会使你焦虑，一旦停止努力，就会陷入焦虑之中。\n但努力不是目标，它只是实现目标的手段。\n我们需要的，是具体确切的短期目标。\n尽量高效高质地完成短期目标，并及时收到反馈。这才是努力的正确姿势。\nvia--知乎:[以上观点来源链接](https://www.zhihu.com/question/37672919/answer/224810826)\n\n时间管理，本身应该结合实际的目标来制定。\n之前看《把时间当作朋友》一书，前3章的内容其实写的挺好，以下是关于此书的一点总结。\n\n背景：适用于短期或长期目标的实现\n1.制定可实现的目标\n2.倒推实现目标的步骤\n3.根据步骤制定任务\n4.将大的任务拆分成小的子任务\n5.将子任务拆分成更小的子任务--以最终可以完成为标准拆分\n6.将拆分的任务填入列表中\n7.估算任务的时间\n8.制定每日的任务列表\n9.执行\n\nTips:\n∙ 拆分任务应当遵循：做什么，为什么，怎么做 三原则。\n∙ 拆分任务后，应当寻找其中可以并行执行的任务，以提高效率。\n∙ 及时行动，立刻马上。\n∙ 每个任务：简单的部分应当迅速完成，困难部分多花时间。\n\n如果光说如何努力，或者光制定了计划而拖延执行，以上内容也就没了什么意义。\n之前浏览知乎，有搜到关于「如何保持自律」的内容。(ps:别问为什么又是知乎，问就是知乎干货多)\n\n假设存在6 7 8 9个坏习惯，比如熬夜、赖床、拖延......影响到你的自律，一般来说你肯定觉得要把这些坏习惯全部改掉，才能真正的自律。\n这样的思路，没错，但是实现起来很难。\n但其实，你只需要改变其中某个或者某些习惯即可，这些习惯一旦改变，则其他方面就会出现相应的改变，进而重塑生活/工作/学习方式。所以要找到影响你自律的最核心的坏习惯。\n「成功并不是要做对每一件事」，于我而言，其实跑步锻炼，就可以保持自律。\n所以，当你觉得自己不够自律的时候，请细心找找影响你自律最关键的习惯是什么，进而改变它，最终带来更多的改变。\n此处应推荐：[习惯的力量](https://zure.fun/book/8d41843e-4043-11e9-a197-560001e9d47e/)\n\n而其实「我就是不想做啊」更是生活常态。\n根据弗洛伊德的观点，每个人都存在「本我」「自我」「超我」的概念。\n偷懒拖延的本性，源于「本我」的「唯乐主义」。\n不断鞭策自己成长的是「超我」，是理想化的自己。\n而联系两者的是存在于中间的「自我」。\n请尝试将「超我」置于「管理者」和「引领者」的位置。\n本来作为「币圈大佬」的李笑来，人设已崩，而其写的那本《把时间当作朋友》，也不推荐读，前三章观点还可以，后面的章节写的非常乱，全是自我经验，与其费力去除其中的个人经验从而提炼出什么有价值的东西来，不如就别看。\n但其前三章中，有个观点是：我们可以用自己的大脑来控制我们的大脑。\n意思是，大脑本身是以「本我」的「唯乐主义」原则运行的，我们都「无意识地被自己的大脑所控制」，也就是「被负面情绪、唯乐主义指使，拖拖拉拉不愿做事」，我们应该意识到，「大脑」并不是「我自己」，而是属于「我」的，「我」是「我的大脑」的主人。\n也就是说，我们要意识到，自己在理性上具有主导地位。\n有意识地让「超我」去扮演「引领者」和「管理者」的角色，才是真正去主宰自己的生活。\n\n还有一种观点：「我」既是「我自己的老板」，也是「我自己的员工」。\n当你享受当老板时候的自我决策和掌控感时，也应该履行作为员工的职责。\n即我是我自己的老板，一切都是我说了算，我也是我自己的员工，我应该学会服从，\n**而不是想做就做，不想做就不做！**\n当然了，效果如何，还需实践~\n以上~\n\nPS: 评论系统来自Disqus，这玩意被防火墙封了。\nPPS:Pray for Kyoani.\n\n","tags":["时间管理"]},{"title":"一些回忆","url":"%2F2019%2F07%2F19%2F%E4%B8%80%E4%BA%9B%E5%9B%9E%E5%BF%86%2F","content":"\n龙珠是小学时候看的，1996年以后，具体几年级忘了。\n小学时代，对这些动漫的第一印象就是：很帅。那种帅是说，正义终将胜利。\n印象中只记得关于龙珠的几个片段，\n其一，有个叫曹振的同学说「孙悟空最后当了神啊」，还有他那张幼稚的小脸印象深刻。\n其二，借了张齐玉同学的漫画书，那会晚上和奶奶一起睡，所以那次借了书后，看到了很晚。\n日光灯在北面墙上挂着，噼噼啪啪的总有虫子的撞击声，那会住在郊区。\n其他的诸如，天空之城、铁胆火车侠、奥特曼、EVA、美少女战士、数码宝贝、超能勇士、蓝猫淘气三千问、葫芦娃等等等，都没剩多少印象了，连看的过程中的片段都不记得一丝一毫。\n\n刚看完了龙珠超：布罗利。龙珠这部动漫，大概到大学的时候，才看完所有的动画，即便看的早。之后这些超，貌似不是鸟山明出的就没看。\n要说这些事情，包括小学初中在记忆里只剩下符号，没有多少具体意义。\n要给它们定个基调，就是我觉得我开窍的时间太晚，到了高中才明白一些事情。\n不是我不想开窍，是因为那时候的执念太深，也只有一个：不想多和别人交流。\n嘛，不过现在也好不到哪去。\n\n人总会在某些时候，怜惜自己。觉得自己很无辜很无助也很无力。\n你不是孤单一个人。很多人都会如此，并没有谁就一定会没有这些情绪。\n有些人走出来，是因为相信自己。或者不相信也没关系。\n只要你能找点事情去做，一旦忙起来，这些焦虑抑郁等负面情绪，根本没得时间去想。\n讨好型的人格，最终会因为受到的伤害太多，选择冷漠。这很常见，但也真的没必要。\n除了同班同学，人这一辈子遇到的人，不会超过2000，真正相识的能有几个？\n遇到坏人，并不代表始终会遇到坏人。不要走极端，听话。\n\n我前前后后读了至少十几本心理学科普书，这些只是「技」，但指导生活足够。\n决定你现在的，不是过去发生的事情，而是你透过过去发生的事情，在此刻做出选择的结果。\n每一个选择背后都会关联着一个目的。你选择什么是为了什么。而这个目的，最终个人猜测是潜意识里那些没有得到满足的需求，最核心的不过是「爱」。应该说，过去不管发生了什么，它们都是中立的，而你因为某些目的，特意选择了某些记忆，以此来说明自己是个什么样的人 。既然是自己的选择，就可以重新选择，唯独缺少的是勇气罢了。\n建议看看《被讨厌的勇气》，此书我看了5遍+。[喜马拉雅的地址](https://www.ximalaya.com/youshengshu/2749527/)\n\n阿德勒的心理学，固然不能回答所有问题，但他提供了一个思路，那就是以足够的勇气去追求更好的自己，其中也包括如何处理人际关系，如何面对心理阴影等等。这本书虽然不是他的著作，但作者是研究阿德勒心理学的学者，提炼出来的观点，有些足够颠覆一般的认知。\n\n我希望你很好。\n以上~\n\n* * *\n日志\n修改内容：「标题」\n修改时间：2019年09月23日09:57:07\n\n\n\n","tags":["动漫"]},{"title":"从某次搜索谈起","url":"%2F2019%2F07%2F15%2F%E4%BB%8E%E6%9F%90%E6%AC%A1%E6%90%9C%E7%B4%A2%E8%B0%88%E8%B5%B7%2F","content":"之前有想法是从底层构建一个博客，后来想想工程量有点大，有现成的工具和框架不必花那些时间了。\n偶然某次搜索，搜到了一个博士建的博客站点。于是揣着一点好奇，把里面的文章随机浏览了一遍。\n[博客地址](http://songchunlin.net/cn/archive/)\n内容多数是关于生活的。技术类涉及不多，毕竟非CS类。\n博客的Timeline，是从2013年开始的。\n\n有一段时间，对于时间很敏感。因为以前浪费多了，觉得浪费一丁点儿都心疼，即便在没有事情做的时候，也很少会看点休闲的东西。这一年多，没有看完一部美剧或日剧。电影只完整看完了《流浪地球》。读书，kindle里存书太多，某些不值得看的书顺手删掉，细读的也不是特别多，只不过睡前总要翻几页。\n\n从某些方面来说，我相信除了那些天赋上必须具备条件的事情，一般而言，可以后天学习得到的，就一定可以获得的。至于是否值得践行「1万小时理论」，前段时间读的刻意学习更适合。而就学习这件事来说，质量的高低，和人是否主动投入很大关系。说到底，重复才是学习的精髓。当了那么多年学生，从来没把学习当作很重要的事情来看，也没有什么学习技巧。随波逐流的学，想当然的觉得这些东西没什么，最终会以各种形式影响到自己的生活。环境是非常重要的一件事情。\n\n知乎上有人说，一旦你开始锻炼，那么你的年龄将保持在你锻炼的那个阶段。事实上，锻炼最大的好处是可以化解很多不必要的负面情绪。我一直鼓励身边的人运动。至少我自己每周保持运动5次，每次30分钟不等。\n说回上面的博客，因为对页面的简洁有那么一丝要求。\n之前Hexo搭配的NexT主题，很常见。搞hackintosh的时候翻教程，十个里面有九个是这个主题，或是这个主题的魔改。github的加载速度，国内一言难尽，时快时慢，甚至我挂了梯子，也不快。\nHexo的主题，文件目录和内容比较固定，稍微套用了下博主的主题。\n于是很顺利搭建完成。\n对于markdown的使用，各种标记的使用还不熟。纯文字倒没什么。\n域名和梯子有一点花费。\n不过Hexo+Github建博客很容易，甚至域名都可以不用绑定，直接用github.io。\n希望能一直写下去。\n(完)\n* * *\n日志\n修改内容：删除部分多余文字\n修改时间：2019年09月23日10:04:18\n\n\n","tags":["技术应用"]},{"title":"关于一些问题的思考","url":"%2F2019%2F07%2F15%2F%E5%85%B3%E4%BA%8E%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%80%83%2F","content":"\n存在是客观的，但意义是空虚的。\n没有必要问出生活的意义是什么，创造了什么便是意义的全部。\n你是你选择的结果。\n主观的选择，背后一定有其目的。\n现在的你并不是由过去决定的，而是由当下的你决定的。\n你是先有的目的，再从过去寻找原因。\n换句话说，决定我们自身的不是过去的经历，而是我们赋予这些经历的意义。\n既然赋予是我们的选择，就可以再选一次。\n心理创伤本身也不存在，它是为了支持我们的目的而存在。不过感受是主观的，经历是客观的。\n你以为难的事情，做的时候，也许感到的是「不过如此」。\n","tags":["生活"]}]